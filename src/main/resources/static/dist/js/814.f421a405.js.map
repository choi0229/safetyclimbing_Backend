{"version":3,"file":"js/814.f421a405.js","mappings":"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","sources":["webpack://frontend/./src/api/index.js","webpack://frontend/./src/api/complaint.js","webpack://frontend/./src/stores/complaint.js","webpack://frontend/./src/views/ManageListView.vue","webpack://frontend/./src/views/ManageListView.vue?d8b6"],"sourcesContent":["import axios from 'axios';\r\n\r\nfunction apiInstance() {\r\n  const instance = axios.create({\r\n    baseURL: 'http://localhost:9000/api',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n  });\r\n  return instance;\r\n}\r\n\r\nexport { apiInstance };","import { apiInstance } from \"./index.js\";\r\nconst api = apiInstance();\r\nimport router from \"@/router/index.js\";\r\nimport axios from 'axios';\r\n\r\n//complaintList 가져오기 요청\r\nexport async function getComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/list');\r\n    console.log(\"you can use getComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 날짜 최신순으로 가져오기 요청\r\nexport async function getRecentComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/listRecent');\r\n    console.log(\"you can use getRecentComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintByUserId(userId) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/mine/${userId}`);\r\n    //console.log(\"getComplaintByUserId\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintListByInst(institution) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/myList/${institution}`);\r\n    //console.log(\"getComplaintListByInst\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//pathList 날짜 최신순으로 가져오기 요청\r\nexport async function getPathList() {\r\n  try { \r\n    const response = await axios.get('/api/pathList');\r\n    console.log(\"you can use getPathList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 작성 요청\r\nexport async function insertComplaint(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insert', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원글 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오기 요청\r\nexport async function getComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/one/${complaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 유저 아이디에 따른 유저정보 한개 가져오기 요청\r\nexport async function getUserById(userId) {\r\n  try {\r\n    const response = await axios.get(`/api/userInfo/${userId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n  \r\n}\r\n\r\n// 코스 한개씩 가져오기 요청\r\nexport async function getCourseById(courseId) {\r\n  try {\r\n    const response = await axios.get(`/api/course/${courseId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n\r\n// 민원글 번호에 따른 글 삭제 요청\r\nexport async function deleteComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.delete(`/api/complaint/delete/${complaintNo}`);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n// 글 업데이트\r\nexport async function updateComplaintByNo(complaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/update/${complaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n//특정 유저의 complaintList를 가져오기 요청\r\nexport async function getUserPostList(userNo) {\r\n  try { \r\n    const response = await api.get(`/auth/userpostlist/${userNo}`);\r\n    console.log(userNo);\r\n    console.log(\"you can use getUserPostList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//게시글 추가 및 \r\nexport async function insertPostAndKeyword(postData, keywordData) {\r\n  const formData = new FormData();\r\n  formData.append('post', new Blob([JSON.stringify(postData)], { type: 'application/json' }));\r\n  formData.append('postkeyword', new Blob([JSON.stringify(keywordData)], { type: 'application/json' }));\r\n\r\n  try {\r\n    const response = await api.post('/auth/insert', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n    if (err.response && err.response.status === 401) {\r\n      // 로그인 페이지로 이동\r\n      alert(\"로그인 후 이용하실 수 있습니다.\")\r\n      router.push({ path: '/login' });\r\n    }\r\n    throw err;\r\n  }\r\n} \r\n\r\n// 이미지 저장요청\r\nexport async function saveImage(formData) {\r\n  try {\r\n    const response = await api.post('/auth/upload-image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    console.log('서버 응답:', response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('이미지 업로드 중 오류 발생:', err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원처리정보 한개 가져오기 요청\r\nexport async function getProcessingByNo(processingComplaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/processing/${processingComplaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원처리정보 작성 요청\r\nexport async function insertProcessing(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insertProcessing', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원처리정보 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원처리정보 업데이트\r\nexport async function updateProcessingByNo(processingComplaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/updateProcessing/${processingComplaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}","import { ref } from \"vue\";\r\nimport { defineStore } from \"pinia\";\r\nimport { getComplaintList, getUserPostList, getComplaintListByInst, getComplaintByNo, getRecentComplaintList, getPathList, getComplaintByUserId } from '@/api/complaint';\r\n\r\n// 민원글 리스트 가져오는 상태\r\nexport const useComplaintListStore = defineStore('complaintlist', () => {\r\n  const complaintlist = ref([]);\r\n  async function fetchComplaintList() {\r\n    console.log(\"Fetching complaintlist ===\");\r\n    complaintlist.value = await getComplaintList();\r\n    console.log(\"postlist--\",complaintlist.value);\r\n  }\r\n\r\n  return { complaintlist, fetchComplaintList }\r\n})\r\n\r\n// 민원글 리스트 날짜 최신순으로 가져오는 상태\r\nexport const useRecentComplaintListStore = defineStore('recentcomplaintlist', () => {\r\n  const recentcomplaintlist = ref([]);\r\n  async function fetchRecentComplaintList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    recentcomplaintlist.value = await getRecentComplaintList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { recentcomplaintlist, fetchRecentComplaintList }\r\n})\r\n\r\nexport const useMyComplaintListStore = defineStore('mycomplaintlist', () => {\r\n  const mycomplaintlist = ref([]);\r\n  async function fetchMyComplaintList(userId) {\r\n    //console.log(\"Fetching mycomplaintlist ===\");\r\n    mycomplaintlist.value = await getComplaintByUserId(userId);\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { mycomplaintlist, fetchMyComplaintList }\r\n})\r\n\r\nexport const useManagingComplaintListStore = defineStore('managingcomplaintlist', () => {\r\n  const managingcomplaintlist = ref([]);\r\n  async function fetchManagingComplaintList(institution) {\r\n    managingcomplaintlist.value = await getComplaintListByInst(institution);\r\n    console.log(\"담당업무--\",managingcomplaintlist.value);\r\n  }\r\n\r\n  return { managingcomplaintlist, fetchManagingComplaintList }\r\n})\r\n\r\n// 운동 기록 리스트 날짜 최신순으로 가져오는 상태\r\nexport const usePathList = defineStore('pathList', () => {\r\n  const pathList = ref([]);\r\n  async function fetchPathList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    pathList.value = await getPathList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { pathList, fetchPathList }\r\n})\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오는 상태\r\nexport const useComplaintStore = defineStore('complaintByNo', () => {\r\n  const complaintone = ref({});\r\n  async function fetchComplaintone(postNo) {\r\n    try {\r\n      complaintone.value = await getComplaintByNo(postNo);\r\n    } catch (err) {\r\n      console.error('Error fetching post:', err);\r\n    }\r\n  }\r\n  return { complaintone, fetchComplaintone };\r\n});\r\n\r\n// 특정 유저의 게시글 목록 가져오는 상태\r\nexport const useUserPostListStore = defineStore('userpostlist', () => {\r\n  const userpostlist = ref([]);\r\n  async function fetchUserPost() {\r\n    const userNo = sessionStorage.getItem('userNo');\r\n    console.log(userNo);\r\n    if (!userNo) {\r\n      console.error('userNo is undefined or null');\r\n      return;\r\n    }\r\n    try {\r\n      console.log(\"userpostlist -- 유저 포스트 리스트\");\r\n      userpostlist.value = await getUserPostList(userNo);\r\n      console.log(\"userpostlist--\", userpostlist.value);\r\n    } catch (err) {\r\n      console.error('Error fetching userpostlist:', err);\r\n    }\r\n  }\r\n\r\n  return { userpostlist, fetchUserPost }\r\n})\r\n","\r\n<template>\r\n  <HeaderView style=\"z-index: 4;width: 100%;\"></HeaderView>\r\n\r\n  <div class=\"image-container mb-2\">\r\n    <img src=\"/images/mount3.JPG\" alt=\"Mountains\" class=\"background-img\">\r\n    <h2 class=\"align-to-card\">등산로 위험 신고 목록</h2>\r\n  </div>\r\n\r\n\r\n  <span style=\"margin-left: 240px;\">총 : {{ totalList.length }}건</span>\r\n  <span style=\"margin-left: 20px;\">현재 : {{ currentPage }}/{{ totalPages }}페이지</span>\r\n\r\n  <!-- 오른쪽 아래 공지사항 카드 START -->\r\n  <div class=\"d-flex justify-content-center\">\r\n    <div class=\"h-300px d-flex align-items-center justify-content-center mt-4 mb-4\" style=\"width: 2000px;\">\r\n      <!--begin::Search-->\r\n      <div class=\"col-9\">\r\n        <!--begin::Contacts-->\r\n        <div class=\"card card-flush\" id=\"kt_contacts_list\">\r\n          <!--begin::Header-->\r\n          <div class=\"card-header d-flex flex-column align-items-center  pb-2\">\r\n            <div class=\"row w-100\">\r\n              <div class=\"col d-flex justify-content-start\">\r\n                <button class=\"btn btn-success btn-sm fw-bold\" @click=\"getRecentList()\">{{btnname}}</button>\r\n              </div>\r\n              <div class=\"col d-flex justify-content-end\">\r\n                <button type=\"button\" class=\"btn btn-success btn-sm fw-bold\" @click=\"goToHeatmapPage\">히트맵</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <!--end::Header-->\r\n\r\n          <!--begin::Separator-->\r\n          <div class=\"separator separator-dashed m-1\"></div>\r\n          <!--end::Separator-->\r\n\r\n          <!--begin::Card body-->\r\n          <div class=\"card-body pt-3 pb-4\" id=\"kt_contacts_list_body\">\r\n            <div class=\"container\">\r\n              <div class=\"row\" >\r\n                  <div class=\"col-1 text-center\">\r\n                    <span class=\"text-muted fs-7\" >번호</span>\r\n                  </div>\r\n                  <div class=\"col-1 text-center\">\r\n                  </div>\r\n                  <div class=\"col-5 text-center\">\r\n                    <span class=\"\" style=\"white-space: nowrap\">제목</span>\r\n                  </div>\r\n                  <div class=\"col-3 text-center\">\r\n                    <span class=\"\" style=\"white-space: nowrap\">담당</span>\r\n                  </div>\r\n                  <div class=\"col-2 text-center\">\r\n                    <span class=\"text-muted fs-7\">신고일</span>\r\n                  </div>\r\n                  <hr />\r\n                </div>\r\n            </div>\r\n            <!--begin::List-->\r\n            <!--begin::User-->\r\n            <div v-for=\"(item, index) in displayedList\" :key=\"item.complaintNo\" class=\"container mb-2\">\r\n              <!--begin::Details-->\r\n              <div class=\"row\">\r\n                <div class=\"col-1 text-center\">\r\n                  <!-- 글 번호 계산 -->\r\n                  <span class=\"text-muted fs-7\">{{ totalList.length - (currentPage - 1) * itemsPerPage - index }}</span>\r\n                </div>\r\n                <div class=\"col-1 d-flex justify-content-center\">\r\n                  <span class=\"rounded-box\" :style=\"item.complaintState === '미처리' ? { color: 'red', borderColor: 'red' } : {}\">{{ item.complaintState }}</span>\r\n                </div>\r\n                <div class=\"col-5\">\r\n                  <span class=\"ms-3\" style=\"white-space: nowrap\" @click=\"getComplaintByNo(item.complaintNo)\">{{ item.complaintTitle }}</span>\r\n                </div>\r\n                <div class=\"col-3 d-flex justify-content-center\">\r\n                  <span class=\"ms-3\" style=\"white-space: nowrap\">{{ item.institution }}</span>\r\n                </div>\r\n                <div class=\"col-2 text-center\">\r\n                  <span class=\"text-muted fs-7\">{{ item.createdAt.split(' ')[0] }}</span>\r\n                </div>\r\n                <hr />\r\n              </div>\r\n              <!--end::Details-->\r\n            </div>\r\n\r\n            <!--end::User-->\r\n\r\n            <!--end::List-->\r\n          </div>\r\n          <!--end::Card body-->\r\n          <!-- START:: pagination-->\r\n          <div class=\"card-footer d-flex justify-content-center\" style=\"height: 55px;\">\r\n            <nav aria-label=\"Page navigation example\">\r\n              <ul class=\"pagination\">\r\n                <!-- 이전 페이지 -->\r\n                <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\r\n                  <button class=\"page-link\" @click=\"changePage(currentPage - 1)\" aria-label=\"Previous\">\r\n                    <span aria-hidden=\"true\">&laquo;</span>\r\n                  </button>\r\n                </li>\r\n                \r\n                <!-- 페이지 번호 -->\r\n                <li v-for=\"page in totalPages\" :key=\"page\" class=\"page-item\" :class=\"{ active: currentPage === page }\">\r\n                  <button class=\"page-link\" @click=\"changePage(page)\">{{ page }}</button>\r\n                </li>\r\n\r\n                <!-- 다음 페이지 -->\r\n                <li class=\"page-item\" :class=\"{ disabled: currentPage === totalPages }\">\r\n                  <button class=\"page-link\" @click=\"changePage(currentPage + 1)\" aria-label=\"Next\">\r\n                    <span aria-hidden=\"true\">&raquo;</span>\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n          <!-- END:: pagination-->\r\n        </div>\r\n        <!--end::Contacts-->\r\n      </div>\r\n      <!--end::Search-->\r\n    </div>\r\n  </div>\r\n  <!-- 오른쪽 아래 공지사항 카드 END -->\r\n\r\n\r\n</template>\r\n\r\n<script setup>\r\nimport HeaderView from '@/components/HeaderView.vue';\r\nimport { ref, onMounted, computed } from \"vue\";\r\nimport { useComplaintListStore, useComplaintStore, useRecentComplaintListStore, useManagingComplaintListStore } from \"@/stores/complaint\"\r\nimport router from \"@/router/index.js\";\r\nimport { storeToRefs } from 'pinia';\r\n\r\n// 상태 변수 추가\r\nconst isRecent = ref(false);\r\nlet btnname = ref('담당신고보기');\r\n\r\n// 스토어 가져와서 리스트 받아오기\r\nconst complaintListStore = useComplaintListStore();\r\nconst recentcomplaintListStore = useRecentComplaintListStore();\r\nconst managercomplaintListStore = useManagingComplaintListStore();\r\n\r\n// onMounted로 컴포넌트가 마운트된 후에 실행되도록 설정\r\nonMounted(async () => {\r\n  await init();\r\n});\r\n\r\nlet institution = localStorage.getItem(\"userInstitution\")\r\nconsole.log(\"로그인한사람담당과:\", institution);\r\n\r\nasync function init() {\r\n  await complaintListStore.fetchComplaintList();\r\n  await recentcomplaintListStore.fetchRecentComplaintList();\r\n  await managercomplaintListStore.fetchManagingComplaintList(institution);\r\n  \r\n}\r\n// eslint-disable-next-line no-unused-vars\r\nconst { complaintlist } = storeToRefs(complaintListStore);\r\nconst { recentcomplaintlist } = storeToRefs(recentcomplaintListStore);\r\nconst { managingcomplaintlist } = storeToRefs(managercomplaintListStore);\r\n\r\n// 표시할 리스트를 computed로 정의\r\nconst totalList  = computed(() => isRecent.value ? managingcomplaintlist.value : recentcomplaintlist.value);\r\n\r\nfunction getRecentList() {\r\n  isRecent.value = !isRecent.value;\r\n  if(isRecent.value) {\r\n    btnname = '전체보기';\r\n  }else{\r\n    btnname = '담당신고보기';\r\n  }\r\n}\r\n\r\n// 번호에 따른 민원 글 데이터 불러오기\r\nconst complaintStore = useComplaintStore();\r\n// eslint-disable-next-line no-unused-vars\r\nconst complaintone = storeToRefs(complaintStore);\r\n\r\nasync function getComplaintByNo(key) {\r\n  await complaintStore.fetchComplaintone(key);\r\n  sessionStorage.setItem(\"complaintNo\", key);\r\n  router.replace({path: '/manageInfo'});\r\n}\r\n\r\nfunction goToHeatmapPage() {\r\n  router.replace({ path: \"/heatmap\" });\r\n}\r\n\r\n// 페이지네이션 변수\r\nconst currentPage = ref(1);\r\nconst itemsPerPage = 10;\r\n\r\n// 페이지에 따른 데이터 계산\r\nconst displayedList = computed(() => {\r\n  const start = (currentPage.value - 1) * itemsPerPage;\r\n  const end = start + itemsPerPage;\r\n  return totalList.value.slice(start, end);\r\n});\r\n\r\n// 총 페이지 수 계산\r\nconst totalPages = computed(() => Math.ceil(totalList.value.length / itemsPerPage));\r\n\r\n// 페이지 변경 함수\r\nfunction changePage(page) {\r\n  if (page >= 1 && page <= totalPages.value) {\r\n    currentPage.value = page;\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.image-container {\r\n  position: relative; /* 자식 요소의 기준이 되는 컨테이너 */\r\n  width: 100%; /* 컨테이너 가로 폭 */\r\n  max-width: 1200px; /* 이미지 최대 가로 폭 (필요시 설정) */\r\n  height: 350px;\r\n}\r\n\r\n.background-img {\r\n  width: 1903px; /* 이미지 가로 폭 */\r\n  height: 330px;\r\n  display: block; /* 불필요한 여백 제거 */\r\n}\r\n\r\n.align-to-card {\r\n  position: absolute; /* 부모 컨테이너를 기준으로 위치 */\r\n  bottom: 40px; /* 이미지 아래에서 20px 위로 배치 */\r\n  left: 230px; /* 이미지 왼쪽에서 20px 떨어지도록 배치 */\r\n  font-size: 40px; /* 텍스트 크기 */\r\n  font-weight: 700;\r\n  color: white; /* 텍스트 색상 */\r\n  text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7); /* 텍스트에 그림자 효과 */\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n.rounded-box {\r\n  display: inline-block;\r\n  padding: 1px 4px;\r\n  width: 100px;\r\n  border: 2px solid;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n}\r\n\r\nhr {\r\n    border: 1px solid #ccc; /* 구분선 색과 두께 */\r\n    margin: 10px 0; /* 구분선 위아래 간격 */\r\n  }\r\n\r\n/* 범례 스타일 */\r\n.map-legend {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  background-color: rgba(255, 255, 255, 0.8); /* 반투명 배경 */\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  font-size: 14px;\r\n  z-index: 2; /* Ensure the legend is on top of the map */\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.legend-icon {\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-right: 8px;\r\n}\r\n\r\n.legend-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n/* 선택된(활성) 페이지 색상 변경 */\r\n.pagination .page-item.active .page-link {\r\n  background-color: #04663f; /* success 색상 */\r\n  border-color: #04663f; /* success 색상 */\r\n  color: white; /* 텍스트 색상 */\r\n}\r\n</style>\r\n","import script from \"./ManageListView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ManageListView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ManageListView.vue?vue&type=style&index=0&id=c8d16090&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-c8d16090\"]])\n\nexport default __exports__"],"names":["apiInstance","instance","axios","create","baseURL","headers","api","async","getComplaintList","response","get","console","log","data","err","error","getRecentComplaintList","getComplaintByUserId","userId","getComplaintListByInst","institution","getPathList","insertComplaint","post","status","getComplaintByNo","complaintNo","getUserById","getCourseById","courseId","deleteComplaintByNo","delete","updateComplaintByNo","patch","getUserPostList","userNo","getProcessingByNo","processingComplaintNo","insertProcessing","updateProcessingByNo","useComplaintListStore","defineStore","complaintlist","ref","fetchComplaintList","value","useRecentComplaintListStore","recentcomplaintlist","fetchRecentComplaintList","useMyComplaintListStore","mycomplaintlist","fetchMyComplaintList","useManagingComplaintListStore","managingcomplaintlist","fetchManagingComplaintList","usePathList","pathList","fetchPathList","useComplaintStore","complaintone","fetchComplaintone","postNo","userpostlist","fetchUserPost","sessionStorage","getItem","itemsPerPage","isRecent","btnname","complaintListStore","recentcomplaintListStore","managercomplaintListStore","onMounted","init","localStorage","storeToRefs","totalList","computed","getRecentList","complaintStore","key","setItem","router","replace","path","goToHeatmapPage","currentPage","displayedList","start","end","slice","totalPages","Math","ceil","length","changePage","page","__exports__"],"sourceRoot":""}