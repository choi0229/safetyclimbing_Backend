{"version":3,"file":"js/345.6a1f8a47.js","mappings":"8WA8BE,MAAMA,GAASC,EAAAA,EAAAA,MACTC,EAASA,IAAMF,EAAOG,OA+J1BC,eAAeC,EAAYC,EAAQC,EAAKC,GACxC,IACI,MAAMC,QAAiBC,MAAMH,GACvBI,QAAmBF,EAASG,OAG5BC,EAAYF,EAAWG,SAASC,KAAIC,IACtC,MAAMC,EAAMD,EAAKE,SAASC,YAAY,GAChCC,EAAMJ,EAAKE,SAASC,YAAY,GACtC,OAAOE,OAAOC,aAAaC,YAAYH,EAAKH,EAAI,IAI9CO,QAAyBH,OAAOI,0BAA0BnB,EAAOoB,gBAAiBb,GAExFW,EAAiBG,SAAQ,CAACC,EAAUC,KAChC,MAAMC,EAAWF,EAASG,OAAS,EAC7Bf,EAAOL,EAAWG,SAASe,GAGjC,IAAIG,EAAWxB,EACf,OAAQQ,EAAKiB,WAAWC,MACpB,IAAK,KACDF,EAAW,uBACX,MACJ,IAAK,KACDA,EAAW,uBACX,MACJ,IAAK,KACDA,EAAW,sBACX,MACJ,IAAK,KACDA,EAAW,mBACX,MACJ,QACIA,EAAWxB,EAInB,MAAM2B,EAAS7B,EAAO8B,SAASC,IAAI,CAC/BT,SAAUP,OAAOiB,WAAWf,YACxBF,OAAOkB,KAAKC,UAAUZ,EAASa,WAC/BpB,OAAOkB,KAAKC,UAAUZ,EAASc,UAC/BZ,GAEJa,UAAW,CACPC,MAAOZ,EACPa,eAAgBxB,OAAOyB,eAAeC,OACtCC,MAAO,GACPjB,OAAQ,IAEZkB,MAAO,CACHC,KAAMlC,EAAKiB,WAAWkB,SAAW,GACjCC,KAAM,kBACNC,aAAchC,OAAOiC,MAAMC,MAC3BC,aAAc,EACdX,eAAgBxB,OAAOyB,eAAeC,OACtCU,YAAa,IAAIpC,OAAOqC,WAAW,GAAI,KAE3CC,YAAa,aAAa3B,mFAA0FhB,EAAKiB,WAAWkB,SAAW,SAASnC,EAAKiB,WAAW2B,YAAc,aAI1LtD,EAAOuD,sBAAsBC,kBAAkBC,IACvC1C,OAAO2C,QAAQD,IAAmBA,IAAmB5B,IACrD7B,EAAO2D,QAAQC,UAAUC,UAAW,EACpC7D,EAAO2D,QAAQC,UAAUP,YAAcxB,EAAOwB,YAClD,GACF,GAEV,CAAE,MAAOS,GACLC,QAAQD,MAAM,GAAG7D,mBAAsB6D,EAC3C,CACJ,EArOIE,EAAAA,EAAAA,KAAU,KAEN,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAM,qEAEbH,EAAOI,OAAS,KACZC,GAAY,EAEhBJ,SAASK,KAAKC,YAAYP,GAE1B,MAAMQ,EAAOP,SAASC,cAAc,QAKtCrE,eAAewE,IAETvD,OAAO2D,IAAIC,mBAAqB,wLAGhC,MAAM3E,EAAS,IAAIe,OAAO6D,OAAO,kBAAmB,CAChDxD,sBAAuBL,OAAO8D,0BAGhCC,gBAAiBZ,SAASC,cAAc,OAExCY,WAAW,EAGXC,sBAAsB,EACtBC,YAAY,EACZC,iBAAiB,EACjBC,iBAAiB,EACjBC,kBAAkB,EAClBzB,SAAS,EACT0B,UAAU,IAINC,QAAoBC,IACpBC,EAAeC,EAAwBH,EAAa,MAE1DI,EAAe1F,EAAQwF,GAGvBG,EAAc3F,EAAQwF,GAEtBzF,EAAYC,EAAO,8BAA8B,qBACrD,CAEAF,eAAeyF,IACb,MAAMpF,QAAiBC,MAAM,yBACvBwF,QAAazF,EAASG,OAC5B,OAAOsF,CACT,CAEA,SAASH,EAAwBH,EAAaO,GAC5C,MAAM,IACCP,EACH9E,SAAU8E,EAAY9E,SAASsF,QAAOC,GAClCA,EAAQpE,WAAWqE,SAASC,SAASJ,KAG/C,CAEA,SAASH,EAAe1F,EAAQsF,GAC9BtF,EAAOkG,YAAYnE,IAAIhB,OAAOoF,kBAAkBC,KAAKd,EAAa,CAC9De,OAAQtF,OAAOiC,MAAMsD,mBAAmB,WACxCC,KAAMxF,OAAOiC,MAAMsD,mBAAmB,WACtCE,YAAa,EACbC,eAAe,KACfC,MAAMC,IACN3G,EAAO4G,MAAMD,EAAW,GAE9B,CAEA,SAAShB,EAAc3F,EAAQsF,GAE7B,IAAIzE,EAAc,GAGpByE,EAAY9E,SAASa,SAAS0E,IAC1BA,EAAQnF,SAASC,YAAYQ,SAASwF,IAC9BC,MAAMC,QAAQF,IAAyB,IAAhBA,EAAKG,QAC5BnG,EAAYoG,KAAKJ,EACrB,GACF,IAIN,MAAMK,EAAQnG,OAAOoG,WAAWC,MAC1BC,EAAOtG,OAAOoG,WAAWG,WAAWJ,EAAOrG,EAAYmG,OAAQ,IAAIjG,OAAOoG,YAG1EI,EAAmB,IAAIxG,OAAOyG,wBAGpC,IAAK,IAAIC,EAAI,EAAGA,EAAI5G,EAAYmG,OAAQS,IAAK,CACzC,MAAMC,EAAO3G,OAAOoG,WAAWG,WAAWJ,EAAOO,EAAG,IAAI1G,OAAOoG,aACxDhF,EAAWC,GAAYvB,EAAY4G,GACpCnG,EAAWP,OAAOiB,WAAWf,YAAYkB,EAAWC,GAC1DmF,EAAiBI,UAAUD,EAAMpG,EACrC,CAGA,MAAMO,EAAS7B,EAAO8B,SAASC,IAAI,CAC/BT,SAAUiG,EACVK,MAAO,CACHC,UAAW,GACXC,MAAO/G,OAAOiC,MAAM+E,MACpBhF,aAAchC,OAAOiC,MAAMsD,mBAAmB,WAC9CpD,aAAc,EACd8E,gBAAiBjH,OAAOkH,gBAAgBC,mBAKpDlI,EAAOmI,MAAMC,OAAO5E,kBAAiB,KACjC,MAAMlC,EAAWO,EAAOP,SAAS+G,SAASrI,EAAOmI,MAAMG,aACvD,GAAIhH,EAAU,CAEV,MAAMiH,EAAYxH,OAAOyH,WAAWC,wBAAwBnH,GAG5DtB,EAAO0I,OAAOC,gBACVJ,EACA,IAAIxH,OAAOiB,YAAY,KAAM,KAAM,OAIvChC,EAAO0I,OAAOE,QAAQ,CAClBC,YAAa,CACTC,QAAS/H,OAAOkB,KAAK8G,UAAU,IAC/BC,MAAOjI,OAAOkB,KAAK8G,WAAW,IAC9BE,KAAM,IAGlB,KAIAjJ,EAAOmI,MAAMe,UAAYhC,EAAMiC,QAC/BnJ,EAAOmI,MAAMiB,SAAW/B,EAAK8B,QAC7BnJ,EAAOmI,MAAMG,YAAcpB,EAAMiC,QACjCnJ,EAAOmI,MAAMkB,WAAatI,OAAOuI,WAAWC,UAC5CvJ,EAAOmI,MAAMqB,WAAa,GAC1BxJ,EAAOmI,MAAMsB,eAAgB,EAC7BzJ,EAAO0J,SAASC,OAAOzC,EAAOG,EAClC,CAzII5C,EAAKmF,IAAM,aACXnF,EAAKoF,KAAO,uFACZ3F,SAASK,KAAKC,YAAYC,GAyI1BqF,EAAkBC,OAAOC,EAAgBC,QAAQH,EAAkBC,MAAM,IAmF/E,MAAMG,GAAaC,EAAAA,EAAAA,IAAI,GACjBC,GAAYD,EAAAA,EAAAA,IAAI,GAChBL,GAAoBK,EAAAA,EAAAA,IAAI,MAC9B,IAAIE,GAAe,EAGnB,MAAML,EAAkB,IAAIM,sBAAsBC,IAC5CA,EAAQ,GAAGC,iBAAmBH,IAChCA,GAAe,EACfI,EAAQ,IAAKP,GACbO,EAAQ,IAAKL,GACf,GACC,CAAEM,UAAW,KAEhB,SAASD,EAAQE,EAAQR,GACvB,IAAIS,EAAU,EACd,MAAMC,EAAWC,aAAY,KACvBF,EAAUD,GACZC,GAAW3I,KAAK8I,KAAKJ,EAAS,KAC9BR,EAAIJ,MAAMiB,UAAYJ,EAAUD,EAASA,EAASC,GAElDK,cAAcJ,EAChB,GACC,GACL,C,05BC7RF,MAAMK,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://frontend/./src/views/WebCourse3D.vue","webpack://frontend/./src/views/WebCourse3D.vue?3686"],"sourcesContent":["<template>\r\n    <div class=\"course-preview-page\">\r\n      <!-- 동영상 위에 위치한 뒤로 가기 버튼 -->\r\n      <button @click=\"goBack\" class=\"back-button\"><img src=\"/images/뒤로가기.png\"  alt=\"돋보기 아이콘\" width=\"30\" height=\"30\"></button>\r\n              <!-- 연간 분석 섹션 -->\r\n      <section class=\"annual-analysis-section\" ref=\"annualAnalysisRef\">\r\n        <h2 class=\"section-title\"></h2>\r\n        <div class=\"stats-container\">\r\n          <div class=\"card stat-item1\">\r\n            <p class=\"stat-desc\">거리(Km)</p>\r\n            <span class=\"count-up\" ref=\"growthRate\">{{ growthRate }}</span>\r\n            <span class=\"stat-title1\">KM</span>\r\n          </div>\r\n          <div class=\"card stat-item2\">\r\n            <p class=\"stat-desc\">고도(m)</p>\r\n            <span class=\"count-up\" ref=\"countries\">{{ countries }}</span>\r\n            <p class=\"stat-title2\">M</p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n  \r\n      <!-- 동영상과 작은 지도를 겹쳐 배치 -->\r\n      <div id=\"cesiumContainer\" style=\"width:100%; height: 100vh;\"></div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted } from 'vue';\r\n  import { useRouter } from 'vue-router';\r\n  \r\n  const router = useRouter();\r\n  const goBack = () => router.back();\r\n    \r\n    /* global Cesium */\r\n    onMounted(() => {\r\n        // Cesium.js 로딩\r\n        const script = document.createElement('script');\r\n        script.src = 'https://cdn.jsdelivr.net/npm/cesium@1.122.0/Build/Cesium/Cesium.js';\r\n    \r\n        script.onload = () => {\r\n            initCesium();\r\n        };\r\n        document.head.appendChild(script);\r\n    \r\n        const link = document.createElement('link');\r\n        link.rel = 'stylesheet';\r\n        link.href = 'https://cesium.com/downloads/cesiumjs/releases/1.95/Build/Cesium/Widgets/widgets.css';\r\n        document.head.appendChild(link);\r\n    \r\n      async function initCesium() {\r\n            // Cesium Ion 토큰 설정\r\n            Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI5Nzg1OWEzOS0yMWU0LTQ1MTEtOGY5NC1hZjg0YmFhNzgxMDMiLCJpZCI6MjU2MDAxLCJpYXQiOjE3MzE4OTgxMzB9.oNztRJnt40X1wN0JAS90SaLqSFEZIdQBSE7jFqLeH3g';\r\n    \r\n            // Cesium 뷰어 초기화\r\n            const viewer = new Cesium.Viewer('cesiumContainer', {\r\n                terrainProvider: await Cesium.createWorldTerrainAsync(),  // 고정밀 지형 데이터 사용\r\n  \r\n              // 로고와 저작권 정보 숨기기\r\n              creditContainer: document.createElement('div'), // 빈 div로 대체\r\n              // 시계와 타임라인 숨기기\r\n              animation: false,\r\n  \r\n              // 상단 도구 모음 버튼 숨기기\r\n              navigationHelpButton: false,\r\n              homeButton: false,\r\n              sceneModePicker: false,\r\n              baseLayerPicker: false,\r\n              fullscreenButton: false,\r\n              infoBox: false, // 정보 상자 비활성화 (필요 시)\r\n              geocoder: false // 검색 창 숨기기\r\n            });\r\n    \r\n  \r\n            const geoJsonData = await fetchGeoJson();\r\n            const filteredData = filterGeoJsonByPMNTN_NM(geoJsonData, '마루');\r\n    \r\n            displayGeoJson(viewer, filteredData);\r\n    \r\n            // 경로를 따라 마커 이동 애니메이션 시작\r\n            animateMarker(viewer, filteredData);\r\n  \r\n            loadMarkers(viewer,\"/data/2023산악사고_인왕산2.geojson\",\"/images/danger.png\");\r\n        }\r\n    \r\n        async function fetchGeoJson() {\r\n          const response = await fetch('/data/new북한산2.geojson');\r\n          const data = await response.json();\r\n          return data;\r\n        }\r\n    \r\n        function filterGeoJsonByPMNTN_NM(geoJsonData, searchKeyword) {\r\n          return{\r\n              ...geoJsonData,\r\n              features: geoJsonData.features.filter(feature =>\r\n                  feature.properties.PMNTN_NM.includes(searchKeyword)\r\n              )\r\n          }\r\n        }\r\n    \r\n        function displayGeoJson(viewer, geoJsonData) {\r\n          viewer.dataSources.add(Cesium.GeoJsonDataSource.load(geoJsonData, {\r\n              stroke: Cesium.Color.fromCssColorString('#00ff00'),\r\n              fill: Cesium.Color.fromCssColorString('#00ff00'),\r\n              strokeWidth: 3,\r\n              clampToGround: true,\r\n          })).then((dataSource) => {\r\n              viewer.flyTo(dataSource);\r\n          });\r\n        }\r\n    \r\n        function animateMarker(viewer, geoJsonData) {\r\n    \r\n          let coordinates = [];\r\n    \r\n           // 좌표를 하나의 배열로 만들기\r\n        geoJsonData.features.forEach((feature) => {\r\n            feature.geometry.coordinates.forEach((line) => {\r\n                if (Array.isArray(line) && line.length === 2) {\r\n                    coordinates.push(line); // [longitude, latitude] 형식의 좌표만 추가\r\n                }\r\n            });\r\n        });\r\n    \r\n        // 시작 시간과 종료 시간 설정\r\n        const start = Cesium.JulianDate.now();\r\n        const stop = Cesium.JulianDate.addSeconds(start, coordinates.length, new Cesium.JulianDate());\r\n    \r\n        // SampledPositionProperty를 사용하여 시간에 따른 위치 설정\r\n        const positionProperty = new Cesium.SampledPositionProperty();\r\n    \r\n        // 좌표마다 시간을 추가하여 마커가 부드럽게 이동하도록 함\r\n        for (let i = 0; i < coordinates.length; i++) {\r\n            const time = Cesium.JulianDate.addSeconds(start, i, new Cesium.JulianDate());\r\n            const [longitude, latitude] = coordinates[i];\r\n            const position = Cesium.Cartesian3.fromDegrees(longitude, latitude);\r\n            positionProperty.addSample(time, position);  // 시간에 따른 위치 샘플 추가\r\n        }\r\n    \r\n        // 마커를 경로에 맞춰 시간에 따라 이동시키기\r\n        const entity = viewer.entities.add({\r\n            position: positionProperty,\r\n            point: {\r\n                pixelSize: 20,\r\n                color: Cesium.Color.WHITE,\r\n                outlineColor: Cesium.Color.fromCssColorString('#ffa500'),\r\n                outlineWidth: 3,                       // 테두리 두께\r\n                heightReference: Cesium.HeightReference.CLAMP_TO_GROUND, // 지형에 고정\r\n            }\r\n        });\r\n    \r\n    // 카메라가 마커를 일정한 각도와 거리로 따라가도록 수동 설정\r\n    viewer.clock.onTick.addEventListener(() => {\r\n        const position = entity.position.getValue(viewer.clock.currentTime);\r\n        if (position) {\r\n            // 카메라의 목표 좌표계를 엔터티 위치로 변환\r\n            const transform = Cesium.Transforms.eastNorthUpToFixedFrame(position);\r\n            \r\n            // 일정한 거리와 각도로 카메라 설정\r\n            viewer.camera.lookAtTransform(\r\n                transform,\r\n                new Cesium.Cartesian3(-700, -1800, 1400)  // 뒤로 1000m, 위로 500m 이동한 위치에서 마커를 바라봄\r\n            );\r\n    \r\n            // 카메라 각도 설정 (필요시 조정 가능)\r\n            viewer.camera.setView({\r\n                orientation: {\r\n                    heading: Cesium.Math.toRadians(30),   // 헤딩\r\n                    pitch: Cesium.Math.toRadians(-25),    // 피치\r\n                    roll: 0                               // 롤\r\n                }\r\n            });\r\n        }\r\n    });\r\n    \r\n        // 시간 설정\r\n        viewer.clock.startTime = start.clone();\r\n        viewer.clock.stopTime = stop.clone();\r\n        viewer.clock.currentTime = start.clone();\r\n        viewer.clock.clockRange = Cesium.ClockRange.LOOP_STOP; // 루프 종료 시 정지\r\n        viewer.clock.multiplier = 20; // 시간 배속\r\n        viewer.clock.shouldAnimate = true; // 애니메이션 활성화\r\n        viewer.timeline.zoomTo(start, stop); // 타임라인 설정\r\n    }\r\n  \r\n    if (annualAnalysisRef.value) countUpObserver.observe(annualAnalysisRef.value);\r\n    \r\n    \r\n    });\r\n  \r\n    // 마커 추가\r\n    async function loadMarkers(viewer, url, defaultImageSrc) {\r\n    try {\r\n        const response = await fetch(url);\r\n        const markerData = await response.json();\r\n\r\n        // 좌표의 고도를 얻기 위해 Cesium의 샘플 지형 함수를 사용\r\n        const positions = markerData.features.map(spot => {\r\n            const lat = spot.geometry.coordinates[1];\r\n            const lng = spot.geometry.coordinates[0];\r\n            return Cesium.Cartographic.fromDegrees(lng, lat);\r\n        });\r\n\r\n        // 지형을 샘플링하여 정확한 고도 값을 얻음\r\n        const updatedPositions = await Cesium.sampleTerrainMostDetailed(viewer.terrainProvider, positions);\r\n\r\n        updatedPositions.forEach((position, index) => {\r\n            const altitude = position.height + 1.0; // 지형 위로 1m 상승\r\n            const spot = markerData.features[index];\r\n\r\n            // 타입에 따라 이미지 설정\r\n            let imageSrc = defaultImageSrc; // 기본 이미지\r\n            switch (spot.properties.type) {\r\n                case '실족':\r\n                    imageSrc = '/images/strumble.png';\r\n                    break;\r\n                case '조난':\r\n                    imageSrc = '/images/distress.png';\r\n                    break;\r\n                case '질환':\r\n                    imageSrc = '/images/disease.png';\r\n                    break;\r\n                case '밧줄':\r\n                    imageSrc = '/images/rope.png';\r\n                    break;\r\n                default:\r\n                    imageSrc = defaultImageSrc; // 기본 이미지 사용\r\n            }\r\n\r\n            // 마커 생성\r\n            const entity = viewer.entities.add({\r\n                position: Cesium.Cartesian3.fromDegrees(\r\n                    Cesium.Math.toDegrees(position.longitude),\r\n                    Cesium.Math.toDegrees(position.latitude),\r\n                    altitude\r\n                ),\r\n                billboard: {\r\n                    image: imageSrc,\r\n                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n                    width: 40, // 마커의 너비를 픽셀 단위로 설정\r\n                    height: 40, // 마커의 높이를 픽셀 단위로 설정\r\n                },\r\n                label: {\r\n                    text: spot.properties.MNTN_NM || '',\r\n                    font: '14pt sans-serif',\r\n                    outlineColor: Cesium.Color.BLACK,\r\n                    outlineWidth: 2,\r\n                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\r\n                    pixelOffset: new Cesium.Cartesian2(0, -20),\r\n                },\r\n                description: `<img src=\"${imageSrc}\" alt=\"사진\" style=\"width: 150px; height: 100px;\"/><br><div style=\"padding:5px;\">${spot.properties.MNTN_NM || ''}<br>${spot.properties.SAFE_SPOT2 || ''}</div>`,\r\n            });\r\n\r\n            // 클릭 시 인포윈도우 열기\r\n            viewer.selectedEntityChanged.addEventListener((selectedEntity) => {\r\n                if (Cesium.defined(selectedEntity) && selectedEntity === entity) {\r\n                    viewer.infoBox.viewModel.showInfo = true;\r\n                    viewer.infoBox.viewModel.description = entity.description;\r\n                }\r\n            });\r\n        });\r\n    } catch (error) {\r\n        console.error(`${url} 파일 로드 중 에러 발생:`, error);\r\n    }\r\n}\r\n\r\n  \r\n  \r\n  const growthRate = ref(0);\r\n  const countries = ref(0);\r\n  const annualAnalysisRef = ref(null);\r\n  let countStarted = false;\r\n  \r\n  // 연간 분석 섹션이 보일 때 카운트 업 시작\r\n  const countUpObserver = new IntersectionObserver((entries) => {\r\n    if (entries[0].isIntersecting && !countStarted) {\r\n      countStarted = true;\r\n      countUp(5.6, growthRate);\r\n      countUp(655, countries);\r\n    }\r\n  }, { threshold: 0.5 });\r\n  \r\n  function countUp(target, ref) {\r\n    let current = 0;\r\n    const interval = setInterval(() => {\r\n      if (current < target) {\r\n        current += Math.ceil(target / 100);\r\n        ref.value.innerText = current > target ? target : current;\r\n      } else {\r\n        clearInterval(interval);\r\n      }\r\n    }, 20);\r\n  }\r\n  \r\n  \r\n    </script>\r\n  \r\n  <style scoped>\r\n  .course-preview-page {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n  }\r\n  \r\n  .back-button {\r\n    position: absolute;\r\n    top: 20px;\r\n    left: 20px;\r\n    background-color: rgba(255, 255, 255);\r\n    color: rgb(12, 12, 12);\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 50%;\r\n    width: 50px;\r\n    height: 50px;\r\n    z-index: 10;\r\n    cursor: pointer;\r\n    box-shadow: 0 1px 6px rgba(0, 0, 0, 0.9);\r\n  }\r\n  \r\n  .video-container {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  \r\n  .video-player {\r\n    width: 100%;\r\n    height: 100vh;\r\n    object-fit: cover;\r\n  }\r\n  \r\n  /* 연간 분석 섹션 스타일 */\r\n  .annual-analysis-section {\r\n      position: fixed;\r\n      bottom: 0;\r\n      left: 0;\r\n      margin-bottom: 3rem;\r\n      color: #fff;\r\n      z-index: 100;\r\n      margin-left: 0.8rem;\r\n  }\r\n  \r\n  .section-title {\r\n      font-weight: 700;\r\n      font-size: 30px;\r\n    color: #ffffff;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .section-description {\r\n      font-weight: 700;\r\n      font-size: 14px;\r\n    color: #565656;\r\n  }\r\n  \r\n  .stats-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  .stat-item1 {\r\n      width: 150px;\r\n      height: 70px;\r\n      font-weight: 700;\r\n      font-size: 30px;\r\n      margin-top: 0.5rem;\r\n  }\r\n  .stat-item2 {\r\n      width: 170px;\r\n      height: 70px;\r\n      font-weight: 700;\r\n      font-size: 30px;\r\n      margin-top: 0.5rem;\r\n  }\r\n  \r\n  .count-up {\r\n      font-weight: 700;\r\n      font-size: 35px;\r\n    color: #272727;\r\n      margin-top: -2.7rem;\r\n      padding: 0.8rem;\r\n  }\r\n  \r\n  \r\n  .stat-desc {\r\n      font-weight: 700;\r\n      font-size: 14px;\r\n      color: #565656;\r\n      padding: 0.3rem;\r\n      margin-left: 0.6rem;\r\n  }\r\n  \r\n  .card{\r\n      background-color: white;\r\n      border-radius: 10px;\r\n      box-shadow: 0 3px 20px rgba(0, 0, 0, 0.9);\r\n  }\r\n  \r\n  .stat-title1 {\r\n      position: fixed;\r\n      bottom: 0;\r\n      left: 0;\r\n      font-weight: 700;\r\n      font-size: 14px;\r\n      color: #565656;\r\n      margin-bottom: 3.7rem;\r\n      margin-left: 6rem;\r\n  \r\n  }\r\n  \r\n  .stat-title2 {\r\n      position: fixed;\r\n      bottom: 0;\r\n      right: 0;\r\n      font-weight: 700;\r\n      font-size: 14px;\r\n      color: #565656;\r\n      margin-bottom: 3.5rem;\r\n      margin-right: 5rem;\r\n  \r\n  }\r\n  </style>\r\n  ","import script from \"./WebCourse3D.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./WebCourse3D.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./WebCourse3D.vue?vue&type=style&index=0&id=a72274d2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-a72274d2\"]])\n\nexport default __exports__"],"names":["router","useRouter","goBack","back","async","loadMarkers","viewer","url","defaultImageSrc","response","fetch","markerData","json","positions","features","map","spot","lat","geometry","coordinates","lng","Cesium","Cartographic","fromDegrees","updatedPositions","sampleTerrainMostDetailed","terrainProvider","forEach","position","index","altitude","height","imageSrc","properties","type","entity","entities","add","Cartesian3","Math","toDegrees","longitude","latitude","billboard","image","verticalOrigin","VerticalOrigin","BOTTOM","width","label","text","MNTN_NM","font","outlineColor","Color","BLACK","outlineWidth","pixelOffset","Cartesian2","description","SAFE_SPOT2","selectedEntityChanged","addEventListener","selectedEntity","defined","infoBox","viewModel","showInfo","error","console","onMounted","script","document","createElement","src","onload","initCesium","head","appendChild","link","Ion","defaultAccessToken","Viewer","createWorldTerrainAsync","creditContainer","animation","navigationHelpButton","homeButton","sceneModePicker","baseLayerPicker","fullscreenButton","geocoder","geoJsonData","fetchGeoJson","filteredData","filterGeoJsonByPMNTN_NM","displayGeoJson","animateMarker","data","searchKeyword","filter","feature","PMNTN_NM","includes","dataSources","GeoJsonDataSource","load","stroke","fromCssColorString","fill","strokeWidth","clampToGround","then","dataSource","flyTo","line","Array","isArray","length","push","start","JulianDate","now","stop","addSeconds","positionProperty","SampledPositionProperty","i","time","addSample","point","pixelSize","color","WHITE","heightReference","HeightReference","CLAMP_TO_GROUND","clock","onTick","getValue","currentTime","transform","Transforms","eastNorthUpToFixedFrame","camera","lookAtTransform","setView","orientation","heading","toRadians","pitch","roll","startTime","clone","stopTime","clockRange","ClockRange","LOOP_STOP","multiplier","shouldAnimate","timeline","zoomTo","rel","href","annualAnalysisRef","value","countUpObserver","observe","growthRate","ref","countries","countStarted","IntersectionObserver","entries","isIntersecting","countUp","threshold","target","current","interval","setInterval","ceil","innerText","clearInterval","__exports__"],"sourceRoot":""}