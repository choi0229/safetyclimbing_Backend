{"version":3,"file":"js/853.4c40d300.js","mappings":"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","sources":["webpack://frontend/./src/views/HeatmapView.vue","webpack://frontend/./src/views/HeatmapView.vue?ec0b"],"sourcesContent":["<template>\r\n  <HeaderView style=\"z-index: 4;width: 1920px;\"></HeaderView>\r\n\r\n  <div class=\"dashboard\">\r\n    <!-- 사이드바 : 시작 -->\r\n    <aside class=\"sidebar\">\r\n      <section class=\"stat-section\">\r\n        <div class=\"search\">\r\n          <input type=\"text\" v-model=\"searchQuery\" placeholder=\"산 검색\" />\r\n          <img id=\"search-img\" src=\"https://s3.ap-northeast-2.amazonaws.com/cdn.wecode.co.kr/icon/search.png\" @click=\"searchPlaces\">\r\n        </div>\r\n      </section>\r\n\r\n      <div class=\"date-filter\">\r\n  <label for=\"start-date\">시작 날짜:</label>\r\n  <input type=\"date\" id=\"start-date\" v-model=\"startDate\" />\r\n\r\n  <label for=\"end-date\">종료 날짜:</label>\r\n  <input type=\"date\" id=\"end-date\" v-model=\"endDate\" />\r\n\r\n  <button class=\"filter-button\" @click=\"applyDateFilter\">필터 적용</button>\r\n</div>\r\n\r\n      <section class=\"chart-section\">\r\n        <h2>2024 민원 접수 Top3</h2>\r\n        <div v-for=\"complaint, index in complaintRank\" :key=\"complaint.mountainName\">\r\n          <p>{{ index+1 }} : {{ complaint.mountainName }} {{ complaint.countComplaint }}건</p>\r\n        </div>\r\n      </section>\r\n\r\n      <div class=\"chart1-section\">\r\n        <h2>민원 신고 유형</h2>\r\n        <canvas id=\"doughnutChart\"></canvas>\r\n      </div>\r\n    </aside>\r\n    <!-- 사이드바 : 끝 -->\r\n\r\n    <main class=\"main\">\r\n      <div id=\"map\" ref=\"mapContainer\" class=\"map-container\"></div>\r\n\r\n      <div id=\"grapth\">\r\n        <section class=\"bottomchart-section\">\r\n          <h2 id=\"monthly_stat\">월별 민원 통계</h2>\r\n          <canvas id=\"monthlyChart\"></canvas>\r\n        </section>\r\n        <div class=\"bottomchart-section\">\r\n          <h2>계절별 민원</h2>\r\n          <canvas id=\"statsChart\"></canvas>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n/* global kakao */\r\nimport HeaderView from '@/components/HeaderView.vue';\r\nimport { ref, onMounted } from 'vue';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet.heat';\r\nimport axios from 'axios';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\nChart.register(...registerables);\r\n\r\nconst mapContainer = ref(null);\r\nconst complaintData = ref([]);\r\nconst complaintRank = ref([]);\r\nconst searchQuery = ref('');\r\nlet leafletMap = null;\r\nlet kakaoLoaded = ref(false); // Kakao Maps API 로드 여부 확인\r\n\r\nconst startDate = ref('');\r\nconst endDate = ref('');\r\n\r\nonMounted(async () => {\r\n  try {\r\n    await loadKakaoMapsAPI();\r\n    kakaoLoaded.value = true; // Kakao Maps API가 로드되었음을 확인\r\n    initializeLeafletMap();\r\n    loadDataAndCharts();\r\n  } catch (error) {\r\n    console.error(\"Kakao Maps API 로드 중 오류 발생:\", error);\r\n  }\r\n});\r\n\r\nfunction applyDateFilter() {\r\n  if (!startDate.value || !endDate.value) {\r\n    alert(\"날짜를 선택해주세요.\");\r\n    return;\r\n  }\r\n\r\n  const filteredComplaints = complaintData.value.filter(complaint => {\r\n    const complaintDate = new Date(complaint.createdAt);\r\n    return complaintDate >= new Date(startDate.value) && complaintDate <= new Date(endDate.value);\r\n  });\r\n\r\n  // 필터링된 데이터를 차트와 지도에 적용\r\n  updateChartsAndMap(filteredComplaints);\r\n}\r\n\r\nfunction updateChartsAndMap(filteredComplaints) {\r\n  // 1. 지도 업데이트\r\n  updateMap(filteredComplaints);\r\n\r\n  // 2. 도넛 차트 업데이트\r\n  updateDoughnutChart(filteredComplaints);\r\n\r\n  // 3. 월별 차트 업데이트\r\n  updateMonthlyChart(filteredComplaints);\r\n\r\n  // 4. 계절별 차트 업데이트\r\n  updateStatsChart(filteredComplaints);\r\n}\r\n\r\nfunction updateMap(filteredComplaints) {\r\n  // 기존 히트맵 제거\r\n  leafletMap.eachLayer(layer => {\r\n    if (layer instanceof L.HeatLayer) {\r\n      leafletMap.removeLayer(layer);\r\n    }\r\n  });\r\n\r\n  // 새 히트맵 추가\r\n  const heatmapData = filteredComplaints.map(complaint => [\r\n    complaint.latitude,\r\n    complaint.longitude,\r\n    1,\r\n  ]);\r\n  L.heatLayer(heatmapData, { radius: 25, blur: 15, maxZoom: 17, maxOpacity: 0.5 }).addTo(leafletMap);\r\n}\r\n\r\nfunction updateDoughnutChart(filteredComplaints) {\r\n  const complaintTypeCount = { '낙석': 0, '파손': 0, '야생동물': 0 };\r\n  filteredComplaints.forEach(complaint => {\r\n    const type = complaint.complaintType;\r\n    if (complaintTypeCount[type] !== undefined) {\r\n      complaintTypeCount[type]++;\r\n    }\r\n  });\r\n\r\n  // 도넛 차트 업데이트\r\n  const doughnutChart = Chart.getChart('doughnutChart');\r\n  if (doughnutChart) {\r\n    doughnutChart.data.datasets[0].data = [\r\n      complaintTypeCount['낙석'],\r\n      complaintTypeCount['파손'],\r\n      complaintTypeCount['야생동물'],\r\n    ];\r\n    doughnutChart.update();\r\n  }\r\n}\r\n\r\nfunction updateMonthlyChart(filteredComplaints) {\r\n  const monthCount = {\r\n    '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0,\r\n    '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0,\r\n  };\r\n  filteredComplaints.forEach(complaint => {\r\n    const month = new Date(complaint.createdAt).getMonth() + 1;\r\n    if (monthCount[month] !== undefined) {\r\n      monthCount[month]++;\r\n    }\r\n  });\r\n\r\n  // 월별 차트 업데이트\r\n  const monthlyChart = Chart.getChart('monthlyChart');\r\n  if (monthlyChart) {\r\n    monthlyChart.data.datasets[0].data = Object.values(monthCount);\r\n    monthlyChart.update();\r\n  }\r\n}\r\n\r\nfunction updateStatsChart(filteredComplaints) {\r\n  const seasonCounts = { 봄: 0, 여름: 0, 가을: 0, 겨울: 0 };\r\n\r\n  function getSeason(dateString) {\r\n    const month = new Date(dateString).getMonth() + 1;\r\n    if (month >= 3 && month <= 5) return '봄';\r\n    if (month >= 6 && month <= 8) return '여름';\r\n    if (month >= 9 && month <= 11) return '가을';\r\n    return '겨울';\r\n  }\r\n\r\n  filteredComplaints.forEach(complaint => {\r\n    const season = getSeason(complaint.createdAt);\r\n    if (seasonCounts[season] !== undefined) {\r\n      seasonCounts[season]++;\r\n    }\r\n  });\r\n\r\n  // 계절별 차트 업데이트\r\n  const statsChart = Chart.getChart('statsChart');\r\n  if (statsChart) {\r\n    statsChart.data.datasets[0].data = Object.values(seasonCounts);\r\n    statsChart.update();\r\n  }\r\n}\r\n\r\n\r\nfunction initializeLeafletMap() {\r\n  leafletMap = L.map(mapContainer.value).setView([37.580955, 126.957834], 16);\r\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    maxZoom: 19,\r\n  }).addTo(leafletMap);\r\n}\r\n\r\nfunction loadKakaoMapsAPI() {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.kakao && window.kakao.maps && window.kakao.maps.services) {\r\n      resolve(window.kakao);\r\n      return;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=333bda7da18df138fb4d9b3e5cf351c4&autoload=false&libraries=services';\r\n    script.onload = () => {\r\n      kakao.maps.load(() => {\r\n        resolve(window.kakao);\r\n      });\r\n    };\r\n    script.onerror = () => {\r\n      reject(new Error('Kakao Maps API 로드 실패. API 키를 확인하세요.'));\r\n    };\r\n    document.head.appendChild(script);\r\n  });\r\n}\r\n\r\nfunction searchPlaces() {\r\n  if (!kakaoLoaded.value || !window.kakao || !window.kakao.maps || !window.kakao.maps.services) {\r\n    console.error(\"Kakao Maps API가 완전히 로드되지 않았습니다.\");\r\n    return;\r\n  }\r\n\r\n  const places = new kakao.maps.services.Places();\r\n\r\n  places.keywordSearch(searchQuery.value, (data, status) => {\r\n    if (status === kakao.maps.services.Status.OK) {\r\n\r\n      const firstPlace = data[0];\r\n      if (firstPlace) {\r\n        leafletMap.setView([firstPlace.y, firstPlace.x], 19); // Move map view to first place with zoom level 15\r\n      }\r\n\r\n    } else {\r\n      console.error(\"장소 검색에 실패했습니다:\", status);\r\n    }\r\n  });\r\n}\r\n\r\nasync function loadDataAndCharts() {\r\n  await loadComplaintList(leafletMap);\r\n  loadComplaintListRank();\r\n  await loadGeoJSONFromServer('/data/인왕산ele copy.geojson', leafletMap);\r\n  loadMonthlyChart();\r\n  loadDoughnutChart();\r\n  loadStatsChart();\r\n}\r\n\r\nasync function loadComplaintList(map) {\r\n  try {\r\n    const response = await axios.get('/api/complaint/list');\r\n    complaintData.value = response.data;\r\n    const heatmapData = response.data.map(complaint => [complaint.latitude, complaint.longitude, 1]);\r\n    L.heatLayer(heatmapData, { radius: 25, blur: 15, maxZoom: 17, maxOpacity: 0.5 }).addTo(map);\r\n  } catch (error) {\r\n    console.error('Error loading complaint data:', error);\r\n  }\r\n}\r\n\r\nasync function loadComplaintListRank() {\r\n  try {\r\n    const response = await axios.get('/api/complaint/rank');\r\n    complaintRank.value = response.data;\r\n  } catch (error) {\r\n    console.error('Error loading complaint rank:', error);\r\n  }\r\n}\r\n\r\nasync function loadGeoJSONFromServer(url, map) {\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    const geojsonData = await response.json();\r\n    processGeoJSON(geojsonData, map);\r\n  } catch (error) {\r\n    console.error('GeoJSON 파일 로드 중 에러 발생:', error);\r\n  }\r\n}\r\n\r\nfunction processGeoJSON(geojsonData, map) {\r\n  let allCoordinates = [];\r\n\r\n  geojsonData.features.forEach((feature) => {\r\n    if (feature.geometry.type === 'MultiLineString' || feature.geometry.type === 'LineString') {\r\n      feature.geometry.coordinates.forEach(line => {\r\n        const lineCoordinates = line.map((coord) => {\r\n          if (coord && coord.length >= 2) {\r\n            return { lng: coord[0], lat: coord[1], elevation: feature.properties.DN || 0 };\r\n          }\r\n          return null;\r\n        }).filter(Boolean);\r\n        allCoordinates.push(lineCoordinates);\r\n      });\r\n    }\r\n  });\r\n\r\n  addRouteLayer(allCoordinates, map);\r\n}\r\n\r\nfunction addRouteLayer(allCoordinates, map) {\r\n  if (!Array.isArray(allCoordinates)) {\r\n    console.error(\"allCoordinates is not an array of arrays:\", allCoordinates);\r\n    return;\r\n  }\r\n\r\n  allCoordinates.forEach(group => {\r\n    if (Array.isArray(group) && group.length > 0) {\r\n      const linePath = group.map(coord => [coord.lat, coord.lng]);\r\n      L.polyline(linePath, {\r\n        color: 'blue',\r\n        weight: 5,\r\n        opacity: 0.8\r\n      }).addTo(map);\r\n    }\r\n  });\r\n\r\n\r\n}\r\n\r\nfunction loadDoughnutChart() {\r\n  const complaintTypeCount = { '낙석': 0, '파손': 0, '야생동물': 0 };\r\n  complaintData.value.forEach(complaint => {\r\n    const type = complaint.complaintType;\r\n    if (complaintTypeCount[type] !== undefined) {\r\n      complaintTypeCount[type]++;\r\n    }\r\n  });\r\n\r\n  const ctx = document.getElementById('doughnutChart').getContext('2d');\r\n  new Chart(ctx, {\r\n    type: 'doughnut',\r\n    data: {\r\n      labels: ['낙석', '파손', '야생동물'],\r\n      datasets: [{\r\n        data: [complaintTypeCount['낙석'], complaintTypeCount['파손'], complaintTypeCount['야생동물']],\r\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\r\n        hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: 'top',\r\n        },\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nasync function loadMonthlyChart() {\r\n  try {\r\n    const monthCount = {'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0};\r\n    complaintData.value.forEach(complaint => {\r\n      const month = new Date(complaint.createdAt).getMonth() + 1;\r\n      if (monthCount[month] !== undefined) {\r\n        monthCount[month]++;\r\n      }\r\n    });\r\n\r\n    const ctx = document.getElementById('monthlyChart').getContext('2d');\r\n    new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: ['1', '2', '3', '4', '5', '6', '7', '8','9','10','11','12'],\r\n        datasets: [{\r\n          label: '월별 사고',\r\n          data: Object.values(monthCount),\r\n          backgroundColor: 'rgba(255, 99, 132, 1)',\r\n          borderColor: 'rgba(255, 99, 132, 1)',\r\n          borderWidth: 1,\r\n          borderRadius: 10,\r\n        }]\r\n      },\r\n      options: {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error loading monthly chart:', error);\r\n  }\r\n}\r\n\r\nfunction loadStatsChart() {\r\n  const seasonCounts = { 봄: 0, 여름: 0, 가을: 0, 겨울: 0 };\r\n\r\n  function getSeason(dateString) {\r\n    const month = new Date(dateString).getMonth() + 1;\r\n    if (month >= 3 && month <= 5) return '봄';\r\n    if (month >= 6 && month <= 8) return '여름';\r\n    if (month >= 9 && month <= 11) return '가을';\r\n    return '겨울';\r\n  }\r\n\r\n  complaintData.value.forEach(complaint => {\r\n    const season = getSeason(complaint.createdAt);\r\n    if (seasonCounts[season] !== undefined) {\r\n      seasonCounts[season]++;\r\n    }\r\n  });\r\n\r\n  const ctx = document.getElementById('statsChart').getContext('2d');\r\n  new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels: ['봄', '여름', '가을', '겨울'],\r\n      datasets: [{\r\n        label: '계절별 사고',\r\n        data: Object.values(seasonCounts),\r\n        backgroundColor: 'rgba(75, 192, 192, 1)',\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 2,\r\n        borderRadius: 10,\r\n      }]\r\n    },\r\n    options: {\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody, html {\r\n  overflow: hidden;\r\n  font-family: 'Roboto', sans-serif;\r\n  background-color: #f7f8fa;\r\n  color: #2c3e50;\r\n}\r\n\r\n.dashboard {\r\n  display: grid;\r\n  grid-template-columns: 280px 1fr;\r\n  height: 100%;\r\n}\r\n\r\n.sidebar {\r\n  background-color: #ffffff;\r\n  padding: 20px;\r\n  box-shadow: 2px 0px 12px rgba(0, 0, 0, 0.05);\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n}\r\n\r\n.date-filter input[type=\"date\"] {\r\n  appearance: none; /* 브라우저 기본 스타일 제거 */\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  padding: 5px 10px;\r\n  font-size: 14px;\r\n  background-color: #f7f8fa;\r\n  color: #333;\r\n  width: 100%;\r\n}\r\n\r\n.date-filter input[type=\"date\"]:focus {\r\n  outline: none;\r\n  border-color: #3498db;\r\n}\r\n\r\n.date-filter label {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #555;\r\n}\r\n\r\n\r\n.date-filter input[type=\"date\"]:focus {\r\n  outline: none;\r\n  border-color: #3498db;\r\n}\r\n\r\n.filter-button {\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 8px 12px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  margin-top: 5px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.filter-button:hover {\r\n  background-color: #2c81ba;\r\n}\r\n\r\n.filter-button:active {\r\n  background-color: #1d5c8a;\r\n}\r\n\r\n.stat-section h3,\r\n.chart-section h2,\r\n.chart1-section h2 {\r\n  font-size: 1.4em;\r\n  color: #34495e;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  padding-left: 5px;\r\n  border-left: 4px solid #3498db;\r\n}\r\n\r\n.chart-section p {\r\n  font-size: 1em;\r\n  font-weight: 600;\r\n  margin: 10px 0;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  color: #fff;\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.chart-section p:nth-child(1) {\r\n  background-color: #ff6b6b;\r\n}\r\n\r\n.chart-section p:nth-child(2) {\r\n  background-color: #ffa94d;\r\n}\r\n\r\n.chart-section p:nth-child(3) {\r\n  background-color: #4dabf7;\r\n}\r\n\r\n.chart-section p:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.bottomchart-section {\r\n  width: 100%;\r\n}\r\n\r\n.overview-charts {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 15px;\r\n  margin-top: 15px;\r\n}\r\n\r\n.chart2-section h2 {\r\n  font-size: 0.9em;\r\n  color: #7f8c8d;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n#highRiskChart,\r\n#mediumRiskChart,\r\n#lowRiskChart {\r\n  width: 70px;\r\n  height: 70px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.main {\r\n  padding: 20px;\r\n  background-color: #fafbfc;\r\n  overflow-y: auto;\r\n}\r\n\r\n#map {\r\n  height: 55vh;\r\n  border-radius: 12px;\r\n  box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 15px;\r\n}\r\n\r\n#grapth {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 15px;\r\n  background-color: #ffffff;\r\n  padding: 15px;\r\n  border-radius: 12px;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.08);\r\n  height: 280px;\r\n}\r\n\r\n.chart-section,\r\n.chart1-section {\r\n  width: 100%;\r\n  margin-top: 30px;\r\n}\r\n\r\n.chart1-section h2,\r\n.chart-section h2 {\r\n  color: #555;\r\n  font-weight: 600;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.chart1-section canvas,\r\n.chart-section canvas {\r\n  width: 100%;\r\n  height: 180px;\r\n  border-radius: 12px;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.05);\r\n  background-color: #f5f8fa;\r\n}\r\n\r\n.search {\r\n  position: relative;\r\n  width: 250px;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  border: 1px solid #bbb;\r\n  border-radius: 8px;\r\n  padding: 10px 12px;\r\n  font-size: 14px;\r\n}\r\n\r\n#search-img {\r\n  position : absolute;\r\n  width: 17px;\r\n  top: 10px;\r\n  right: 12px;\r\n  margin: 0;\r\n  cursor: pointer;\r\n}\r\n\r\n</style>\r\n","import script from \"./HeatmapView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./HeatmapView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./HeatmapView.vue?vue&type=style&index=0&id=4fe5c2f8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4fe5c2f8\"]])\n\nexport default __exports__"],"names":["L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Chart","register","registerables","mapContainer","ref","complaintData","complaintRank","searchQuery","leafletMap","kakaoLoaded","startDate","endDate","applyDateFilter","value","alert","filteredComplaints","filter","complaint","complaintDate","Date","createdAt","updateChartsAndMap","updateMap","updateDoughnutChart","updateMonthlyChart","updateStatsChart","eachLayer","layer","removeLayer","heatmapData","map","latitude","longitude","radius","blur","maxZoom","maxOpacity","addTo","complaintTypeCount","forEach","type","complaintType","undefined","doughnutChart","getChart","data","datasets","update","monthCount","month","getMonth","monthlyChart","Object","values","seasonCounts","봄","여름","가을","겨울","getSeason","dateString","season","statsChart","initializeLeafletMap","setView","loadKakaoMapsAPI","Promise","resolve","reject","window","kakao","maps","services","script","document","createElement","src","onload","load","onerror","Error","head","appendChild","searchPlaces","console","error","places","Places","keywordSearch","status","Status","OK","firstPlace","y","x","async","loadDataAndCharts","loadComplaintList","loadComplaintListRank","loadGeoJSONFromServer","loadMonthlyChart","loadDoughnutChart","loadStatsChart","response","axios","get","url","fetch","ok","geojsonData","json","processGeoJSON","allCoordinates","features","feature","geometry","coordinates","line","lineCoordinates","coord","length","lng","lat","elevation","properties","DN","Boolean","push","addRouteLayer","Array","isArray","group","linePath","color","weight","opacity","ctx","getElementById","getContext","labels","backgroundColor","hoverBackgroundColor","options","responsive","plugins","legend","position","label","borderColor","borderWidth","borderRadius","scales","beginAtZero","onMounted","__exports__"],"sourceRoot":""}