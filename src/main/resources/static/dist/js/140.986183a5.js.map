{"version":3,"file":"js/140.986183a5.js","mappings":"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","sources":["webpack://frontend/./src/api/index.js","webpack://frontend/./src/api/complaint.js","webpack://frontend/./src/stores/complaint.js","webpack://frontend/./src/components/MobileFooterView3.vue","webpack://frontend/./src/components/MobileFooterView3.vue?a8a5","webpack://frontend/./src/views/RecordImgView.vue","webpack://frontend/./src/views/RecordImgView.vue?d77e"],"sourcesContent":["import axios from 'axios';\r\n\r\nfunction apiInstance() {\r\n  const instance = axios.create({\r\n    baseURL: 'http://localhost:9000/api',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n  });\r\n  return instance;\r\n}\r\n\r\nexport { apiInstance };","import { apiInstance } from \"./index.js\";\r\nconst api = apiInstance();\r\nimport router from \"@/router/index.js\";\r\nimport axios from 'axios';\r\n\r\n//complaintList 가져오기 요청\r\nexport async function getComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/list');\r\n    console.log(\"you can use getComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 날짜 최신순으로 가져오기 요청\r\nexport async function getRecentComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/listRecent');\r\n    console.log(\"you can use getRecentComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintByUserId(userId) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/mine/${userId}`);\r\n    //console.log(\"getComplaintByUserId\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintListByInst(institution) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/myList/${institution}`);\r\n    //console.log(\"getComplaintListByInst\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//pathList 날짜 최신순으로 가져오기 요청\r\nexport async function getPathList() {\r\n  try { \r\n    const response = await axios.get('/api/pathList');\r\n    console.log(\"you can use getPathList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 작성 요청\r\nexport async function insertComplaint(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insert', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원글 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오기 요청\r\nexport async function getComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/one/${complaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 유저 아이디에 따른 유저정보 한개 가져오기 요청\r\nexport async function getUserById(userId) {\r\n  try {\r\n    const response = await axios.get(`/api/userInfo/${userId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n  \r\n}\r\n\r\n// 코스 한개씩 가져오기 요청\r\nexport async function getCourseById(courseId) {\r\n  try {\r\n    const response = await axios.get(`/api/course/${courseId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n\r\n// 민원글 번호에 따른 글 삭제 요청\r\nexport async function deleteComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.delete(`/api/complaint/delete/${complaintNo}`);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n// 글 업데이트\r\nexport async function updateComplaintByNo(complaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/update/${complaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n//특정 유저의 complaintList를 가져오기 요청\r\nexport async function getUserPostList(userNo) {\r\n  try { \r\n    const response = await api.get(`/auth/userpostlist/${userNo}`);\r\n    console.log(userNo);\r\n    console.log(\"you can use getUserPostList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//게시글 추가 및 \r\nexport async function insertPostAndKeyword(postData, keywordData) {\r\n  const formData = new FormData();\r\n  formData.append('post', new Blob([JSON.stringify(postData)], { type: 'application/json' }));\r\n  formData.append('postkeyword', new Blob([JSON.stringify(keywordData)], { type: 'application/json' }));\r\n\r\n  try {\r\n    const response = await api.post('/auth/insert', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n    if (err.response && err.response.status === 401) {\r\n      // 로그인 페이지로 이동\r\n      alert(\"로그인 후 이용하실 수 있습니다.\")\r\n      router.push({ path: '/login' });\r\n    }\r\n    throw err;\r\n  }\r\n} \r\n\r\n// 이미지 저장요청\r\nexport async function saveImage(formData) {\r\n  try {\r\n    const response = await api.post('/auth/upload-image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    console.log('서버 응답:', response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('이미지 업로드 중 오류 발생:', err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원처리정보 한개 가져오기 요청\r\nexport async function getProcessingByNo(processingComplaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/processing/${processingComplaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원처리정보 작성 요청\r\nexport async function insertProcessing(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insertProcessing', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원처리정보 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원처리정보 업데이트\r\nexport async function updateProcessingByNo(processingComplaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/updateProcessing/${processingComplaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}","import { ref } from \"vue\";\r\nimport { defineStore } from \"pinia\";\r\nimport { getComplaintList, getUserPostList, getComplaintListByInst, getComplaintByNo, getRecentComplaintList, getPathList, getComplaintByUserId } from '@/api/complaint';\r\n\r\n// 민원글 리스트 가져오는 상태\r\nexport const useComplaintListStore = defineStore('complaintlist', () => {\r\n  const complaintlist = ref([]);\r\n  async function fetchComplaintList() {\r\n    console.log(\"Fetching complaintlist ===\");\r\n    complaintlist.value = await getComplaintList();\r\n    console.log(\"postlist--\",complaintlist.value);\r\n  }\r\n\r\n  return { complaintlist, fetchComplaintList }\r\n})\r\n\r\n// 민원글 리스트 날짜 최신순으로 가져오는 상태\r\nexport const useRecentComplaintListStore = defineStore('recentcomplaintlist', () => {\r\n  const recentcomplaintlist = ref([]);\r\n  async function fetchRecentComplaintList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    recentcomplaintlist.value = await getRecentComplaintList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { recentcomplaintlist, fetchRecentComplaintList }\r\n})\r\n\r\nexport const useMyComplaintListStore = defineStore('mycomplaintlist', () => {\r\n  const mycomplaintlist = ref([]);\r\n  async function fetchMyComplaintList(userId) {\r\n    //console.log(\"Fetching mycomplaintlist ===\");\r\n    mycomplaintlist.value = await getComplaintByUserId(userId);\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { mycomplaintlist, fetchMyComplaintList }\r\n})\r\n\r\nexport const useManagingComplaintListStore = defineStore('managingcomplaintlist', () => {\r\n  const managingcomplaintlist = ref([]);\r\n  async function fetchManagingComplaintList(institution) {\r\n    managingcomplaintlist.value = await getComplaintListByInst(institution);\r\n    console.log(\"담당업무--\",managingcomplaintlist.value);\r\n  }\r\n\r\n  return { managingcomplaintlist, fetchManagingComplaintList }\r\n})\r\n\r\n// 운동 기록 리스트 날짜 최신순으로 가져오는 상태\r\nexport const usePathList = defineStore('pathList', () => {\r\n  const pathList = ref([]);\r\n  async function fetchPathList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    pathList.value = await getPathList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { pathList, fetchPathList }\r\n})\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오는 상태\r\nexport const useComplaintStore = defineStore('complaintByNo', () => {\r\n  const complaintone = ref({});\r\n  async function fetchComplaintone(postNo) {\r\n    try {\r\n      complaintone.value = await getComplaintByNo(postNo);\r\n    } catch (err) {\r\n      console.error('Error fetching post:', err);\r\n    }\r\n  }\r\n  return { complaintone, fetchComplaintone };\r\n});\r\n\r\n// 특정 유저의 게시글 목록 가져오는 상태\r\nexport const useUserPostListStore = defineStore('userpostlist', () => {\r\n  const userpostlist = ref([]);\r\n  async function fetchUserPost() {\r\n    const userNo = sessionStorage.getItem('userNo');\r\n    console.log(userNo);\r\n    if (!userNo) {\r\n      console.error('userNo is undefined or null');\r\n      return;\r\n    }\r\n    try {\r\n      console.log(\"userpostlist -- 유저 포스트 리스트\");\r\n      userpostlist.value = await getUserPostList(userNo);\r\n      console.log(\"userpostlist--\", userpostlist.value);\r\n    } catch (err) {\r\n      console.error('Error fetching userpostlist:', err);\r\n    }\r\n  }\r\n\r\n  return { userpostlist, fetchUserPost }\r\n})\r\n","<template>\r\n  <div id=\"mobileFooter\">\r\n    <!-- 코스 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileCourse()\" style=\"margin-right: 10px;\">\r\n      <img src=\"/images/코스2.png\" alt=\"코스 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <p style=\"\">코스</p>\r\n    </div>\r\n\r\n    <!-- 등산 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileRecoding()\" style=\"margin-right: 10px;\">\r\n      <img src=\"/images/HikingIcon.gif\" alt=\"등산 아이콘\" style=\"filter: hue-rotate(280deg); width: 45px; height: 45px;\">\r\n      <p style=\"\">등산</p>\r\n    </div>\r\n\r\n    <!-- 홈 아이콘 -->\r\n    <div class=\"footer-category home\" @click=\"gotoHome()\">\r\n      <img src=\"/images/홈.png\" alt=\"홈 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <p style=\"\">홈</p>\r\n    </div>\r\n\r\n    <!-- 민원 신고 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileComplaint()\" style=\"margin-left: 10px;\">\r\n      <img src=\"/images/위험신고.png\" alt=\"민원 신고 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <p style=\"\">민원신고</p>\r\n    </div>\r\n\r\n    <!-- 커뮤니티 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileCommunity()\" style=\"margin-left: 10px;\">\r\n      <img src=\"/images/커뮤니티.png\" alt=\"커뮤니티 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <div style=\"margin: 0;  font-size: 13px; line-height: 1.2; text-align: center;\">커뮤니티</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n\r\nfunction gotoHome() {\r\n  window.location.href = '/mobilemainview';\r\n}\r\n\r\nfunction gotoMobileCourse() {\r\n  window.location.href = '/mobilecourseview';\r\n}\r\n\r\nfunction gotoMobileCommunity() {\r\n  window.location.href = '/mobilecommunity';\r\n}\r\n\r\nfunction gotoMobileComplaint() {\r\n  window.location.href = '/complaintListMobile';\r\n}\r\n\r\nfunction gotoMobileRecoding() {\r\n  window.location.href = '/record';\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n@font-face {\r\n  font-family: 'TheJamsil5Bold';\r\n  src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2302_01@1.0/TheJamsil5Bold.woff2') format('woff2');\r\n  font-weight: 700;\r\n  font-style: normal;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\ndiv,\r\n.btn-group .btn,\r\np {\r\n  /* 특정 요소에 폰트 적용 */\r\n  font-family: \"TheJamsil5Bold\", sans-serif !important;\r\n}\r\n\r\n#mobileFooter {\r\n  position: fixed;\r\n  height: 70px; /* 푸터 높이 */\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  justify-content: space-between; /* 간격 균등 배치 */\r\n  align-items: center;\r\n  padding: 0 5px; /* 좌우 여백 */\r\n  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.footer-category {\r\n  display: flex;\r\n  flex-direction: column; /* 아이콘과 텍스트 세로 배치 */\r\n  align-items: center; /* 수평 중앙 정렬 */\r\n  text-align: center;\r\n  font-family: 'TheJamsil4Bold';\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  flex: 1; /* 각 버튼의 동일한 크기 */\r\n}\r\n\r\n.footer-category img {\r\n  width: 30px; /* 아이콘 크기 증가 */\r\n  height: 30px;\r\n  margin-bottom: 5px; /* 아이콘과 텍스트 간 간격 */\r\n}\r\n\r\n.footer-category p {\r\n  margin: 0; /* 텍스트 간 여백 제거 */\r\n  font-size: 13px;\r\n  line-height: 1.2;\r\n  text-align: center;\r\n}\r\n\r\n</style>\r\n","import script from \"./MobileFooterView3.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MobileFooterView3.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./MobileFooterView3.vue?vue&type=style&index=0&id=43785973&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-43785973\"]])\n\nexport default __exports__","<template>\r\n    <div id=\"app\">\r\n      <MobileHeaderView class=\"header\" />\r\n      <div class=\"btn-group-container\">\r\n        <div class=\"btn-group\" role=\"group\" aria-label=\"Basic radio toggle button group\">\r\n          <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio1\" autocomplete=\"off\" @click=\"goToRecord()\" />\r\n          <label class=\"btn btn-outline-success\" for=\"btnradio1\">운동</label>\r\n  \r\n          <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio2\" autocomplete=\"off\" checked />\r\n          <label class=\"btn btn-outline-success\" for=\"btnradio2\">기록</label>\r\n  \r\n          <input type=\"radio\" class=\"btn-check\" name=\"btnradio\" id=\"btnradio3\" autocomplete=\"off\" @click=\"goToMyCom()\" />\r\n          <label class=\"btn btn-outline-success\" for=\"btnradio3\">나의 커뮤니티</label>\r\n        </div>\r\n      </div>\r\n      <div class=\"app-main\">\r\n        <div class=\"container\">\r\n          <!-- 기록 요약 -->\r\n          <div class=\"record-summary mt-5\">\r\n            <div class=\"image-container-wrapper mb-5\">\r\n              <div v-for=\"(item, index) in pathList\" :key=\"item.pathId\" class=\"image-container2\">\r\n                <img :src=\"item.pathImg\" alt=\"Saved Run Image\" />\r\n                <i class=\"bi bi-cloud-upload icon-top-right\" @click=\"showUploadMessage(index)\"></i>\r\n                <div class=\"overlay\">\r\n                  <div class=\"row stats\">\r\n                    <div class=\"col-4 stat-item justify-content-start\">\r\n                      <i class=\"bi bi-stopwatch\"></i> {{ item.totalTime }}\r\n                    </div>\r\n                    <div class=\"col-4 stat-item justify-content-center\">\r\n                      <i class=\"icon-distance\"></i> {{ item.totalDistance }} KM\r\n                    </div>\r\n                    <div class=\"col-4 stat-item justify-content-end\">\r\n                      <i class=\"bi bi-speedometer\"></i> {{ item.avgSpeed }}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <!-- 업로드 확인 메시지 -->\r\n          <div v-if=\"showMessage\" class=\"upload-message\">\r\n            <p>등산 기록이 업로드되었습니다!</p>\r\n            <button class=\"btn btn-primary\" @click=\"confirmUpload\">확인</button>\r\n          </div>\r\n          <MobileFooterView3 />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n\r\n<script setup>\r\nimport MobileFooterView3 from \"@/components/MobileFooterView3.vue\";\r\nimport MobileHeaderView from \"@/components/MobileHeaderView.vue\";\r\nimport router from '@/router';\r\nimport { onMounted } from 'vue';\r\nimport { usePathList } from '../stores/complaint';\r\nimport { storeToRefs } from 'pinia';\r\n\r\n// 등산 기록 리스트 가져오기\r\nconst pathListStore = usePathList();\r\n// onMounted로 컴포넌트가 마운트된 후에 실행되도록 설정\r\nonMounted(async () => {\r\n    await pathListStore.fetchPathList();\r\n});\r\n \r\nconst { pathList } = storeToRefs(pathListStore);\r\n\r\n\r\n\r\nfunction goToRecord(){\r\n    router.push({path:'/record'});\r\n}\r\n\r\nfunction goToMyCom(){\r\n    router.push({path:'/myCommunity'});\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\nh1,\r\nh2,\r\nh3,\r\n.btn-group .btn,\r\np {\r\n  /* 특정 요소에 폰트 적용 */\r\n  font-family: \"TheJamsil5Bold\", sans-serif !important;\r\n}\r\n\r\n#app {\r\n    height: 100vh;\r\n    width: 100vw;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.app-main {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    position: relative;\r\n}\r\n\r\n\r\n.record-summary {\r\n    flex: 1;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n    scrollbar-width: thin;\r\n    scrollbar-color: transparent transparent;\r\n}\r\n\r\n.image-container-wrapper {\r\n    display: flex;\r\n    justify-content: center; /* 가운데 정렬 */\r\n    flex-wrap: wrap;\r\n    gap: 20px; /* 이미지 간 간격 */\r\n}\r\n\r\n.image-container2 {\r\n  position: relative;\r\n  width: 320px;\r\n  height: 320px;\r\n  border-radius: 30px;\r\n  overflow: hidden;\r\n}\r\n\r\n.image-container2 img {\r\n  width: 320px;\r\n  height: 320px;\r\n  object-fit: cover;\r\n  filter: brightness(0.93);\r\n}\r\n\r\n.icon-top-right {\r\n    position: absolute;\r\n    top: 10px !important;\r\n    right: 20px;\r\n    font-size: 24px;\r\n    color: white;\r\n    cursor: pointer;\r\n}\r\n\r\n.overlay {\r\n  position: absolute;\r\n  top: 90%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  color: white;\r\n  font-size: 19px;\r\n  font-weight: 600;\r\n  pointer-events: none;\r\n}\r\n\r\n.stats {\r\n    display: flex;\r\n    width: 310px;\r\n}\r\n\r\n.stat-item {\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 18px;\r\n}\r\n\r\n.stat-item i {\r\n  font-size: 18px;\r\n  margin-right: 4px;\r\n}\r\n\r\n.record-summary::-webkit-scrollbar {\r\n    width: 8px;\r\n    background-color: transparent;\r\n}\r\n\r\n.record-summary::-webkit-scrollbar-thumb {\r\n    background-color: transparent;\r\n}\r\n\r\n.img {\r\n    max-width: 100%;\r\n    margin-bottom: 20px;\r\n    border-radius: 10%;\r\n    object-fit: contain;\r\n}\r\n\r\n@media (max-width: 360px) {\r\n    .btn-group .btn {\r\n        font-size: 12px;\r\n        padding: 2px 4px;\r\n    }\r\n}\r\n\r\n.btn-group-container {\r\n  position: fixed;\r\n  top: 13px; /* 헤더 위에 나타나도록 조정 */\r\n  right: 10px; /* 오른쪽 끝에 배치 */\r\n  z-index: 1100; /* 헤더 위에 나타나도록 설정 */\r\n  background-color: white;\r\n  border-radius: 8px; /* 둥근 모서리 */\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px; /* 버튼 간 간격 */\r\n  padding: 5px;\r\n}\r\n\r\n/* 버튼 스타일 */\r\n.btn-group .btn {\r\n  font-size: 12px; /* 버튼 글씨 크기 축소 */\r\n  padding: 4px 8px; /* 버튼 패딩 축소 */\r\n  color: black;\r\n  border: 1px solid #4caf50;\r\n  border-radius: 4px; /* 약간 둥글게 */\r\n  margin: 0;\r\n  white-space: nowrap; /* 텍스트 줄바꿈 방지 */\r\n}\r\n\r\n.btn-group .btn:hover {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n.btn-group .btn-check:checked + .btn {\r\n  background-color: #4caf50;\r\n  color: white;\r\n}\r\n\r\n/* 헤더 수정 */\r\n.header {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  background-color: white; /* 헤더 배경색 */\r\n  border-bottom: 1px solid #ddd; /* 헤더 아래 구분선 */\r\n  height: 60px; /* 헤더 높이 설정 */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 15px;\r\n}\r\n</style>","import script from \"./RecordImgView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RecordImgView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./RecordImgView.vue?vue&type=style&index=0&id=d9c8059e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-d9c8059e\"]])\n\nexport default __exports__"],"names":["apiInstance","instance","axios","create","baseURL","headers","api","async","getComplaintList","response","get","console","log","data","err","error","getRecentComplaintList","getComplaintByUserId","userId","getComplaintListByInst","institution","getPathList","insertComplaint","post","status","getComplaintByNo","complaintNo","getUserById","getCourseById","courseId","deleteComplaintByNo","delete","updateComplaintByNo","patch","getUserPostList","userNo","getProcessingByNo","processingComplaintNo","insertProcessing","updateProcessingByNo","useComplaintListStore","defineStore","complaintlist","ref","fetchComplaintList","value","useRecentComplaintListStore","recentcomplaintlist","fetchRecentComplaintList","useMyComplaintListStore","mycomplaintlist","fetchMyComplaintList","useManagingComplaintListStore","managingcomplaintlist","fetchManagingComplaintList","usePathList","pathList","fetchPathList","useComplaintStore","complaintone","fetchComplaintone","postNo","userpostlist","fetchUserPost","sessionStorage","getItem","gotoHome","window","location","href","gotoMobileCourse","gotoMobileCommunity","gotoMobileComplaint","gotoMobileRecoding","__exports__","pathListStore","onMounted","storeToRefs","goToRecord","router","push","path","goToMyCom"],"sourceRoot":""}