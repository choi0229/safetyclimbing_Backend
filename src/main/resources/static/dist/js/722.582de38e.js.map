{"version":3,"file":"js/722.582de38e.js","mappings":"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","sources":["webpack://frontend/./src/api/index.js","webpack://frontend/./src/api/complaint.js","webpack://frontend/./src/components/MobileFooterView2.vue","webpack://frontend/./src/components/MobileFooterView2.vue?2c88","webpack://frontend/./src/views/CompareCourseView.vue","webpack://frontend/./src/views/CompareCourseView.vue?3c8a"],"sourcesContent":["import axios from 'axios';\r\n\r\nfunction apiInstance() {\r\n  const instance = axios.create({\r\n    baseURL: 'http://localhost:9000/api',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n  });\r\n  return instance;\r\n}\r\n\r\nexport { apiInstance };","import { apiInstance } from \"./index.js\";\r\nconst api = apiInstance();\r\nimport router from \"@/router/index.js\";\r\nimport axios from 'axios';\r\n\r\n//complaintList 가져오기 요청\r\nexport async function getComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/list');\r\n    console.log(\"you can use getComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 날짜 최신순으로 가져오기 요청\r\nexport async function getRecentComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/listRecent');\r\n    console.log(\"you can use getRecentComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintByUserId(userId) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/mine/${userId}`);\r\n    //console.log(\"getComplaintByUserId\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintListByInst(institution) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/myList/${institution}`);\r\n    //console.log(\"getComplaintListByInst\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//pathList 날짜 최신순으로 가져오기 요청\r\nexport async function getPathList() {\r\n  try { \r\n    const response = await axios.get('/api/pathList');\r\n    console.log(\"you can use getPathList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 작성 요청\r\nexport async function insertComplaint(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insert', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원글 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오기 요청\r\nexport async function getComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/one/${complaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 유저 아이디에 따른 유저정보 한개 가져오기 요청\r\nexport async function getUserById(userId) {\r\n  try {\r\n    const response = await axios.get(`/api/userInfo/${userId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n  \r\n}\r\n\r\n// 코스 한개씩 가져오기 요청\r\nexport async function getCourseById(courseId) {\r\n  try {\r\n    const response = await axios.get(`/api/course/${courseId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n\r\n// 민원글 번호에 따른 글 삭제 요청\r\nexport async function deleteComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.delete(`/api/complaint/delete/${complaintNo}`);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n// 글 업데이트\r\nexport async function updateComplaintByNo(complaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/update/${complaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n//특정 유저의 complaintList를 가져오기 요청\r\nexport async function getUserPostList(userNo) {\r\n  try { \r\n    const response = await api.get(`/auth/userpostlist/${userNo}`);\r\n    console.log(userNo);\r\n    console.log(\"you can use getUserPostList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//게시글 추가 및 \r\nexport async function insertPostAndKeyword(postData, keywordData) {\r\n  const formData = new FormData();\r\n  formData.append('post', new Blob([JSON.stringify(postData)], { type: 'application/json' }));\r\n  formData.append('postkeyword', new Blob([JSON.stringify(keywordData)], { type: 'application/json' }));\r\n\r\n  try {\r\n    const response = await api.post('/auth/insert', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n    if (err.response && err.response.status === 401) {\r\n      // 로그인 페이지로 이동\r\n      alert(\"로그인 후 이용하실 수 있습니다.\")\r\n      router.push({ path: '/login' });\r\n    }\r\n    throw err;\r\n  }\r\n} \r\n\r\n// 이미지 저장요청\r\nexport async function saveImage(formData) {\r\n  try {\r\n    const response = await api.post('/auth/upload-image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    console.log('서버 응답:', response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('이미지 업로드 중 오류 발생:', err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원처리정보 한개 가져오기 요청\r\nexport async function getProcessingByNo(processingComplaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/processing/${processingComplaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원처리정보 작성 요청\r\nexport async function insertProcessing(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insertProcessing', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원처리정보 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원처리정보 업데이트\r\nexport async function updateProcessingByNo(processingComplaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/updateProcessing/${processingComplaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}","<template>\r\n  <div id=\"mobileFooter\">\r\n    <!-- 코스 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileCourse()\" style=\"margin-right: 10px;\">\r\n      <img src=\"/images/코스2.gif\" alt=\"코스 아이콘\" style=\"filter: hue-rotate(280deg); width: 45px; height: 45px;\">\r\n      <p style=\"\">코스</p>\r\n    </div>\r\n\r\n    <!-- 등산 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileRecoding()\" style=\"margin-right: 10px;\">\r\n      <img src=\"/images/HikingIcon.png\" alt=\"등산 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <p style=\"\">등산</p>\r\n    </div>\r\n\r\n    <!-- 홈 아이콘 -->\r\n    <div class=\"footer-category home\" @click=\"gotoHome()\">\r\n      <img src=\"/images/홈.png\" alt=\"홈 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <p style=\"\">홈</p>\r\n    </div>\r\n\r\n    <!-- 민원 신고 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileComplaint()\" style=\"margin-left: 10px;\">\r\n      <img src=\"/images/위험신고.png\" alt=\"민원 신고 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <p style=\"\">민원신고</p>\r\n    </div>\r\n\r\n    <!-- 커뮤니티 아이콘 -->\r\n    <div class=\"footer-category\" @click=\"gotoMobileCommunity()\" style=\"margin-left: 10px;\">\r\n      <img src=\"/images/커뮤니티.png\" alt=\"커뮤니티 아이콘\" style=\"filter: grayscale(100%) brightness(0%);\">\r\n      <div style=\"margin: 0;  font-size: 13px; line-height: 1.2; text-align: center;\">커뮤니티</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n\r\nfunction gotoHome() {\r\n  window.location.href = '/mobilemainview';\r\n}\r\n\r\nfunction gotoMobileCourse() {\r\n  window.location.href = '/mobilecourseview';\r\n}\r\n\r\nfunction gotoMobileCommunity() {\r\n  window.location.href = '/mobilecommunity';\r\n}\r\n\r\nfunction gotoMobileComplaint() {\r\n  window.location.href = '/complaintListMobile';\r\n}\r\n\r\nfunction gotoMobileRecoding() {\r\n  window.location.href = '/record';\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n@font-face {\r\n  font-family: 'TheJamsil5Bold';\r\n  src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2302_01@1.0/TheJamsil5Bold.woff2') format('woff2');\r\n  font-weight: 700;\r\n  font-style: normal;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\ndiv,\r\n.btn-group .btn,\r\np {\r\n  /* 특정 요소에 폰트 적용 */\r\n  font-family: \"TheJamsil5Bold\", sans-serif !important;\r\n}\r\n\r\n#mobileFooter {\r\n  position: fixed;\r\n  height: 70px; /* 푸터 높이 */\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  justify-content: space-between; /* 간격 균등 배치 */\r\n  align-items: center;\r\n  padding: 0 5px; /* 좌우 여백 */\r\n  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n}\r\n\r\n.footer-category {\r\n  display: flex;\r\n  flex-direction: column; /* 아이콘과 텍스트 세로 배치 */\r\n  align-items: center; /* 수평 중앙 정렬 */\r\n  text-align: center;\r\n  font-family: 'TheJamsil4Bold';\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  flex: 1; /* 각 버튼의 동일한 크기 */\r\n}\r\n\r\n.footer-category img {\r\n  width: 30px; /* 아이콘 크기 증가 */\r\n  height: 30px;\r\n  margin-bottom: 5px; /* 아이콘과 텍스트 간 간격 */\r\n}\r\n\r\n.footer-category p {\r\n  margin: 0; /* 텍스트 간 여백 제거 */\r\n  font-size: 13px;\r\n  line-height: 1.2;\r\n  text-align: center;\r\n}\r\n\r\n</style>\r\n","import script from \"./MobileFooterView2.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MobileFooterView2.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./MobileFooterView2.vue?vue&type=style&index=0&id=87fc62c8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-87fc62c8\"]])\n\nexport default __exports__","<template>\r\n  <div id=\"app\">\r\n      <MobileHeaderView></MobileHeaderView>\r\n      <div class=\"app-main\">\r\n          <div class=\"map-container\">\r\n          <div class=\"button-group\">\r\n              <button class=\"button-item\" @click=\"goBack\" style=\"border-radius: 50%; height: 40px; width: 40px;\"><img src=\"/images/뒤로가기.png\"  alt=\"뒤로가기 아이콘\" width=\"24\" height=\"24\"></button>\r\n          </div>\r\n          <div class=\"button-group2\">\r\n              <button class=\"button-item\" @click=\"handleClick()\" style=\"border-radius: 50%; height: 40px; width: 40px;\">\r\n                  <i class=\"bi bi-eye-fill\"></i>\r\n              </button>\r\n          </div>\r\n          <div class=\"button-group3\">\r\n              <button class=\"button-item\" style=\"border-radius: 50%; height: 40px; width: 40px;\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n                <i class=\"bi bi-question-lg\"></i>\r\n              </button>\r\n          </div>\r\n          <div class=\"map-legend ms-4\">\r\n            <div class=\"legend-item\">\r\n              <div class=\"legend-icon\" style=\"background-color:#FF4500;\"></div>\r\n              <span>오르막</span>\r\n            </div>\r\n            \r\n            <div class=\"legend-item\">\r\n              <div class=\"legend-icon\" style=\"background-color:#32CD32;\"></div>\r\n              <span>평지</span>\r\n            </div>\r\n            \r\n            <div class=\"legend-item\">\r\n              <div class=\"legend-icon\" style=\"background-color:#1E90FF;\"></div>\r\n              <span>내리막</span>\r\n            </div>\r\n          </div>\r\n          \r\n              <div id=\"map\">\r\n                  <!-- 오버레이 카드 2개-->\r\n                  <div class=\"card-container\">\r\n                    <div \r\n                      v-for=\"(course, index) in courseData\" \r\n                      :key=\"index\" \r\n                      class=\"card\" \r\n                      :class=\"{ clicked: isClicked[index] }\" \r\n                      @click=\"handleClickCard(index)\"\r\n                    >\r\n                      <span>{{ course.mountainName }}</span>\r\n                      <h4 style=\"font-weight: 700;\" class=\"m-0\">{{ course.courseName }}코스</h4>\r\n                      <span style=\"font-size: small;\">{{ course.distance }} | {{ course.duration }}</span>\r\n                      \r\n                      <!-- 사고 유형과 발생 건수를 표시 -->\r\n                      <span class=\"mt-1\" v-if=\"incidentInfo[index]?.typeCounts\" style=\"font-size: small;\">\r\n                        <span class=\"m-0\" v-for=\"(count, type) in incidentInfo[index].typeCounts\" :key=\"type\" style=\"display: block;  margin-bottom: 5px;\">\r\n                          <span style=\"display: inline-flex; align-items: center;\">\r\n                            {{ type }} : {{ count }} \r\n                            <!-- 가로 막대기 차트 -->\r\n                            <div\r\n                              class=\"bar\"\r\n                              :style=\"{ width: (count * 20) + 'px', \r\n                              backgroundColor: getBarColor(count, type) }\">\r\n                            </div>\r\n                          </span>\r\n                        </span>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n      <MobileFooterView></MobileFooterView>\r\n  </div>\r\n\r\n<!-- START::상세 비교 표 보기 모달 -->\r\n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n<div class=\"modal-dialog modal-dialog-centered\">\r\n  <div class=\"modal-content p-0\">\r\n    <div class=\"modal-body pt-3 pb-3 ps-2 pe-2\">\r\n      <table class=\"comparison-table\">\r\n          <thead>\r\n              <tr>\r\n                  <th>코스</th>\r\n                  <th>{{ courseData[0]?.courseName }}코스</th>\r\n                  <th>{{ courseData[1]?.courseName }}코스</th>\r\n              </tr>\r\n          </thead>\r\n          <tbody>\r\n              <tr>\r\n                <th>산 이름</th>\r\n                <td v-for=\"(course, index) in courseData\" :key=\"'mountainName-' + index\">\r\n                    {{ course.mountainName }}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>총 거리</th>\r\n                <td v-for=\"(course, index) in courseData\" :key=\"'distance-' + index\">\r\n                    {{ course.distance }}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>난이도</th>\r\n                <td v-for=\"(course, index) in courseData\" :key=\"'distance-' + index\"  :style=\"{color: getLevel(course.courseLevel)}\">\r\n                    {{ course.courseLevel }}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>후기</th>\r\n                  <td v-for=\"(course,index) in courseStars\" :key=\"index\">\r\n                    <div class=\"stars\">\r\n                      <i v-for=\"n in course.fullStars\" :class=\"'bi bi-star-fill'\" :key=\"'full-' + n + '-' + index\"></i>\r\n                      <i v-if=\"course.halfStar\" class=\"bi bi-star-half\"></i>\r\n                      <i v-for=\"n in course.emptyStars\" class=\"bi bi-star\" :key=\"'empty-' + n + '-' + index\"></i>\r\n                    </div>\r\n                  </td>\r\n              </tr>\r\n              <tr>\r\n                <th>최고 고도</th>\r\n                  <td v-for=\"(elev, index) in maxElev\" :key=\"'elevation-' + index\">\r\n                    {{ elev }}m\r\n                  </td>\r\n              </tr>\r\n              <tr>\r\n                <th>예상 소요 시간</th>\r\n                <td v-for=\"(course, index) in courseData\" :key=\"'estimatedTime-' + index\">\r\n                    {{ course.duration }}\r\n                </td>\r\n              </tr>\r\n              <tr v-for=\"(type) in typeList\" :key=\"type\">\r\n                <th>{{ type }}</th>\r\n                  <td v-for=\"(course, index) in incidentInfo\" :key=\"index\" :style=\"{\r\n                    color: (course.typeCounts[type] === undefined ? 0 : course.typeCounts[type]) === getMinCount(type) ? 'black' : 'red'\r\n                  }\">\r\n                  {{ course.typeCounts[type] || 0 }}건\r\n                  </td>\r\n              </tr>\r\n          </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>\r\n<!-- END::상세 비교 표 보기 모달 -->\r\n\r\n</template>\r\n\r\n<script setup>\r\nimport MobileFooterView from \"@/components/MobileFooterView2.vue\";\r\nimport MobileHeaderView from \"@/components/MobileHeaderView.vue\";\r\n/* global kakao */\r\nimport { ref, onMounted} from \"vue\";\r\nimport { useRouter } from 'vue-router';\r\nimport { getCourseById } from \"@/api/complaint\";\r\n//import { set } from \"core-js/core/dict\";\r\n\r\nconst router = useRouter();\r\n\r\nconst goBack = () => router.back();\r\n\r\nconst addCustomOverlay = () => {\r\n// routeCoordinates.value 배열에서 각 코스에 대해 반복\r\nrouteCoordinates.value.forEach(courseData => {\r\n  if (map.value) {\r\n    // 해당 코스의 좌표들에서 최소 위도(minLat)와 최소 경도(minLon) 구하기\r\n    const minLat = Math.min(...courseData.coordinates.map(coord => coord.lat));\r\n    const minLon = Math.min(...courseData.coordinates.map(coord => coord.lng));\r\n\r\n    // 해당 코스의 최고 고도 구하기\r\n    maxElev.value.push(Math.max(...courseData.coordinates.map(coord => coord.elevation)));\r\n\r\n    // 커스텀 오버레이 HTML 내용 설정\r\n    const content = `\r\n      <div class=\"overlay-container\" style=\"display: inline-block;\">\r\n        <div class=\"label\" style=\"background-color: white; padding: 4px 8px; border-radius: 8px; box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15); color: black; font-size: 14px; text-align: center;\">\r\n          <span class=\"center\">${courseData.courseName}</span>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    // 경계 좌측 상단을 기준으로 오버레이 위치 지정\r\n    const position = new kakao.maps.LatLng(minLat + 0.0015, minLon);\r\n\r\n    // 커스텀 오버레이 생성\r\n    const customOverlay = new kakao.maps.CustomOverlay({\r\n      position: position,\r\n      content: content,\r\n      zIndex: 9999 // 마커들보다 위에 오버레이 표시\r\n    });\r\n\r\n    // 커스텀 오버레이를 지도에 표시\r\n    customOverlay.setMap(map.value);\r\n    console.log(\"오버레이 성공함\");\r\n  } else {\r\n    console.log(\"오버레이 실패함\");\r\n  }\r\n});\r\n\r\n}\r\n\r\n// 버튼 클릭 시 호출되는 함수\r\nfunction handleClick() {\r\nif (map.value) {  // map이 정의되었을 때만 호출\r\n  setMapBoundsToAllCourse(map.value);\r\n} else {\r\n  console.log(\"Map is not ready yet.\");\r\n}\r\n}\r\n\r\nconst isClicked = ref([true, true]); // 각 카드의 클릭 여부 상태를 추적\r\n\r\n// 클릭 시 실행되는 함수\r\nconst handleClickCard = (index) => {\r\n// 해당 인덱스 카드 클릭 시 상태를 반전\r\nisClicked.value[index] = !isClicked.value[index];\r\n\r\n// 상태에 따라 setMapBoundsToCourse 호출\r\nif (isClicked.value[index]) {\r\n    handleClick();\r\n    console.log(\"클릭 해제\");\r\n  } else {\r\n    setMapBoundsToCourse(routeCoordinates.value[index]);\r\n}\r\n};\r\n\r\nconst map = ref(null);\r\nconst routeCoordinates = ref([]);\r\nlet courseData = ref([]);\r\nlet incidentInfo = ref([]);\r\nlet typeList = ref([]);\r\n\r\nlet maxElev = ref([]);\r\n\r\nfunction setMapBoundsToCourse(courseRoute) {\r\n  const bounds = new kakao.maps.LatLngBounds();\r\n\r\n  // 경로의 모든 좌표를 경계에 추가\r\n  courseRoute.coordinates.forEach(coord => {\r\n  bounds.extend(new kakao.maps.LatLng(coord.lat, coord.lng));\r\n  });\r\n\r\n  // 지도의 경계를 설정하여 해당 코스가 화면에 맞게 조정\r\n  map.value.setBounds(bounds);\r\n}\r\n\r\n// onMounted로 컴포넌트가 마운트된 후에 실행되도록 설정\r\nonMounted(async () => {\r\n  initializeMap(); // Vue가 마운트될 때 지도를 초기화\r\n  await init();\r\n});\r\n\r\nasync function init(){\r\n  const selectedId = JSON.parse(sessionStorage.getItem(\"selectedCourseIds\"));\r\n\r\n  // 코스 ID 배열을 순회하며 데이터를 가져오기\r\nconst courses = await Promise.all(\r\n  selectedId.map(async (id) => {\r\n    return await getCourseById(id);\r\n  })\r\n);\r\n\r\n// 가져온 코스 데이터를 courseData 배열에 할당\r\ncourseData.value = courses;\r\nconsole.log(\"코스데이터:\", JSON.stringify(courseData.value[0], null, 2));\r\ncourseStars.value = courseData.value.map((course) => {\r\n  return {\r\n    fullStars: Math.floor(course.courseRate),\r\n    halfStar: course.courseRate % 1 >= 0.5,\r\n    emptyStars: 5 - Math.floor(course.courseRate) - (course.courseRate % 1 >= 0.5 ? 1 : 0)\r\n  };\r\n});\r\n\r\n}\r\n\r\nlet courseStars = ref([]);\r\n\r\nfunction initializeMap() {\r\n  // Kakao 지도 API 스크립트를 동적으로 로드\r\n  const script = document.createElement('script');\r\n  script.onload = () => {\r\n      kakao.maps.load(() => {\r\n          createMap();\r\n      });\r\n  };\r\n  script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=333bda7da18df138fb4d9b3e5cf351c4&autoload=false&libraries=clusterer,services'; // autoload=false로 설정\r\n  document.head.appendChild(script);\r\n}\r\n\r\nasync function createMap() {\r\n  map.value = new kakao.maps.Map(document.getElementById('map'), {\r\n    center: new kakao.maps.LatLng(37.66433293993584, 127.01160029114365),\r\n    level: 5,\r\n  });\r\n  await loadGeoJSONFromServer('/data/인왕산ele copy.geojson');\r\n  await loadMarkers(\"/data/헬기장spot.geojson\", '/images/helipad.png');\r\n  await loadMarkers(\"/data/화장실.geojson\", '/images/toilets.png');\r\n  await loadMarkers(\"/data/2023산악사고_인왕산2.geojson\", '/images/danger.png');\r\n  incidentInfo.value = await countIncidentTypes(\"/data/2023산악사고_인왕산2.geojson\",courseData);\r\n  \r\n}\r\n\r\n// GeoJSON 데이터 로드 함수\r\nasync function loadGeoJSONFromServer(url, targetMap = map.value) {\r\ntry {\r\n  const response = await fetch(url);\r\n  if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n  \r\n  const geojsonData = await response.json();\r\n  console.log('GeoJSON data loaded:', geojsonData);  // GeoJSON 데이터를 콘솔에 출력해 확인\r\n  processGeoJSON(geojsonData, targetMap);  // GeoJSON 데이터를 처리하여 경로를 그리는 함수 호출\r\n  addCustomOverlay();\r\n} catch (error) {\r\n  console.error('GeoJSON 파일 로드 중 에러 발생:', error);\r\n}\r\n}\r\n\r\nasync function countIncidentTypes(url, courseData) {\r\ntry {\r\n  const response = await fetch(url);\r\n  if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n  \r\n  const geojsonData = await response.json();\r\n  if (!geojsonData || !geojsonData.features) {\r\n    console.error(\"Invalid GeoJSON data:\", geojsonData);\r\n    return {}; // 유효하지 않은 데이터일 경우 빈 객체 반환\r\n  }\r\n\r\n  // 각 course에 대한 incident type 빈도 객체 초기화\r\n  const courseTypeCounts = courseData.value.map(course => ({\r\n    courseName: course.courseName,\r\n    mountainName: course.mountainName,\r\n    typeCounts: {}\r\n  }));\r\n\r\n  geojsonData.features.forEach(feature => {\r\n    const { MNTN_NM, MNTN_NM2, type } = feature.properties;\r\n\r\n    // 각 course와 MNTN_NM, MNTN_NM2가 일치하는지 확인\r\n    courseData.value.forEach((course, index) => {\r\n      if (course.mountainName === MNTN_NM && course.courseName === MNTN_NM2 && type) {\r\n        // type 카운트 증가\r\n        courseTypeCounts[index].typeCounts[type] = \r\n          (courseTypeCounts[index].typeCounts[type] || 0) + 1;\r\n      }\r\n    });\r\n  });\r\n\r\n  // 사고 유형을 알파벳 순으로 정렬\r\n  courseTypeCounts.forEach(course => {\r\n    const sortedTypeCounts = {};\r\n    const sortedKeys = Object.keys(course.typeCounts).sort(); // 사고 유형 키를 알파벳 순으로 정렬\r\n    typeList.value = [...new Set([...typeList.value, ...sortedKeys])].sort();\r\n    sortedKeys.forEach(key => {\r\n      sortedTypeCounts[key] = course.typeCounts[key];\r\n    });\r\n    course.typeCounts = sortedTypeCounts;\r\n  });\r\n\r\n  console.log(\"Incident Type Counts by Course:\", courseTypeCounts);\r\n  console.log(\"typeList;\", typeList.value);\r\n  return courseTypeCounts;\r\n  \r\n\r\n} catch (error) {\r\n  console.error('Error loading GeoJSON file:', error);\r\n  return []; // 오류 발생 시 빈 배열 반환\r\n}\r\n}\r\n\r\nfunction getLevel(level) {\r\nif(level == '쉬움') {\r\n  return 'green'\r\n} else if(level == '보통') {\r\n  return 'orange'\r\n} else {\r\n  return 'red'\r\n}\r\n}\r\n\r\nfunction getMinCount(type) {\r\nlet minCount = Infinity;\r\n\r\nif (incidentInfo.value && Array.isArray(incidentInfo.value)) {\r\n  incidentInfo.value.forEach(incident => {\r\n    const count = incident.typeCounts && incident.typeCounts[type] !== undefined \r\n                  ? incident.typeCounts[type] \r\n                  : 0;  // undefined일 경우 0으로 처리\r\n    minCount = Math.min(minCount, count);\r\n  });\r\n}\r\nreturn minCount;\r\n}\r\n\r\nfunction getBarColor(count, type) {\r\nlet color = 'orange';\r\nlet maxCount = 0;\r\n\r\n// incidentInfo가 존재하는지 체크\r\nif (incidentInfo.value && Array.isArray(incidentInfo.value)) {\r\n  // 각 course를 순회하여 해당 typeCounts[type]의 최대값을 찾음\r\n  incidentInfo.value.forEach(incident => {\r\n    if (incident.typeCounts && incident.typeCounts[type]) {\r\n      maxCount = Math.max(maxCount, incident.typeCounts[type]);\r\n    }\r\n  });\r\n}\r\n\r\n// maxCount와 count 값에 따라 색상 결정\r\nif(incidentInfo.value[0].typeCounts[type]!=incidentInfo.value[1].typeCounts[type]){\r\n    if (maxCount === count) {\r\n    color = 'red'; // 최대값인 경우 빨간색\r\n  }\r\n}\r\n\r\n\r\nreturn color;\r\n}\r\n\r\n\r\nfunction processGeoJSON(geojsonData, targetMap) {\r\n  // courseData에 있는 각 courseName에 해당하는 좌표들을 구분하여 저장\r\n  routeCoordinates.value = courseData.value.map(course => ({\r\n      courseName: course.courseName,\r\n      coordinates: []\r\n  }));\r\n\r\n  geojsonData.features.forEach((feature) => {\r\n      // GeoJSON feature의 PMNTN_NM이 courseData의 courseName 중 하나와 일치하는지 확인\r\n      courseData.value.forEach((course, index) => {\r\n          if (feature.properties.PMNTN_NM && feature.properties.PMNTN_NM.includes(course.courseName)) {\r\n              let coordinates = [];\r\n\r\n              // MultiLineString을 처리하기 위해 중첩 배열을 펼침\r\n              if (feature.geometry.type === 'MultiLineString') {\r\n                  feature.geometry.coordinates.forEach(line => {\r\n                      coordinates = coordinates.concat(line.map((coord) => ({\r\n                          lng: coord[0],\r\n                          lat: coord[1],\r\n                          elevation: feature.properties.DN || 0\r\n                      })));\r\n                  });\r\n              } else if (feature.geometry.type === 'LineString') {\r\n                  coordinates = feature.geometry.coordinates.map((coord) => ({\r\n                      lng: coord[0],\r\n                      lat: coord[1],\r\n                      elevation: feature.properties.DN || 0\r\n                  }));\r\n              }\r\n\r\n              // courseName별로 좌표를 저장\r\n              routeCoordinates.value[index].coordinates.push(...coordinates);\r\n          }\r\n      });\r\n  });\r\n\r\n  // 좌표 그룹화 및 지도에 경로 추가\r\n  routeCoordinates.value.forEach((courseRoute) => {\r\n      if (courseRoute.coordinates.length > 0) {\r\n          const groupedCoordinates = groupCoordinates(courseRoute.coordinates, 5); // 5개씩 그룹화\r\n          addRouteLayer(groupedCoordinates, targetMap, courseRoute.courseName);\r\n      }\r\n  });\r\n\r\n  if (routeCoordinates.value.every(courseRoute => courseRoute.coordinates.length === 0)) {\r\n      console.log('유효한 구간 데이터가 없습니다.');\r\n  }\r\n  console.log(\"좌표나눈거\"+JSON.stringify(routeCoordinates));\r\n}\r\n\r\n// 좌표 그룹화 함수\r\nfunction groupCoordinates(coordinates, groupSize) {\r\nconst groups = [];\r\nfor (let i = 0; i < coordinates.length; i += groupSize) {\r\n  groups.push(coordinates.slice(i, i + groupSize));\r\n}\r\nreturn groups;\r\n}\r\n\r\nlet allCoordinates = [];\r\n\r\n// 경로 레이어 추가 함수\r\nfunction addRouteLayer(groupedCoordinates, targetMap) {\r\n  // 중첩 배열을 평평하게 만든 flatCoordinates 생성\r\n  const flatCoordinates = groupedCoordinates.flat();\r\n\r\n  allCoordinates.push(...flatCoordinates);\r\n\r\n  drawBaseRoute(flatCoordinates); // 기본 경로 그리기\r\n\r\n  groupedCoordinates.forEach((group) => {\r\n    if (group.length > 1) {\r\n      const startPoint = group[0];\r\n      const endPoint = group[group.length - 1];\r\n      const slope = calculateSlope(startPoint, endPoint);\r\n\r\n      // 경사도에 따라 색상을 설정하되, 코스별로 다른 색상 스타일을 적용\r\n      const color = getColorBySlope(slope);  // 경사도와 코스 이름에 따른 색상 설정\r\n\r\n      // 각 그룹에 대한 경로 생성\r\n      const groupLinePath = group.map(coord => new kakao.maps.LatLng(coord.lat, coord.lng));\r\n\r\n      const polyline = new kakao.maps.Polyline({\r\n        path: groupLinePath,\r\n        strokeWeight: 5,\r\n        strokeColor: color,\r\n        strokeOpacity: 0.8,\r\n        strokeStyle: 'solid'\r\n      });\r\n\r\n      polyline.setMap(map.value); // 경로를 map에 그리기\r\n    }\r\n  });\r\n\r\n  setMapBoundsToAllCourse(targetMap);\r\n}\r\n\r\nfunction setMapBoundsToAllCourse(targetMap) {\r\n  // 지도 경계를 모든 경로 좌표에 맞게 설정\r\n  const bounds = new kakao.maps.LatLngBounds();\r\n  allCoordinates.forEach(coord => bounds.extend(new kakao.maps.LatLng(coord.lat, coord.lng)));\r\n  targetMap.setBounds(bounds);\r\n  // 지도 경계 설정 후에 위쪽으로 약간 이동\r\n  setTimeout(() => {\r\n  targetMap.panBy(0, 80); // 화면 위쪽으로 100px 이동 (필요에 따라 조정 가능)\r\n  }, 200);\r\n}\r\n\r\n// 새로운 함수: 기본 녹색 경로를 그리는 함수\r\nfunction drawBaseRoute(coordinates) {\r\nconst linePath = coordinates.map(coord => new kakao.maps.LatLng(coord.lat, coord.lng));\r\n\r\nconst basePolyline = new kakao.maps.Polyline({\r\n  path: linePath,\r\n  strokeWeight: 5,\r\n  strokeColor: '#32CD32', // 기본 경로 색상 (녹색)\r\n  strokeOpacity: 1, // 기본 경로는 약간 투명하게 설정\r\n  strokeStyle: 'solid'\r\n});\r\n\r\nbasePolyline.setMap(map.value);\r\n}\r\n\r\nfunction calculateHaversineDistance(coord1, coord2) {\r\nconst R = 6371e3; // 지구 반지름 (미터 단위)\r\nconst lat1 = deg2rad(coord1.lat);\r\nconst lat2 = deg2rad(coord2.lat);\r\nconst deltaLat = deg2rad(coord2.lat - coord1.lat);\r\nconst deltaLon = deg2rad(coord2.lng - coord1.lng);\r\n\r\nconst a =\r\n  Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n  Math.cos(lat1) * Math.cos(lat2) *\r\n  Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n\r\nconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n// 두 지점 간의 거리 반환 (미터 단위)\r\nreturn R * c;\r\n}\r\n\r\nfunction calculateSlope(start, end) {\r\n// 하버사인 공식을 사용하여 두 지점 간의 수평 거리 (지구 곡률 반영)\r\nconst horizontalDistance = calculateHaversineDistance(\r\n  { lat: start.lat, lng: start.lng },\r\n  { lat: end.lat, lng: end.lng }\r\n);\r\n\r\n// 고도 차이 계산\r\nconst elevationChange = end.elevation - start.elevation;\r\n\r\n// 피타고라스 정리를 사용해 두 지점 간의 대각선 거리 계산\r\nconst diagonalDistance = Math.sqrt(\r\n  Math.pow(horizontalDistance, 2) + Math.pow(elevationChange, 2)\r\n);\r\n\r\n// 수평 거리가 너무 짧으면 경사도 계산을 무시하고 기본 경사도 0으로 설정\r\nif (horizontalDistance < 1) { // 예시: 수평 거리가 10m 미만일 경우\r\n  return 0; // 경사도 0으로 간주\r\n}\r\n\r\n// 경사도 = 고도 차이 / 대각선 거리 * 100\r\nreturn (elevationChange / diagonalDistance) * 100;\r\n}\r\n\r\nfunction deg2rad(deg) {\r\nreturn deg * (Math.PI / 180);\r\n}\r\n\r\n// 경사도에 따른 색상 결정 함수\r\nfunction getColorBySlope(slope) {\r\nif (slope > 30) return '#FF4500'; // 급경사 (빨강)\r\nif (slope < -15) return '#1E90FF'; // 급한 내리막 (파랑)\r\nreturn '#32CD32'; // 평지에 가까움 (초록)\r\n}\r\n\r\n// 마커 추가\r\nasync function loadMarkers(url, imageSrc) {\r\n  try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      const markerData = await response.json();\r\n\r\n      if (markerData && markerData.features) {\r\n          const imageSize = new kakao.maps.Size(35, 45);\r\n          const imageOpation = { offset: new kakao.maps.Point(12, 35) };\r\n          const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOpation);\r\n\r\n          markerData.features.forEach((spot) => {\r\n              // MNTN_NM2 속성값이 courseData 내의 courseName과 일치하는 경우에만 마커 추가\r\n              const isSelectedCourse = courseData.value.some(course => course.courseName === spot.properties.MNTN_NM2);\r\n              \r\n              if (isSelectedCourse) {\r\n                  const lat = spot.geometry.coordinates[1];\r\n                  const lng = spot.geometry.coordinates[0];\r\n                  const markerPosition = new kakao.maps.LatLng(lat, lng);\r\n\r\n                  const marker = new kakao.maps.Marker({\r\n                      position: markerPosition,\r\n                      map: map.value,\r\n                      title: spot.properties.MNTN_NM2,\r\n                      image: markerImage,\r\n                  });\r\n\r\n                  const infowindow = new kakao.maps.InfoWindow({\r\n                      content: `<img src=\"/images/${spot.properties.image}\" alt=\"사진\" style=\"width: 150px; height: 100px;\"/><br><div style=\"padding:5px;\">${spot.properties.MNTN_NM2}<br>${spot.properties.SAFE_SPOT2}</div>`,\r\n                  });\r\n\r\n                  kakao.maps.event.addListener(marker, 'click', () => {\r\n                      if (infowindow.getMap()) {\r\n                          infowindow.close();\r\n                      } else {\r\n                          infowindow.open(map.value, marker);\r\n                      }\r\n                  });\r\n              }\r\n          });\r\n      } else {\r\n          throw new Error(\"Invalid GeoJSON structure.\");\r\n      }\r\n  } catch (error) {\r\n      console.error(`${url} 파일 로드 중 에러 발생:`, error);\r\n  }\r\n}\r\n\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n#app {\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.app-main {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.map-container {\r\n  position: relative;\r\n  flex: 1;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#map {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n}\r\n\r\n.overlay-container {\r\ndisplay: inline-block;\r\n}\r\n\r\n.label {\r\nbackground-color: white;\r\npadding: 8px 16px;\r\nborder-radius: 8px;\r\nbox-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);\r\ncolor: black;\r\nfont-size: 14px;\r\ntext-align: center;\r\n}\r\n\r\n.button-group {\r\nposition: absolute;\r\ntop: 10px;\r\nleft: 10px;\r\nz-index: 2;\r\n}\r\n\r\n.button-group2 {\r\nposition: absolute;\r\ntop: 10px;\r\nright: 10px;\r\nz-index: 2;\r\n}\r\n\r\n.button-group3{\r\nposition: absolute;\r\nbottom: 245px;\r\nright: 10px;\r\nz-index: 2;\r\n}\r\n\r\n.map-legend {\r\nposition: absolute;\r\ntop: 10px;\r\nright: 50px;\r\nmargin-right: 1.25em;\r\nbackground-color: rgba(255, 255, 255, 0.8); \r\nborder-radius: 10px;\r\nfont-size: 12px;\r\nz-index: 10; /* 지도 위에 표시되도록 설정 */\r\nfont-family: 'TheJamsil4Bold';\r\nfont-weight: 400;\r\nfont-size: 16px;\r\nbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\r\ndisplay: flex; \r\nflex-direction: row; \r\nalign-items: center; \r\n}\r\n\r\n.legend-item {\r\ndisplay: flex;\r\nalign-items: center;\r\nmargin-bottom: 3px;\r\nmargin-top: 2px;\r\nmargin-right: 0.5rem;\r\nfont-family: 'TheJamsil4Bold';\r\nfont-weight: 400;\r\nfont-size: 14px;\r\n}\r\n\r\n.legend-icon {\r\nwidth: 10px;\r\nheight: 10px;\r\nmargin-right: 5px;\r\nmargin-left: 5px;\r\nborder-radius: 10px;\r\n}\r\n\r\n.button-item {\r\n  background-color: #ffffff;\r\n  color: #000000;\r\n  border: none;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.button-item i {\r\nfont-size: 18px;  /* 예시로 크기를 24px로 설정 */\r\ncolor: gray;     /* 아이콘 색상 설정 */\r\n}\r\n\r\n.card-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  position: absolute;\r\n  bottom: 80px; \r\n  width: 100%;\r\n  padding: 0 20px;\r\n  z-index: 10;\r\n}\r\n\r\n.card {\r\n  width: 155px; /* 카드의 너비 설정 */\r\n  height: 150px;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: start;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease, color 0.3s ease; /* 각각의 속성에 대한 애니메이션 */\r\n  cursor: pointer; /* 커서가 포인터 모양으로 변하게 설정 */\r\n}\r\n\r\n.card:hover:not(.clicked) {\r\ntransform: translateY(-10px);\r\nbox-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);\r\nbackground-color: #04663f;\r\ncolor: white;\r\n}\r\n\r\n\r\n/* 스크롤바 및 스크롤 트랙을 투명하게 설정 */\r\n.comparison-container::-webkit-scrollbar,\r\n.comparison-container::-webkit-scrollbar-thumb,\r\n.comparison-container::-webkit-scrollbar-track {\r\n  background-color: transparent;\r\n  width: 8px; /* 스크롤바 너비 */\r\n}\r\n\r\n.bar {\r\nheight: 10px; /* 막대기 차트의 높이 */\r\nbackground-color: #04663f; /* 막대기 색상 */\r\nborder-radius: 5px; /* 모서리 둥글게 */\r\ntransition: width 0.3s ease-in-out; /* 길이 변화에 애니메이션 추가 */\r\nmargin-left: 10px;\r\n}\r\n\r\n/* 모달 배경의 불투명도를 조정 */\r\ndiv.modal-backdrop {\r\nbackground-color: rgba(0, 0, 0, 0.041); /* 불투명도를 0.2로 조정하여 덜 어둡게 설정 */\r\n}\r\n\r\n/* 테이블 CSS */\r\n.comparison-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.comparison-table th,\r\n.comparison-table td {\r\n  border: 1px solid #ddd;\r\n  padding: 0.5rem;\r\n  text-align: center;\r\n}\r\n\r\n.comparison-table th {\r\n  background-color: #f5f5f5;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-table td:first-child {\r\n  font-weight: bold;\r\n  background-color: #fafafa;\r\n} \r\n\r\n.stars {\r\ndisplay: flex;\r\ngap: 5px;\r\ncolor: #28a745;\r\n}\r\n\r\n</style>\r\n","import script from \"./CompareCourseView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CompareCourseView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CompareCourseView.vue?vue&type=style&index=0&id=8baea560&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-8baea560\"]])\n\nexport default __exports__"],"names":["apiInstance","instance","axios","create","baseURL","headers","api","async","getComplaintList","response","get","console","log","data","err","error","getRecentComplaintList","getComplaintByUserId","userId","getComplaintListByInst","institution","getPathList","insertComplaint","post","status","getComplaintByNo","complaintNo","getUserById","getCourseById","courseId","deleteComplaintByNo","delete","updateComplaintByNo","patch","getUserPostList","userNo","getProcessingByNo","processingComplaintNo","insertProcessing","updateProcessingByNo","gotoHome","window","location","href","gotoMobileCourse","gotoMobileCommunity","gotoMobileComplaint","gotoMobileRecoding","__exports__","router","useRouter","goBack","back","addCustomOverlay","routeCoordinates","value","forEach","courseData","map","minLat","Math","min","coordinates","coord","lat","minLon","lng","maxElev","push","max","elevation","content","courseName","position","kakao","maps","LatLng","customOverlay","CustomOverlay","zIndex","setMap","handleClick","setMapBoundsToAllCourse","isClicked","ref","handleClickCard","index","setMapBoundsToCourse","incidentInfo","typeList","courseRoute","bounds","LatLngBounds","extend","setBounds","init","selectedId","JSON","parse","sessionStorage","getItem","courses","Promise","all","id","stringify","courseStars","course","fullStars","floor","courseRate","halfStar","emptyStars","onMounted","initializeMap","script","document","createElement","onload","load","createMap","src","head","appendChild","Map","getElementById","center","level","loadGeoJSONFromServer","loadMarkers","countIncidentTypes","url","targetMap","fetch","ok","Error","geojsonData","json","processGeoJSON","features","courseTypeCounts","mountainName","typeCounts","feature","MNTN_NM","MNTN_NM2","type","properties","sortedTypeCounts","sortedKeys","Object","keys","sort","Set","key","getLevel","getMinCount","minCount","Infinity","Array","isArray","incident","count","undefined","getBarColor","color","maxCount","PMNTN_NM","includes","geometry","line","concat","DN","length","groupedCoordinates","groupCoordinates","addRouteLayer","every","groupSize","groups","i","slice","allCoordinates","flatCoordinates","flat","drawBaseRoute","group","startPoint","endPoint","slope","calculateSlope","getColorBySlope","groupLinePath","polyline","Polyline","path","strokeWeight","strokeColor","strokeOpacity","strokeStyle","setTimeout","panBy","linePath","basePolyline","calculateHaversineDistance","coord1","coord2","R","lat1","deg2rad","lat2","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","start","end","horizontalDistance","elevationChange","diagonalDistance","pow","deg","PI","imageSrc","markerData","imageSize","Size","imageOpation","offset","Point","markerImage","MarkerImage","spot","isSelectedCourse","some","markerPosition","marker","Marker","title","image","infowindow","InfoWindow","SAFE_SPOT2","event","addListener","getMap","close","open"],"sourceRoot":""}