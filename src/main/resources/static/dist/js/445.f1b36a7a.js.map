{"version":3,"file":"js/445.f1b36a7a.js","mappings":"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","sources":["webpack://frontend/./src/api/index.js","webpack://frontend/./src/api/complaint.js","webpack://frontend/./src/stores/complaint.js","webpack://frontend/./src/views/ComplaintListMapViewMobile.vue","webpack://frontend/./src/views/ComplaintListMapViewMobile.vue?873e"],"sourcesContent":["import axios from 'axios';\r\n\r\nfunction apiInstance() {\r\n  const instance = axios.create({\r\n    baseURL: 'http://localhost:9000/api',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n  });\r\n  return instance;\r\n}\r\n\r\nexport { apiInstance };","import { apiInstance } from \"./index.js\";\r\nconst api = apiInstance();\r\nimport router from \"@/router/index.js\";\r\nimport axios from 'axios';\r\n\r\n//complaintList 가져오기 요청\r\nexport async function getComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/list');\r\n    console.log(\"you can use getComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 날짜 최신순으로 가져오기 요청\r\nexport async function getRecentComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/listRecent');\r\n    console.log(\"you can use getRecentComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintByUserId(userId) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/mine/${userId}`);\r\n    //console.log(\"getComplaintByUserId\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintListByInst(institution) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/myList/${institution}`);\r\n    //console.log(\"getComplaintListByInst\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//pathList 날짜 최신순으로 가져오기 요청\r\nexport async function getPathList() {\r\n  try { \r\n    const response = await axios.get('/api/pathList');\r\n    console.log(\"you can use getPathList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 작성 요청\r\nexport async function insertComplaint(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insert', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원글 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오기 요청\r\nexport async function getComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/one/${complaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 유저 아이디에 따른 유저정보 한개 가져오기 요청\r\nexport async function getUserById(userId) {\r\n  try {\r\n    const response = await axios.get(`/api/userInfo/${userId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n  \r\n}\r\n\r\n// 코스 한개씩 가져오기 요청\r\nexport async function getCourseById(courseId) {\r\n  try {\r\n    const response = await axios.get(`/api/course/${courseId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n\r\n// 민원글 번호에 따른 글 삭제 요청\r\nexport async function deleteComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.delete(`/api/complaint/delete/${complaintNo}`);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n// 글 업데이트\r\nexport async function updateComplaintByNo(complaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/update/${complaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n//특정 유저의 complaintList를 가져오기 요청\r\nexport async function getUserPostList(userNo) {\r\n  try { \r\n    const response = await api.get(`/auth/userpostlist/${userNo}`);\r\n    console.log(userNo);\r\n    console.log(\"you can use getUserPostList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//게시글 추가 및 \r\nexport async function insertPostAndKeyword(postData, keywordData) {\r\n  const formData = new FormData();\r\n  formData.append('post', new Blob([JSON.stringify(postData)], { type: 'application/json' }));\r\n  formData.append('postkeyword', new Blob([JSON.stringify(keywordData)], { type: 'application/json' }));\r\n\r\n  try {\r\n    const response = await api.post('/auth/insert', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n    if (err.response && err.response.status === 401) {\r\n      // 로그인 페이지로 이동\r\n      alert(\"로그인 후 이용하실 수 있습니다.\")\r\n      router.push({ path: '/login' });\r\n    }\r\n    throw err;\r\n  }\r\n} \r\n\r\n// 이미지 저장요청\r\nexport async function saveImage(formData) {\r\n  try {\r\n    const response = await api.post('/auth/upload-image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    console.log('서버 응답:', response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('이미지 업로드 중 오류 발생:', err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원처리정보 한개 가져오기 요청\r\nexport async function getProcessingByNo(processingComplaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/processing/${processingComplaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원처리정보 작성 요청\r\nexport async function insertProcessing(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insertProcessing', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원처리정보 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원처리정보 업데이트\r\nexport async function updateProcessingByNo(processingComplaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/updateProcessing/${processingComplaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}","import { ref } from \"vue\";\r\nimport { defineStore } from \"pinia\";\r\nimport { getComplaintList, getUserPostList, getComplaintListByInst, getComplaintByNo, getRecentComplaintList, getPathList, getComplaintByUserId } from '@/api/complaint';\r\n\r\n// 민원글 리스트 가져오는 상태\r\nexport const useComplaintListStore = defineStore('complaintlist', () => {\r\n  const complaintlist = ref([]);\r\n  async function fetchComplaintList() {\r\n    console.log(\"Fetching complaintlist ===\");\r\n    complaintlist.value = await getComplaintList();\r\n    console.log(\"postlist--\",complaintlist.value);\r\n  }\r\n\r\n  return { complaintlist, fetchComplaintList }\r\n})\r\n\r\n// 민원글 리스트 날짜 최신순으로 가져오는 상태\r\nexport const useRecentComplaintListStore = defineStore('recentcomplaintlist', () => {\r\n  const recentcomplaintlist = ref([]);\r\n  async function fetchRecentComplaintList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    recentcomplaintlist.value = await getRecentComplaintList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { recentcomplaintlist, fetchRecentComplaintList }\r\n})\r\n\r\nexport const useMyComplaintListStore = defineStore('mycomplaintlist', () => {\r\n  const mycomplaintlist = ref([]);\r\n  async function fetchMyComplaintList(userId) {\r\n    //console.log(\"Fetching mycomplaintlist ===\");\r\n    mycomplaintlist.value = await getComplaintByUserId(userId);\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { mycomplaintlist, fetchMyComplaintList }\r\n})\r\n\r\nexport const useManagingComplaintListStore = defineStore('managingcomplaintlist', () => {\r\n  const managingcomplaintlist = ref([]);\r\n  async function fetchManagingComplaintList(institution) {\r\n    managingcomplaintlist.value = await getComplaintListByInst(institution);\r\n    console.log(\"담당업무--\",managingcomplaintlist.value);\r\n  }\r\n\r\n  return { managingcomplaintlist, fetchManagingComplaintList }\r\n})\r\n\r\n// 운동 기록 리스트 날짜 최신순으로 가져오는 상태\r\nexport const usePathList = defineStore('pathList', () => {\r\n  const pathList = ref([]);\r\n  async function fetchPathList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    pathList.value = await getPathList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { pathList, fetchPathList }\r\n})\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오는 상태\r\nexport const useComplaintStore = defineStore('complaintByNo', () => {\r\n  const complaintone = ref({});\r\n  async function fetchComplaintone(postNo) {\r\n    try {\r\n      complaintone.value = await getComplaintByNo(postNo);\r\n    } catch (err) {\r\n      console.error('Error fetching post:', err);\r\n    }\r\n  }\r\n  return { complaintone, fetchComplaintone };\r\n});\r\n\r\n// 특정 유저의 게시글 목록 가져오는 상태\r\nexport const useUserPostListStore = defineStore('userpostlist', () => {\r\n  const userpostlist = ref([]);\r\n  async function fetchUserPost() {\r\n    const userNo = sessionStorage.getItem('userNo');\r\n    console.log(userNo);\r\n    if (!userNo) {\r\n      console.error('userNo is undefined or null');\r\n      return;\r\n    }\r\n    try {\r\n      console.log(\"userpostlist -- 유저 포스트 리스트\");\r\n      userpostlist.value = await getUserPostList(userNo);\r\n      console.log(\"userpostlist--\", userpostlist.value);\r\n    } catch (err) {\r\n      console.error('Error fetching userpostlist:', err);\r\n    }\r\n  }\r\n\r\n  return { userpostlist, fetchUserPost }\r\n})\r\n","<template>\r\n    <div id=\"app\">\r\n        <div class=\"app-main\">\r\n            <!-- 지도 영역 -->\r\n            <div id=\"map-container\">\r\n                <div id=\"map\"></div>\r\n            </div>\r\n                \r\n            <div class=\"review-search\" style=\"top: 30px;\" @click=\"openSearchModal\">\r\n                <div class=\"search-container\">\r\n                <input type=\"text\" placeholder=\"검색\" />\r\n                <button class=\"search-button\">\r\n                    <img src=\"/images/돋보기white.png\" alt=\"Search\" />\r\n                </button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n      <button id=\"back-button\" @click=\"goToListPage\">\r\n      <img src=\"/images/뒤로가기.png\" alt=\"뒤로가기\">\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"toggle-switch-container2\" style=\"z-index: 10;\"> <!-- 기존 z-index를 낮춰 설정 -->\r\n        <div class=\"toggle-switch2\">\r\n          <img src=\"/images/파손.png\" alt=\"\" style=\"width: 15px; height: auto; margin-right: 5px;\"> 파손\r\n        </div>\r\n        <div class=\"toggle-switch2\" >\r\n          <img src=\"/images/낙석.png\" alt=\"\" style=\"width: 15px; height: auto; margin-right: 5px;\"> 낙석\r\n        </div>\r\n        <div class=\"toggle-switch2\" style=\" font-size: 12px; width: 100px;\">\r\n          <img src=\"/images/야생동물.png\" alt=\"\" style=\"width: 15px; height: auto; margin-right: 5px;\"> 야생동물\r\n        </div>\r\n      </div>\r\n            \r\n    \r\n        <!-- 하단 푸터 -->\r\n        <MobileFooterView4></MobileFooterView4>\r\n\r\n        <!-- 장소 검색 모달 -->\r\n        <div v-if=\"isModalOpen\" class=\"modal\">\r\n            <div class=\"modal-content\">\r\n                <span class=\"close\" @click=\"closeSearchModal\">&times;</span>\r\n                <input v-model=\"keywordInput\" placeholder=\"장소 검색\" class=\"mt-5\" />\r\n                <button class=\"searchButton\" @click=\"searchPlaces\">검색하기</button>\r\n\r\n                <ul v-if=\"searchResults.length > 0\">\r\n                    <li v-for=\"(place, index) in searchResults\" :key=\"index\" @click=\"selectPlace(place)\">\r\n                        {{ place.place_name }} ({{ place.address_name }})\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n    \r\n    \r\n<script setup>\r\nimport MobileFooterView4 from \"@/components/MobileFooterView4.vue\";\r\n/* global kakao */\r\nimport { ref, onMounted } from \"vue\";\r\nimport { useComplaintListStore, useComplaintStore } from \"@/stores/complaint\"\r\nimport router from \"@/router/index.js\";\r\nimport { storeToRefs } from 'pinia';\r\n\r\n// 스토어 가져와서 리스트 받아오기\r\nconst complaintListStore = useComplaintListStore();\r\n\r\n// onMounted로 컴포넌트가 마운트된 후에 실행되도록 설정\r\nonMounted(async () => {\r\n    await complaintListStore.fetchComplaintList();\r\n    // sessionStorage에서 새로고침 여부를 확인\r\n    const hasRefreshed = sessionStorage.getItem('hasRefreshed');\r\n\r\n    if (!hasRefreshed) {\r\n    sessionStorage.setItem('hasRefreshed', 'true'); // 새로고침 플래그 설정\r\n    window.location.reload(); // 페이지 새로고침\r\n    } else {\r\n    sessionStorage.removeItem('hasRefreshed'); // 플래그 초기화\r\n    }\r\n    initializeMap(); // Vue가 마운트될 때 지도를 초기화\r\n});\r\n\r\nconst { complaintlist } = storeToRefs(complaintListStore);\r\n\r\nfunction initializeMap() {\r\n    // Kakao 지도 API 스크립트를 동적으로 로드\r\n    const script = document.createElement('script');\r\n    script.onload = () => {\r\n        kakao.maps.load(() => {\r\n            createMap();\r\n            isKakaoMapLoaded.value = true; // Kakao Maps 로드 완료\r\n        });\r\n    };\r\n    script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=333bda7da18df138fb4d9b3e5cf351c4&autoload=false&libraries=clusterer,services'; // autoload=false로 설정\r\n    document.head.appendChild(script);\r\n}\r\n\r\nlet map;\r\n\r\nfunction createMap() {\r\n    const mapContainer = document.getElementById('map'); // 지도를 표시할 div 선택\r\n    const mapOption = {\r\n        center: new kakao.maps.LatLng(37.660833, 126.993333), // 지도의 중심 좌표\r\n        level: 9, // 지도 확대 레벨\r\n    };\r\n\r\n    // 지도 생성\r\n    map = new kakao.maps.Map(mapContainer, mapOption);\r\n\r\n    // 마커 클러스터러를 생성합니다 \r\n    var clusterer = new kakao.maps.MarkerClusterer({\r\n        map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \r\n        averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \r\n        minLevel: 6 // 클러스터 할 최소 지도 레벨 \r\n    });\r\n\r\n    // 마커 이미지의 주소 (각 유형별 이미지)\r\n    const markerImages = {\r\n        낙석: \"/images/낙석.png\", // 낙석 마커 이미지\r\n        야생동물: \"/images/야생동물.png\", // 화재 마커 이미지\r\n        파손: \"/images/파손.png\", // 파손 마커 이미지\r\n    };\r\n\r\n    // 마커를 표시할 위치와 타이틀 정보\r\n    const positions = complaintlist.value.map(complaint => ({\r\n        title: complaint.mountainName,\r\n        latlng: new kakao.maps.LatLng(complaint.latitude, complaint.longitude),\r\n        type: complaint.complaintType,\r\n        complaintNo: complaint.complaintNo\r\n    }));\r\n\r\n    //console.log(\"배열 : \" + positions); // 위치 배열이 제대로 생성되었는지 확인\r\n\r\n    // goToComplaintInfo 함수 정의\r\n    function goToComplaintInfo(complaintNo) {\r\n        sessionStorage.setItem(\"complaintNo\", complaintNo);\r\n        router.push({ path: \"/complaintInfoMobile\" });\r\n    }\r\n\r\n    // 각 위치에 마커 생성\r\n    const markers = positions.map((position) => {\r\n        const imageSrc = markerImages[position.type] || markerImages['낙석']; // 기본 이미지로 낙석을 사용\r\n\r\n        const imageSize = new kakao.maps.Size(25, 30); // 마커 이미지 크기\r\n        const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); // 마커 이미지 생성\r\n\r\n        // 마커 생성\r\n        const marker = new kakao.maps.Marker({\r\n            position: position.latlng,\r\n            title: position.title,\r\n            image: markerImage,\r\n        });\r\n\r\n        // 인포윈도우의 내용에 아이콘 버튼 추가\r\n        const infowindowContent = document.createElement('div');\r\n        infowindowContent.style.padding = '2px';\r\n        infowindowContent.style.cursor = 'pointer';\r\n        infowindowContent.style.width = '180px';\r\n        infowindowContent.style.textAlign = 'center'; // 가운데 정렬\r\n        infowindowContent.innerHTML = `\r\n            ${position.type} - ${position.title}\r\n            <i class=\"bi bi-caret-right-fill\" style=\"font-size: 1em; color: black; cursor: pointer; margin-left: 1px;\"></i>\r\n        `;\r\n    \r\n        // 아이콘 클릭 시 goToComplaintInfo 실행\r\n        infowindowContent.querySelector('.bi-caret-right-fill').addEventListener('click', () => {\r\n            goToComplaintInfo(position.complaintNo);\r\n        });\r\n\r\n\r\n        const infowindow = new kakao.maps.InfoWindow({\r\n            content: infowindowContent,\r\n            zIndex: 10\r\n        });\r\n\r\n\r\n        // 인포윈도우 상태를 추적하는 변수\r\n        let openInfowindow = null;\r\n\r\n        // 마우스 클릭 이벤트 등록\r\n        kakao.maps.event.addListener(marker, 'click', function() {\r\n            if (openInfowindow !== infowindow) {\r\n                // 현재 열려 있는 인포윈도우가 있다면 닫기\r\n                if (openInfowindow) {\r\n                    openInfowindow.close(); // 열려 있는 인포윈도우 닫기\r\n                }\r\n                // 클릭한 마커의 인포윈도우 열기\r\n                infowindow.open(map, marker);\r\n                openInfowindow = infowindow; // 현재 열린 인포윈도우를 업데이트\r\n            } else {\r\n                // 클릭한 인포윈도우가 이미 열려 있다면 닫기\r\n                infowindow.close();\r\n                openInfowindow = null; // 열린 인포윈도우를 초기화\r\n            }\r\n        });\r\n\r\n        //console.log(position.title);\r\n        // 인포윈도우를 마커에 즉시 표시\r\n        //infowindow.open(map, marker);\r\n        return marker;\r\n\r\n    });\r\n\r\n    // 클러스터러에 마커들을 추가합니다\r\n    clusterer.addMarkers(markers);\r\n\r\n    // 줌 레벨 변경 이벤트 리스너 추가\r\n    kakao.maps.event.addListener(map, 'zoom_changed', function() {\r\n        if (map.getLevel() <= 6) {\r\n            clusterer.clear();\r\n            markers.forEach(function(marker) {\r\n                marker.setMap(map);\r\n            });\r\n        } else {\r\n            markers.forEach(function(marker) {\r\n                marker.setMap(null);\r\n            });\r\n            clusterer.addMarkers(markers);\r\n        }\r\n    });\r\n}\r\n\r\n// 번호에 따른 민원 글 데이터 불러오기\r\nconst complaintStore = useComplaintStore();\r\n// eslint-disable-next-line no-unused-vars\r\nconst complaintone = storeToRefs(complaintStore);\r\n\r\n// // 마커누르면 번호받아서 저장하고 세부페이지로 이동시킴\r\n// async function getComplaintByNo(key) {\r\n//   await complaintStore.fetchComplaintone(key);\r\n//   sessionStorage.setItem(\"complaintNo\", key);\r\n//   router.replace({path: '/complaintInfoMobile'});\r\n// }\r\n\r\n// 모달 상태를 제어하는 변수\r\nconst isModalOpen = ref(false);\r\nconst keywordInput = ref(\"\");\r\nconst searchResults = ref([]);\r\n\r\n// Kakao Maps가 로드된 상태를 추적하는 변수\r\nlet isKakaoMapLoaded = ref(false);\r\n\r\n// ==== 장소 검색 관련 함수 ==== //\r\nfunction openSearchModal() {\r\n    isModalOpen.value = true; \r\n    console.log(\"모달열림\" + isModalOpen.value);\r\n}\r\n\r\nfunction closeSearchModal() {\r\n    isModalOpen.value = false;\r\n}\r\n\r\nfunction searchPlaces() {\r\n    const keyword = keywordInput.value.trim();\r\n    if (!keyword) {\r\n        alert('키워드를 입력해주세요!');\r\n        return;\r\n    }\r\n\r\n    if (!isKakaoMapLoaded.value) {\r\n        alert('Kakao Maps가 아직 로드되지 않았습니다.');\r\n        return;\r\n    }\r\n\r\n    const ps = new kakao.maps.services.Places();\r\n    ps.keywordSearch(keyword, placesSearchCB);\r\n}\r\n\r\nfunction placesSearchCB(data, status) {\r\n    if (status === kakao.maps.services.Status.OK) {\r\n        searchResults.value = data; \r\n    } else {\r\n        alert('검색 결과가 없습니다.');\r\n    }\r\n}\r\n\r\n// 선택한 장소로 메인 맵에 마커를 표시하는 함수\r\nfunction selectPlace(place) {\r\n\r\n    // 기존 맵의 중심을 선택한 장소로 이동\r\n    const centerPosition = new kakao.maps.LatLng(place.y, place.x);\r\n    map.setCenter(centerPosition); // 맵의 중심을 선택한 장소로 이동\r\n    map.setLevel(7);\r\n    closeSearchModal(); // 모달을 닫습니다\r\n}\r\n\r\n\r\n// 리스트페이지로 이동하기\r\nfunction goToListPage() {\r\n    router.replace({ path: \"/complaintListMobile\" });\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#app {\r\n    height: 100vh;\r\n    width: 100vw;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n/* 메인 콘텐츠 설정 */\r\n.app-main {\r\n    position: relative;\r\n    height: 100vh;\r\n    width: 100vw;\r\n    background-color: #f5f5f5;\r\n    overflow: hidden;\r\n}\r\n\r\n/* 지도 컨테이너 */\r\n#map-container {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#map {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n\r\n\r\n.fs-9 {\r\n    font-size: 0.6rem !important; /* 폰트 크기 정의 및 우선 적용 */\r\n}\r\n\r\nhr.separator-line {\r\n    border: 1px solid #ccc;\r\n    margin: 10px 0;\r\n    width: 100%;\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.smaller-text {\r\n    font-size: 0.75rem;\r\n    white-space: nowrap;\r\n}\r\n\r\n.card-container {\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n}\r\n\r\n.search-modal {\r\n    position: absolute;\r\n    top: 20px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    width: 300px;\r\n    background-color: #fff;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n    z-index: 10;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-left: 25px;\r\n}\r\n\r\n.search-modal input {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n\r\n.carousel-inner {\r\n  display: flex;\r\n  width: 300px;\r\n  align-items: center;\r\n  margin-top: 28em;\r\n  overflow: hidden;\r\n}\r\n\r\n.carousel-image {\r\n    display: block; \r\n  width: 100%;\r\n  height: auto; \r\n  max-width: 200px; \r\n  object-fit: cover; \r\n  margin: 0 5px;\r\n  border-radius: 8px; \r\n}\r\n\r\n/* 범례 스타일 */\r\n.map-legend {\r\n    position: absolute;\r\n    bottom: 20px;\r\n    left: 20px;\r\n    background-color: rgba(255, 255, 255, 0.8);\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n    z-index: 10;\r\n}\r\n\r\n.legend-item {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.legend-icon {\r\n    width: 20px;\r\n    height: 20px;\r\n    margin-right: 5px;\r\n}\r\n\r\n\r\n/* 뒤로가기 버튼 */\r\nbutton.back-button {\r\n    position: absolute;\r\n    top: 20px;\r\n    left: 20px;\r\n    z-index: 10;\r\n    background-color: white;\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    border: none;\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\nbutton.back-button img {\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n\r\n/* 모달 스타일 */\r\n.modal {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 20;\r\n}\r\n\r\n.modal-content {\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    width: 80%;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.modal-content input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n}\r\n\r\n.searchButton {\r\n    display: block;\r\n    width: 100%;\r\n    background-color: #04663f;\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n}\r\n\r\n.searchButton:hover {\r\n    background-color: #034f2c;\r\n}\r\n\r\n.close {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    font-size: 18px;\r\n    cursor: pointer;\r\n    color: #333;\r\n}\r\n\r\n/* 반응형 스타일 */\r\n@media (max-width: 480px) {\r\n    .search-modal {\r\n        width: 80%;\r\n    }\r\n\r\n    .map-legend {\r\n        bottom: 10px;\r\n        left: 10px;\r\n        font-size: 12px;\r\n    }\r\n\r\n    .legend-icon {\r\n        width: 15px;\r\n        height: 15px;\r\n    }\r\n\r\n    button.back-button {\r\n        top: 30px;\r\n        left: 10px;\r\n    }\r\n}\r\n</style>  ","import script from \"./ComplaintListMapViewMobile.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ComplaintListMapViewMobile.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ComplaintListMapViewMobile.vue?vue&type=style&index=0&id=014ff682&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-014ff682\"]])\n\nexport default __exports__"],"names":["apiInstance","instance","axios","create","baseURL","headers","api","async","getComplaintList","response","get","console","log","data","err","error","getRecentComplaintList","getComplaintByUserId","userId","getComplaintListByInst","institution","getPathList","insertComplaint","post","status","getComplaintByNo","complaintNo","getUserById","getCourseById","courseId","deleteComplaintByNo","delete","updateComplaintByNo","patch","getUserPostList","userNo","getProcessingByNo","processingComplaintNo","insertProcessing","updateProcessingByNo","useComplaintListStore","defineStore","complaintlist","ref","fetchComplaintList","value","useRecentComplaintListStore","recentcomplaintlist","fetchRecentComplaintList","useMyComplaintListStore","mycomplaintlist","fetchMyComplaintList","useManagingComplaintListStore","managingcomplaintlist","fetchManagingComplaintList","usePathList","pathList","fetchPathList","useComplaintStore","complaintone","fetchComplaintone","postNo","userpostlist","fetchUserPost","sessionStorage","getItem","complaintListStore","onMounted","hasRefreshed","removeItem","setItem","window","location","reload","initializeMap","storeToRefs","script","document","createElement","onload","kakao","maps","load","createMap","isKakaoMapLoaded","src","head","appendChild","map","mapContainer","getElementById","mapOption","center","LatLng","level","Map","clusterer","MarkerClusterer","averageCenter","minLevel","markerImages","낙석","야생동물","파손","positions","complaint","title","mountainName","latlng","latitude","longitude","type","complaintType","goToComplaintInfo","router","push","path","markers","position","imageSrc","imageSize","Size","markerImage","MarkerImage","marker","Marker","image","infowindowContent","style","padding","cursor","width","textAlign","innerHTML","querySelector","addEventListener","infowindow","InfoWindow","content","zIndex","openInfowindow","event","addListener","close","open","addMarkers","getLevel","clear","forEach","setMap","complaintStore","isModalOpen","keywordInput","searchResults","openSearchModal","closeSearchModal","searchPlaces","keyword","trim","alert","ps","services","Places","keywordSearch","placesSearchCB","Status","OK","selectPlace","place","centerPosition","y","x","setCenter","setLevel","goToListPage","replace","__exports__"],"sourceRoot":""}