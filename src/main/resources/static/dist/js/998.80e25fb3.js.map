{"version":3,"file":"js/998.80e25fb3.js","mappings":"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","sources":["webpack://frontend/./src/api/index.js","webpack://frontend/./src/api/complaint.js","webpack://frontend/./src/stores/complaint.js","webpack://frontend/./src/views/ComplaintListView.vue","webpack://frontend/./src/views/ComplaintListView.vue?0674"],"sourcesContent":["import axios from 'axios';\r\n\r\nfunction apiInstance() {\r\n  const instance = axios.create({\r\n    baseURL: 'http://localhost:9000/api',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n  });\r\n  return instance;\r\n}\r\n\r\nexport { apiInstance };","import { apiInstance } from \"./index.js\";\r\nconst api = apiInstance();\r\nimport router from \"@/router/index.js\";\r\nimport axios from 'axios';\r\n\r\n//complaintList 가져오기 요청\r\nexport async function getComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/list');\r\n    console.log(\"you can use getComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 날짜 최신순으로 가져오기 요청\r\nexport async function getRecentComplaintList() {\r\n  try { \r\n    const response = await axios.get('/api/complaint/listRecent');\r\n    console.log(\"you can use getRecentComplaintList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintByUserId(userId) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/mine/${userId}`);\r\n    //console.log(\"getComplaintByUserId\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//complaintList 글쓴이아이디에 해당하는 리스트 최신순으로 가져오기 요청\r\nexport async function getComplaintListByInst(institution) {\r\n  try { \r\n    const response = await axios.get(`/api/complaint/myList/${institution}`);\r\n    //console.log(\"getComplaintListByInst\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//pathList 날짜 최신순으로 가져오기 요청\r\nexport async function getPathList() {\r\n  try { \r\n    const response = await axios.get('/api/pathList');\r\n    console.log(\"you can use getPathList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 작성 요청\r\nexport async function insertComplaint(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insert', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원글 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오기 요청\r\nexport async function getComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/one/${complaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 유저 아이디에 따른 유저정보 한개 가져오기 요청\r\nexport async function getUserById(userId) {\r\n  try {\r\n    const response = await axios.get(`/api/userInfo/${userId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n  \r\n}\r\n\r\n// 코스 한개씩 가져오기 요청\r\nexport async function getCourseById(courseId) {\r\n  try {\r\n    const response = await axios.get(`/api/course/${courseId}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n\r\n// 민원글 번호에 따른 글 삭제 요청\r\nexport async function deleteComplaintByNo(complaintNo) {\r\n  try {\r\n    const response = await axios.delete(`/api/complaint/delete/${complaintNo}`);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n// 글 업데이트\r\nexport async function updateComplaintByNo(complaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/update/${complaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n//특정 유저의 complaintList를 가져오기 요청\r\nexport async function getUserPostList(userNo) {\r\n  try { \r\n    const response = await api.get(`/auth/userpostlist/${userNo}`);\r\n    console.log(userNo);\r\n    console.log(\"you can use getUserPostList\", response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n//게시글 추가 및 \r\nexport async function insertPostAndKeyword(postData, keywordData) {\r\n  const formData = new FormData();\r\n  formData.append('post', new Blob([JSON.stringify(postData)], { type: 'application/json' }));\r\n  formData.append('postkeyword', new Blob([JSON.stringify(keywordData)], { type: 'application/json' }));\r\n\r\n  try {\r\n    const response = await api.post('/auth/insert', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n    if (err.response && err.response.status === 401) {\r\n      // 로그인 페이지로 이동\r\n      alert(\"로그인 후 이용하실 수 있습니다.\")\r\n      router.push({ path: '/login' });\r\n    }\r\n    throw err;\r\n  }\r\n} \r\n\r\n// 이미지 저장요청\r\nexport async function saveImage(formData) {\r\n  try {\r\n    const response = await api.post('/auth/upload-image', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    console.log('서버 응답:', response.data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('이미지 업로드 중 오류 발생:', err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원글 번호에 따른 민원처리정보 한개 가져오기 요청\r\nexport async function getProcessingByNo(processingComplaintNo) {\r\n  try {\r\n    const response = await axios.get(`/api/complaint/processing/${processingComplaintNo}`);\r\n    console.log(\"API response:\", response);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err); // 에러를 콘솔에 출력\r\n  }\r\n}\r\n\r\n// 민원처리정보 작성 요청\r\nexport async function insertProcessing(data) {\r\n  try {\r\n    const response = await axios.post('/api/complaint/insertProcessing', data);\r\n    console.log('응답 상태 코드:', response.status); // 응답 상태 코드 확인\r\n    console.log('민원처리정보 작성에 대한 응답 데이터:', response.data); \r\n    return response.data;\r\n  } catch (err) {\r\n    console.error('API 요청 중 오류 발생:', err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// 민원처리정보 업데이트\r\nexport async function updateProcessingByNo(processingComplaintNo, data) {\r\n  try {\r\n    const response = await axios.patch(`/api/complaint/updateProcessing/${processingComplaintNo}`, data);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}","import { ref } from \"vue\";\r\nimport { defineStore } from \"pinia\";\r\nimport { getComplaintList, getUserPostList, getComplaintListByInst, getComplaintByNo, getRecentComplaintList, getPathList, getComplaintByUserId } from '@/api/complaint';\r\n\r\n// 민원글 리스트 가져오는 상태\r\nexport const useComplaintListStore = defineStore('complaintlist', () => {\r\n  const complaintlist = ref([]);\r\n  async function fetchComplaintList() {\r\n    console.log(\"Fetching complaintlist ===\");\r\n    complaintlist.value = await getComplaintList();\r\n    console.log(\"postlist--\",complaintlist.value);\r\n  }\r\n\r\n  return { complaintlist, fetchComplaintList }\r\n})\r\n\r\n// 민원글 리스트 날짜 최신순으로 가져오는 상태\r\nexport const useRecentComplaintListStore = defineStore('recentcomplaintlist', () => {\r\n  const recentcomplaintlist = ref([]);\r\n  async function fetchRecentComplaintList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    recentcomplaintlist.value = await getRecentComplaintList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { recentcomplaintlist, fetchRecentComplaintList }\r\n})\r\n\r\nexport const useMyComplaintListStore = defineStore('mycomplaintlist', () => {\r\n  const mycomplaintlist = ref([]);\r\n  async function fetchMyComplaintList(userId) {\r\n    //console.log(\"Fetching mycomplaintlist ===\");\r\n    mycomplaintlist.value = await getComplaintByUserId(userId);\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { mycomplaintlist, fetchMyComplaintList }\r\n})\r\n\r\nexport const useManagingComplaintListStore = defineStore('managingcomplaintlist', () => {\r\n  const managingcomplaintlist = ref([]);\r\n  async function fetchManagingComplaintList(institution) {\r\n    managingcomplaintlist.value = await getComplaintListByInst(institution);\r\n    console.log(\"담당업무--\",managingcomplaintlist.value);\r\n  }\r\n\r\n  return { managingcomplaintlist, fetchManagingComplaintList }\r\n})\r\n\r\n// 운동 기록 리스트 날짜 최신순으로 가져오는 상태\r\nexport const usePathList = defineStore('pathList', () => {\r\n  const pathList = ref([]);\r\n  async function fetchPathList() {\r\n    //console.log(\"Fetching recentcomplaintlist ===\");\r\n    pathList.value = await getPathList();\r\n    //console.log(\"recentpostlist--\",recentcomplaintlist.value);\r\n  }\r\n\r\n  return { pathList, fetchPathList }\r\n})\r\n\r\n// 민원글 번호에 따른 민원글 한개 가져오는 상태\r\nexport const useComplaintStore = defineStore('complaintByNo', () => {\r\n  const complaintone = ref({});\r\n  async function fetchComplaintone(postNo) {\r\n    try {\r\n      complaintone.value = await getComplaintByNo(postNo);\r\n    } catch (err) {\r\n      console.error('Error fetching post:', err);\r\n    }\r\n  }\r\n  return { complaintone, fetchComplaintone };\r\n});\r\n\r\n// 특정 유저의 게시글 목록 가져오는 상태\r\nexport const useUserPostListStore = defineStore('userpostlist', () => {\r\n  const userpostlist = ref([]);\r\n  async function fetchUserPost() {\r\n    const userNo = sessionStorage.getItem('userNo');\r\n    console.log(userNo);\r\n    if (!userNo) {\r\n      console.error('userNo is undefined or null');\r\n      return;\r\n    }\r\n    try {\r\n      console.log(\"userpostlist -- 유저 포스트 리스트\");\r\n      userpostlist.value = await getUserPostList(userNo);\r\n      console.log(\"userpostlist--\", userpostlist.value);\r\n    } catch (err) {\r\n      console.error('Error fetching userpostlist:', err);\r\n    }\r\n  }\r\n\r\n  return { userpostlist, fetchUserPost }\r\n})\r\n","<template>\r\n  <div id=\"app\">\r\n  \r\n  <div class=\"app-main\">\r\n    <!-- START:: 위에 제목과 버튼들 -->\r\n    <div class=\"container\" style=\"height: 100px;\">\r\n        <div class=\"row\" style=\"height: 65px;\">\r\n          <div class=\"col-8 d-flex justify-content-center\">\r\n            <span class=\"fs-1 m-2 fw-bold\">위험신고 목록</span>\r\n          </div>\r\n          <div class=\"col-4 d-flex justify-content-center\">\r\n            <button class=\"styled-button\" @click=\"goToMap()\">지도보기</button>\r\n          </div>\r\n        </div> \r\n        <div class=\"row\" style=\"height: 45px;\">\r\n          <div class=\"col-6 d-flex justify-content-center\">\r\n            <button class=\"styled-button\" @click=\"getRecentList()\">{{btnname}}</button>\r\n          </div>\r\n          <div class=\"col-6 d-flex justify-content-center\">\r\n            <button class=\"styled-button\" @click=\"goToComplaintPage()\">신고하기</button>\r\n          </div>\r\n        </div> \r\n    </div>\r\n    <!-- END:: 위에 제목과 버튼들 -->\r\n    <!-- 민원 목록 카드 -->\r\n    <div class=\"card-container d-flex align-items-center justify-content-center mt-3 mb-4\">\r\n      <div class=\"col-12 col-md-9\">\r\n        <!-- 민원 목록 카드 -->\r\n        <div class=\"card card-flush\" id=\"kt_contacts_list\">\r\n          <!-- 카드 내용 -->\r\n          <div class=\"card-body pt-3 pb-4\" id=\"kt_contacts_list_body\"  style=\"height: 500px;\">\r\n            <div class=\"container\">\r\n              <div class=\"row\" style=\"flex-wrap: nowrap;\">\r\n                <div class=\"col-2 col-md-2 text-center\">\r\n                  <span class=\"text-muted fs-9\">번호</span>\r\n                </div>\r\n                <div class=\"col-5 col-md-5 text-center\">\r\n                  <span style=\"white-space: nowrap\" class=\"text-muted fs-9\">제목</span>\r\n                </div>\r\n                <div class=\"col-2 col-md-2 text-center\">\r\n                  <span class=\"text-muted fs-9\">글쓴이</span>\r\n                </div>\r\n                <div class=\"col-3 col-md-3 text-center\">\r\n                  <span class=\"text-muted fs-9\">작성시간</span>\r\n                </div>\r\n              </div>\r\n              <hr class=\"separator-line\" />\r\n            </div>\r\n  \r\n            <!-- 민원 목록 -->\r\n            <div v-for=\"(item, index) in paginatedList\" :key=\"item.complaintNo\" class=\"container mb-2\">\r\n              <div class=\"row\" style=\"flex-wrap: nowrap;\" @click=\"getComplaintByNo(item.complaintNo)\" >\r\n                <div class=\"col-2 col-md-2 text-center\">\r\n                  <span class=\"text-muted smaller-text\">{{ (currentPage - 1) * itemsPerPage + index + 1 }}</span>\r\n                </div>\r\n                <div class=\"col-5 col-md-5\">\r\n                  <span class=\"smaller-text\" style=\"white-space: nowrap\">{{ item.complaintTitle }}</span>\r\n                </div>\r\n                <div class=\"col-2 col-md-2 text-center\">\r\n                  <span class=\"text-muted smaller-text\">{{ userNickNames[item.userId] || '...' }}</span>\r\n                </div>\r\n                <div class=\"col-3 col-md-3 text-center\">\r\n                  <span class=\"text-muted smaller-text\">\r\n                    <span>{{ formatDate(item.createdAt) }}</span>\r\n                    <br />\r\n                    <span>{{ formatTime(item.createdAt) }}</span>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <hr class=\"separator-line\" />\r\n            </div>\r\n          </div>\r\n          <!-- START::페이지네이션 -->\r\n          <div class=\"card-footer d-flex justify-content-center pb-3\">\r\n            <!-- Pagination -->\r\n            <nav aria-label=\"Pagination\">\r\n              <ul class=\"pagination\">\r\n                <li\r\n                  class=\"page-item\"\r\n                  v-for=\"page in totalPages\"\r\n                  :key=\"page\"\r\n                  :class=\"{ active: page === currentPage }\"\r\n                >\r\n                  <a class=\"page-link\" href=\"#\" @click.prevent=\"changePage(page)\">{{ page }}</a>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n          <!-- END::페이지네이션 -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <MobileFooterView4></MobileFooterView4>\r\n  </div>\r\n  </template>\r\n  \r\n  \r\n  <script setup>\r\n  import MobileFooterView4 from \"@/components/MobileFooterView4.vue\";\r\n  import { ref, onMounted, computed } from \"vue\";\r\n  import { useComplaintListStore, useComplaintStore, useRecentComplaintListStore, useMyComplaintListStore } from \"@/stores/complaint\";\r\n  import { getUserById } from \"@/api/complaint\";\r\n  import router from \"@/router/index.js\";\r\n  import { storeToRefs } from 'pinia';\r\n  \r\n  // 스토어 가져와서 리스트 받아오기\r\n  const complaintListStore = useComplaintListStore();\r\n  const recentcomplaintListStore = useRecentComplaintListStore();\r\n  const myComplaintListStore = useMyComplaintListStore();\r\n  \r\n  // 상태 변수 추가\r\n  const isRecent = ref(false);\r\n  let btnname = ref('나의글');\r\n  let loginUserId = localStorage.getItem(\"userId\");\r\n\r\n  const userNickNames = ref({});\r\n  const currentPage = ref(1);\r\n  const itemsPerPage = 7;\r\n\r\n  // onMounted로 컴포넌트가 마운트된 후에 실행되도록 설정\r\n  onMounted(async () => {\r\n\r\n    await complaintListStore.fetchComplaintList();\r\n    //window.location.reload();\r\n    await recentcomplaintListStore.fetchRecentComplaintList();\r\n    await myComplaintListStore.fetchMyComplaintList(loginUserId);\r\n    // sessionStorage에서 새로고침 여부를 확인\r\n    const hasRefreshed = sessionStorage.getItem('hasRefreshed');\r\n  \r\n    if (!hasRefreshed) {\r\n      sessionStorage.setItem('hasRefreshed', 'true'); // 새로고침 플래그 설정\r\n      window.location.reload(); // 페이지 새로고침\r\n    } else {\r\n      sessionStorage.removeItem('hasRefreshed'); // 플래그 초기화\r\n    } // Vue가 마운트될 때 지도를 초기화\r\n\r\n    const uniqueUserIds = [...new Set(displayedList.value.map(item => item.userId))];\r\n    await Promise.all(uniqueUserIds.map(async (userId) => {\r\n      const userInfo = await getUserById(userId);\r\n      userNickNames.value[userId] = userInfo.userNickName;\r\n    }));\r\n\r\n  });\r\n \r\n  // eslint-disable-next-line no-unused-vars\r\n  const { complaintlist } = storeToRefs(complaintListStore);\r\n  const { recentcomplaintlist } = storeToRefs(recentcomplaintListStore);\r\n  const { mycomplaintlist } = storeToRefs(myComplaintListStore);\r\n  \r\n  // 표시할 리스트를 computed로 정의\r\n  const displayedList = computed(() => isRecent.value ? mycomplaintlist.value : recentcomplaintlist.value);\r\n\r\n  const paginatedList = computed(() => {\r\n    const start = (currentPage.value - 1) * itemsPerPage;\r\n    const end = start + itemsPerPage;\r\n    return displayedList.value.slice(start, end);\r\n  });\r\n\r\n  const totalPages = computed(() => Math.ceil(displayedList.value.length / itemsPerPage));\r\n\r\n  function changePage(page) {\r\n    if (page >= 1 && page <= totalPages.value) {\r\n      currentPage.value = page;\r\n    }\r\n  }\r\n\r\n  function getRecentList() {\r\n    isRecent.value = !isRecent.value;\r\n    if(isRecent.value) {\r\n      btnname = '전체글';\r\n    }else{\r\n      btnname = '나의글';\r\n    }\r\n  }\r\n  // Helper method to format the date (YYYY-MM-DD)\r\n  function formatDate(datetime) {\r\n    return datetime.split(' ')[0]; // Returns the date part\r\n  }\r\n  \r\n  // Helper method to format the time (HH:MM:SS)\r\n  function formatTime(datetime) {\r\n    return datetime.split(' ')[1]; // Returns the time part\r\n  }\r\n  \r\n  // 번호에 따른 민원 글 데이터 불러오기\r\n  const complaintStore = useComplaintStore();\r\n  // eslint-disable-next-line no-unused-vars\r\n  const complaintone = storeToRefs(complaintStore);\r\n  \r\n  async function getComplaintByNo(key) {\r\n    await complaintStore.fetchComplaintone(key);\r\n    sessionStorage.setItem(\"complaintNo\", key);\r\n    router.replace({path: '/complaintInfoMobile'});\r\n  }\r\n \r\n  function goToComplaintPage() {\r\n    router.replace({ path: \"/complaintMobile\" });\r\n  }\r\n\r\n  function goToMap() {\r\n    router.replace({ path: \"/clMapMobile\"});\r\n  }\r\n\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #app {\r\n      height: 100vh;\r\n      width: 100vw;\r\n      overflow: hidden;\r\n    }\r\n  \r\n  \r\n   /* 메인 콘텐츠 설정 */\r\n   .app-main {\r\n    height: 100vh;\r\n    width: 100vw;\r\n      overflow-y: scroll;\r\n      background-color: #f5f5f5;\r\n    }\r\n  \r\n  .fs-9 {\r\n    font-size: 0.6rem !important; /* 폰트 크기 정의 및 우선 적용 */\r\n  }\r\n  \r\n  hr.separator-line {\r\n    border: 1px solid #ccc;\r\n    margin: 10px 0;\r\n    width: 100%;\r\n  }\r\n  \r\n  .row {\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .smaller-text {\r\n    font-size: 0.75rem;\r\n    white-space: nowrap;\r\n  }\r\n  \r\n  .card-container {\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n  }\r\n\r\n  .styled-button {\r\n  background: linear-gradient(#55995e, #3d7935);\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 25px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n  \r\n\r\n  /* 추가된 작은 화면에 대한 반응형 스타일 */\r\n  @media (max-width: 360px) {\r\n    .smaller-text {\r\n      font-size: 0.65rem;\r\n      white-space: normal; /* 텍스트 잘림 방지 */\r\n    }\r\n  \r\n    .card-title {\r\n      font-size: 1.2rem; /* 카드 제목 크기 줄임 */\r\n    }\r\n  \r\n    .btn {\r\n      padding: 5px 10px;\r\n      font-size: 0.8rem;\r\n    }\r\n  \r\n    .container {\r\n      padding-left: 5px;\r\n      padding-right: 5px;\r\n    }\r\n  \r\n    #map {\r\n      height: 200px; /* 지도 크기 줄임 */\r\n    }\r\n  \r\n    .card-body {\r\n      padding: 10px; /* 카드 내용에 더 작은 패딩 적용 */\r\n    }\r\n  \r\n    hr.separator-line {\r\n      margin: 5px 0; /* 구분선 마진 축소 */\r\n    }\r\n  \r\n    .col-5, .col-2, .col-3 {\r\n      text-align: left; /* 텍스트 정렬을 좌측으로 조정 */\r\n    }\r\n  \r\n    .card-container {\r\n      padding-left: 5px;\r\n      padding-right: 5px;\r\n    }\r\n  }\r\n\r\n  /* 기본 페이지 링크 색상 */\r\n  .pagination .page-link {\r\n    color: black;\r\n  }\r\n\r\n  /* 선택된(활성) 페이지 색상 변경 */\r\n  .pagination .page-item.active .page-link {\r\n    background-color: #04663f; /* success 색상 */\r\n    border-color: #04663f; /* success 색상 */\r\n    color: white; /* 텍스트 색상 */\r\n  }\r\n  </style>\r\n  ","import script from \"./ComplaintListView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ComplaintListView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ComplaintListView.vue?vue&type=style&index=0&id=5ad3e04c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5ad3e04c\"]])\n\nexport default __exports__"],"names":["apiInstance","instance","axios","create","baseURL","headers","api","async","getComplaintList","response","get","console","log","data","err","error","getRecentComplaintList","getComplaintByUserId","userId","getComplaintListByInst","institution","getPathList","insertComplaint","post","status","getComplaintByNo","complaintNo","getUserById","getCourseById","courseId","deleteComplaintByNo","delete","updateComplaintByNo","patch","getUserPostList","userNo","getProcessingByNo","processingComplaintNo","insertProcessing","updateProcessingByNo","useComplaintListStore","defineStore","complaintlist","ref","fetchComplaintList","value","useRecentComplaintListStore","recentcomplaintlist","fetchRecentComplaintList","useMyComplaintListStore","mycomplaintlist","fetchMyComplaintList","useManagingComplaintListStore","managingcomplaintlist","fetchManagingComplaintList","usePathList","pathList","fetchPathList","useComplaintStore","complaintone","fetchComplaintone","postNo","userpostlist","fetchUserPost","sessionStorage","getItem","itemsPerPage","complaintListStore","recentcomplaintListStore","myComplaintListStore","isRecent","btnname","loginUserId","localStorage","userNickNames","currentPage","onMounted","hasRefreshed","removeItem","setItem","window","location","reload","uniqueUserIds","Set","displayedList","map","item","Promise","all","userInfo","userNickName","storeToRefs","computed","paginatedList","start","end","slice","totalPages","Math","ceil","length","changePage","page","getRecentList","formatDate","datetime","split","formatTime","complaintStore","key","router","replace","path","goToComplaintPage","goToMap","__exports__"],"sourceRoot":""}