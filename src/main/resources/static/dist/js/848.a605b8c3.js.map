{"version":3,"file":"js/848.a605b8c3.js","mappings":"oyDAsOE,MAAMA,GAASC,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAERC,GAAWC,EAAAA,EAAAA,KAAI,GAGfC,GAAMD,EAAAA,EAAAA,IAAI,MACVE,GAAmBF,EAAAA,EAAAA,IAAI,IAC7B,IAAIG,EAAgB,KACpB,MAAMC,GAAgBJ,EAAAA,EAAAA,IAAI,MAEpBK,GAAgBL,EAAAA,EAAAA,IAAI,MAGpBM,IAAmBN,EAAAA,EAAAA,IAAI,MAEvBO,IAAUP,EAAAA,EAAAA,IAAI,WACpB,IAAIQ,IAAWR,EAAAA,EAAAA,IAAI,MAEnB,MAAMS,IAAiBT,EAAAA,EAAAA,IAAI,MAIrBU,GAAaC,IACjBJ,GAAQK,MAAQD,EAChBE,KAEa,YAATF,GACJG,GAAY,KACd,EAGA,SAASC,KACPpB,EAAOqB,KAAK,CAAEC,KAAM,sBAAuBC,MAAO,CAAEC,OAAQC,KAAKC,UAAUC,GAAWV,SACxF,CAEA,SAASW,KACP5B,EAAOqB,KAAK,CAAEC,KAAM,iBAAkBC,MAAO,CAAEC,OAAQC,KAAKC,UAAUC,GAAWV,SACnF,CAEA,SAASY,KACP7B,EAAOqB,KAAK,CAAEC,KAAM,UAAWC,MAAO,CAAEC,OAAQC,KAAKC,UAAUC,GAAWV,SAC5E,CAEA,SAASa,KACP9B,EAAOqB,KAAK,CAAEC,KAAM,yBACtB,CAEA,SAASS,KACP/B,EAAOqB,KAAK,CAAEC,KAAM,kBACtB,CAOA,SAASU,KACPrB,GAAiBM,MAAQ,CAC3B,CAIA,MAAMgB,IAAW5B,EAAAA,EAAAA,IAAI6B,OAAOC,YAAc,KAGpCC,GAA0BZ,IAC9Ba,QAAQC,IAAI,+BAAgCd,GAC5CxB,EAAOqB,KAAK,CACVC,KAAM,uBACNC,MAAO,CACLC,OAAQC,KAAKC,UAAUF,KAEzB,EAIJ,SAASL,GAAYoB,GACnBzB,GAAeG,MAAQsB,EAGnBC,GAAWC,SACbD,GAAWE,SAAQC,GAAUA,EAAOC,OAAO,QAC3CJ,GAAa,IAIc,OAAzB1B,GAAeG,OACjB4B,GAAY,wBAAyB,uBACrCA,GAAY,oBAAqB,uBACjCA,GAAY,8BAA+B,uBAG3CA,GAAY,8BAA+B,qBAE/C,CAEA,MAAMC,GAAQC,EASRpB,IAAatB,EAAAA,EAAAA,IAAIoB,KAAKuB,MAAMF,GAAMtB,SAGxC,SAASN,KACP,GAAsB,YAAlBN,GAAQK,MAAqB,CAC7B,MAAMgC,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAS,IAAMC,MAAMC,KAAKC,MAAK,KACpCjD,EAAIW,MAAQ,IAAIoC,MAAMC,KAAKE,IAAIN,SAASO,eAAe,OAAQ,CAC7DC,OAAQ,IAAIL,MAAMC,KAAKK,OAAO,kBAAmB,oBACjDC,MAAO,IAELtD,EAAIW,QACN4C,GAAsB,6BACtBhB,GAAY,wBAAyB,uBACrCA,GAAY,oBAAqB,uBACjCA,GAAY,8BAA+B,sBAC7C,IAEFI,EAAOa,IAAM,+FACbZ,SAASa,KAAKC,YAAYf,EAC9B,MAAO,GAAsB,UAAlBrC,GAAQK,MAAmB,CAClC,MAAMgC,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAS,IAAMC,MAAMC,KAAKC,MAAK,KACpC1C,GAASI,MAAQ,IAAIoC,MAAMC,KAAKE,IAAIN,SAASO,eAAe,YAAa,CACzEC,OAAQ,IAAIL,MAAMC,KAAKK,OAAO,kBAAmB,oBACjDC,MAAO,IAEH/C,GAASI,QACX4C,GAAsB,4BAA6BhD,GAASI,OAC5DgD,KACF,IAEFhB,EAAOa,IAAM,+FACbZ,SAASa,KAAKC,YAAYf,EAC5B,CACJ,CAGAiB,eAAeL,GAAsBM,EAAKC,EAAY9D,EAAIW,OACxD,IACE,MAAMoD,QAAiBC,MAAMH,GAC7B,IAAKE,EAASE,GAAI,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAElE,MAAMC,QAAoBL,EAASM,OACnCtC,QAAQC,IAAI,uBAAwBoC,GACpCE,GAAeF,EAAaN,EAC9B,CAAE,MAAOS,GACPxC,QAAQwC,MAAM,yBAA0BA,EAC1C,CACF,CAGA,SAASZ,KACFpD,GAASI,MAMd6D,GAAU7D,MAAMyB,SAAQlB,IACtB,MAAMuD,EAAMvD,EAAOwD,SACbC,EAAMzD,EAAO0D,UAGbC,EAAiB,IAAI9B,MAAMC,KAAKK,OAAOoB,EAAKE,GAE5CG,EAAW,0BACXC,EAAY,IAAIhC,MAAMC,KAAKgC,KAAK,GAAI,IACpCC,EAAc,CAAEC,OAAQ,IAAInC,MAAMC,KAAKmC,MAAM,GAAI,KACjDC,EAAc,IAAIrC,MAAMC,KAAKqC,YAAYP,EAAUC,EAAWE,GAG9D5C,EAAS,IAAIU,MAAMC,KAAKsC,OAAO,CACnCC,SAAUV,EACV7E,IAAKO,GAASI,MACd6E,MAAOtE,EAAOuE,WACdC,MAAON,IAIHO,EAAqB,IAAI5C,MAAMC,KAAK4C,WAAW,CACjDC,QAAS,udAIC3E,EAAO4E,8kBAcqD5E,EAAO6E,qGAEjB7E,EAAOuE,iDAInEO,gBAAgB,IAIpBjD,MAAMC,KAAKiD,MAAMC,YAAY7D,EAAQ,SAAS,KAC1CsD,EAAmBQ,SAErBR,EAAmBS,QAGnBT,EAAmBU,KAAK9F,GAASI,MAAO0B,EAC1C,GACA,IA/DAN,QAAQwC,MAAM,yBAiElB,CAGA,IAAIC,IAAYzE,EAAAA,EAAAA,IAAI,IAEtB,MAAMuG,GAAgB1C,UACpB,IACE,MAAMG,QAAiBwC,EAAAA,EAAMC,KAAK,iBAAiB,CACjDf,WAAYpE,GAAWV,MAAM8E,aAE/BjB,GAAU7D,MAAQoD,EAAS0C,IAC7B,CAAC,MAAMlC,GACLxC,QAAQC,IAAIuC,EACd,GAIA,IAAIrC,GAAa,GAGjB0B,eAAerB,GAAYsB,EAAKiB,GAChC,IAEE,MAAMf,QAAiBC,MAAMH,GAC7B,IAAKE,EAASE,GAAI,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAClE,MAAMuC,QAAmB3C,EAASM,OAG5BsC,EAAkBD,EAAWE,SAAS3E,QAAQ4E,IAClD,MAAMC,EAAaD,EAAQE,WAAWrG,KAChC+E,EAAaoB,EAAQE,WAAWC,SACtC,OACEvB,IAAepE,GAAWV,MAAM8E,aACN,OAAzBjF,GAAeG,OAAkBmG,IAAetG,GAAeG,QAAUmG,EAAW,IAKzFH,EAAgBvE,SAAS6E,IACvB,MAAMxC,EAAMwC,EAAKC,SAASC,YAAY,GAChCxC,EAAMsC,EAAKC,SAASC,YAAY,GAChCtC,EAAiB,IAAI9B,MAAMC,KAAKK,OAAOoB,EAAKE,GAGlD,IAAIyC,EAAgBtC,EACpB,OAAQmC,EAAKF,WAAWrG,MACtB,IAAK,KACH0G,EAAgB,uBAChB,MACF,IAAK,KACHA,EAAgB,uBAChB,MACF,IAAK,KACHA,EAAgB,sBAChB,MAIJ,MAAMrC,EAAY,IAAIhC,MAAMC,KAAKgC,KAAK,GAAI,IACpCC,EAAc,CAAEC,OAAQ,IAAInC,MAAMC,KAAKmC,MAAM,GAAI,KACjDC,EAAc,IAAIrC,MAAMC,KAAKqC,YAAY+B,EAAerC,EAAWE,GAEnE5C,EAAS,IAAIU,MAAMC,KAAKsC,OAAO,CACnCC,SAAUV,EACV7E,IAAKA,EAAIW,MACT6E,MAAOyB,EAAKF,WAAWM,QACvB3B,MAAON,IAGTlD,GAAWnB,KAAKsB,GAGhB,MAAMiF,EAAa,IAAIvE,MAAMC,KAAK4C,WAAW,CAC3CC,QAAS,6hBAOiBoB,EAAKF,WAAWrB,8aAMqCuB,EAAKF,WAAWM,wGAE7BJ,EAAKF,WAAWQ,mEAIlFvB,gBAAgB,IAIlBjD,MAAMC,KAAKiD,MAAMC,YAAY7D,EAAQ,SAAS,KACxCiF,EAAWnB,SACbmB,EAAWlB,QAEXkB,EAAWjB,KAAKrG,EAAIW,MAAO0B,EAC7B,GACA,GAEN,CAAE,MAAOkC,GACPxC,QAAQwC,MAAM,GAAGV,mBAAsBU,EACzC,CACF,CAGE,SAASD,GAAeF,EAAaN,GACnC,IAAI0D,EAAiB,GA4BrB,GA1BApD,EAAYwC,SAASxE,SAASyE,IAC5B,GAAIA,EAAQE,WAAWU,UAAYZ,EAAQE,WAAWU,SAASC,SAASrG,GAAWV,MAAM8E,YAAa,CACpG,IAAI0B,EAAc,GAGY,oBAA1BN,EAAQK,SAASxG,KACnBmG,EAAQK,SAASC,YAAY/E,SAAQuF,IACnCR,EAAcA,EAAYS,OAAOD,EAAK3H,KAAK6H,IAAK,CAC9ClD,IAAKkD,EAAM,GACXpD,IAAKoD,EAAM,GACXC,UAAWjB,EAAQE,WAAWgB,IAAM,MAClC,IAE6B,eAA1BlB,EAAQK,SAASxG,OAC1ByG,EAAcN,EAAQK,SAASC,YAAYnH,KAAK6H,IAAK,CACnDlD,IAAKkD,EAAM,GACXpD,IAAKoD,EAAM,GACXC,UAAWjB,EAAQE,WAAWgB,IAAM,OAIxC9H,EAAiBU,MAAQ6G,EACzBA,EAAiBA,EAAeI,OAAOT,EACzC,KAGEK,EAAerF,OAAS,EAAG,CAC7B,MAAM6F,EAAqBC,GAAiBT,EAAgB,IAC5DU,GAAcF,EAAoBlE,GAClCqE,GAAmBX,EACrB,MACEzF,QAAQC,IAAI,oBAEhB,CAGA,SAASiG,GAAiBd,EAAaiB,GACrC,MAAMC,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAYhF,OAAQmG,GAAKF,EAC3CC,EAAOtH,KAAKoG,EAAYoB,MAAMD,EAAGA,EAAIF,IAEvC,OAAOC,CACT,CAGA,SAASH,GAAcF,EAAoBlE,GACzC,IAAKA,EAEH,YADA/B,QAAQwC,MAAM,2BAKhB,MAAMiE,EAAkBR,EAAmBS,OAGrCC,EAAWF,EAAgBxI,KAAK6H,GAAU,IAAI9E,MAAMC,KAAKK,OAAOwE,EAAMpD,IAAKoD,EAAMlD,OAGnFb,IAAc9D,EAAIW,OACpBgI,GAAcH,GAEdR,EAAmB5F,SAASwG,IAC1B,GAAIA,EAAMzG,OAAS,EAAG,CACpB,MAAM0G,EAAaD,EAAM,GACnBE,EAAWF,EAAMA,EAAMzG,OAAS,GAChC4G,EAAQC,GAAeH,EAAYC,GACnCG,EAAQC,GAAgBH,GAGxBI,EAAgBP,EAAM5I,KAAI6H,GAAS,IAAI9E,MAAMC,KAAKK,OAAOwE,EAAMpD,IAAKoD,EAAMlD,OAE1EyE,EAAW,IAAIrG,MAAMC,KAAKqG,SAAS,CACvCC,KAAMH,EACNI,aAAc,EACdC,YAAaP,EACbQ,cAAe,GACfC,YAAa,UAGfN,EAAS9G,OAAOtC,EAAIW,MACtB,MAIOmD,IAAcvD,GAASI,QAChCoB,QAAQC,IAAI,sBAAuBgG,GAEnC5H,EAAcO,MAAQ,IAAIoC,MAAMC,KAAKqG,SAAS,CAC5CC,KAAMZ,EACNa,aAAc,EACdC,YAAa,UACbC,cAAe,GACfC,YAAa,UAGftJ,EAAcO,MAAM2B,OAAO/B,GAASI,QAItC,MAAMgJ,EAAS,IAAI5G,MAAMC,KAAK4G,aAC9BpB,EAAgBpG,SAAQyF,GAAS8B,EAAOE,OAAO,IAAI9G,MAAMC,KAAKK,OAAOwE,EAAMpD,IAAKoD,EAAMlD,QACtFb,EAAUgG,UAAUH,EACtB,CAIA,SAAShB,GAAcxB,GACrB,MAAMuB,EAAWvB,EAAYnH,KAAI6H,GAAS,IAAI9E,MAAMC,KAAKK,OAAOwE,EAAMpD,IAAKoD,EAAMlD,OAE3EoF,EAAe,IAAIhH,MAAMC,KAAKqG,SAAS,CAC3CC,KAAMZ,EACNa,aAAc,EACdC,YAAa,UACbC,cAAe,EACfC,YAAa,UAGfK,EAAazH,OAAOtC,EAAIW,MAC1B,CAEA,SAASqJ,GAAkBC,EAAOpC,EAAOV,GACvC,GAAc,IAAV8C,EAAa,OAAO,EAExB,MAAMC,EAAY/C,EAAY8C,EAAQ,GAEhCE,EAAI,KACJC,EAAOC,GAAQxC,EAAM,GAAKqC,EAAU,IACpCI,EAAOD,GAAQxC,EAAM,GAAKqC,EAAU,IAEpCK,EACJC,KAAKC,IAAIL,EAAO,GAAKI,KAAKC,IAAIL,EAAO,GACrCI,KAAKE,IAAIL,GAAQH,EAAU,KAAOM,KAAKE,IAAIL,GAAQxC,EAAM,KACzD2C,KAAKC,IAAIH,EAAO,GAAKE,KAAKC,IAAIH,EAAO,GAEjCK,EAAI,EAAIH,KAAKI,MAAMJ,KAAKK,KAAKN,GAAIC,KAAKK,KAAK,EAAIN,IACrD,OAAOJ,EAAIQ,CACb,CAEA,SAASG,GAA2BC,EAAQC,GAC1C,MAAMb,EAAI,OACJc,EAAOZ,GAAQU,EAAOtG,KACtByG,EAAOb,GAAQW,EAAOvG,KACtB0G,EAAWd,GAAQW,EAAOvG,IAAMsG,EAAOtG,KACvC2G,EAAWf,GAAQW,EAAOrG,IAAMoG,EAAOpG,KAEvC4F,EACJC,KAAKC,IAAIU,EAAW,GAAKX,KAAKC,IAAIU,EAAW,GAC7CX,KAAKE,IAAIO,GAAQT,KAAKE,IAAIQ,GAC1BV,KAAKC,IAAIW,EAAW,GAAKZ,KAAKC,IAAIW,EAAW,GAEzCT,EAAI,EAAIH,KAAKI,MAAMJ,KAAKK,KAAKN,GAAIC,KAAKK,KAAK,EAAIN,IAGrD,OAAOJ,EAAIQ,CACb,CAEA,SAAS3B,GAAeqC,EAAOC,GAE7B,MAAMC,EAAqBT,GACzB,CAAErG,IAAK4G,EAAM5G,IAAKE,IAAK0G,EAAM1G,KAC7B,CAAEF,IAAK6G,EAAI7G,IAAKE,IAAK2G,EAAI3G,MAIrB6G,EAAkBF,EAAIxD,UAAYuD,EAAMvD,UAGxC2D,EAAmBjB,KAAKK,KAC5BL,KAAKkB,IAAIH,EAAoB,GAAKf,KAAKkB,IAAIF,EAAiB,IAI9D,OAAID,EAAqB,EAChB,EAIDC,EAAkBC,EAAoB,GAChD,CAEA,SAASpB,GAAQsB,GACjB,OAAOA,GAAOnB,KAAKoB,GAAK,IACxB,CAGA,SAAS1C,GAAgBH,GACvB,OAAIA,EAAQ,GAAW,UACnBA,GAAS,GAAW,UACjB,SACT,CAGA,SAASZ,GAAmB1B,GAC1B,MAAMoF,EAAMjJ,SAASO,eAAe,kBAAkB2I,WAAW,MAG3DC,EAAYC,GAA6BvF,EAAKzG,KAAIiM,GAAS,CAACA,EAAMtH,IAAKsH,EAAMxH,QAC7EyH,EAAgBH,EAAUA,EAAU5J,OAAS,GAC7CgK,EAAc,IAAMD,EAGpBE,EAAkBL,EAAU/L,KAAIqM,GAAYA,EAAWF,IACvDG,EAAa7F,EAAKzG,KAAIiM,GAASA,EAAMnE,YAGvCyE,EAAwB,CAC1BC,GAAI,wBACJC,WAAaC,IACX,GAAIA,EAAMC,OAAOC,QAAQC,gBAAiB,CACxC,MAAMhB,EAAMa,EAAMb,IACZiB,EAAYJ,EAAMI,UAClBD,EAAkB,IAAIE,MAC5BF,EAAgBrJ,IAAMkJ,EAAMC,OAAOC,QAAQC,gBAG3CA,EAAgB/J,OAAS,WACvB+I,EAAImB,OACJnB,EAAIoB,YAAc,GAClBpB,EAAIqB,UAAUL,EAAiBC,EAAUK,KAAML,EAAUM,IAAKN,EAAUO,MAAQP,EAAUK,KAAML,EAAUQ,OAASR,EAAUM,KAC7HvB,EAAI0B,SACN,CACF,IAIArN,IACFA,EAAcsN,UACdtN,EAAgB,MAGlBA,EAAgB,IAAIuN,EAAAA,GAAM5B,EAAK,CAC7BnL,KAAM,OACN+F,KAAM,CACJiH,OAAQtB,EACRuB,SAAU,CACR,CACEC,MAAO,SACPnH,KAAM6F,EACNuB,YAAa,wBACbC,YAAa,EACbC,MAAM,KAIZnB,QAAS,CACPC,gBAAiB,iCACjBmB,OAAQ,CACNC,EAAG,CACDzI,MAAO,CACL0I,SAAS,EACTC,KAAM,UAERC,KAAM,CACJF,SAAU,GAEZG,MAAO,CACLC,UAAU,EACVC,cAAe,GACfC,YAAa,EACbC,YAAa,EACbC,SAAU,SAAS/N,GACjB,OAAOA,EAAMgO,QAAQ,GAAK,IAC5B,IAGJC,EAAG,CACDpJ,MAAO,CACL0I,SAAS,EACTC,KAAM,UAERC,KAAM,CACJF,SAAU,KAIhBW,YAAa,CACXC,KAAM,QACNC,WAAW,GAEbC,QAAS,CACPC,QAAS,CACPC,SAAQ,GAEVC,OAAQ,CACNjB,SAAS,IAGbkB,QAASA,CAACnJ,EAAOoJ,KACf,GAAIA,EAASlN,OAAS,EAAG,CACvB,MAAM8H,EAAQoF,EAAS,GAAGpF,MAC1BqF,GAAoBrF,EACtB,GAEFsF,QAASA,CAACtJ,EAAOoJ,KACf,GAAIA,EAASlN,OAAS,EAAG,CACvB,MAAM8H,EAAQoF,EAAS,GAAGpF,MAC1BqF,GAAoBrF,EACtB,IAGJ+E,QAAS,CAACzC,IAEd,CAEA,SAASP,GAA6B7E,GACpC,IAAIqI,EAAsB,GACtBtD,EAAgB,EAEpB,IAAK,IAAI5D,EAAI,EAAGA,EAAInB,EAAYhF,OAAQmG,IAClCA,EAAI,IACN4D,GAAiBlC,GAAkB1B,EAAGnB,EAAYmB,GAAInB,IAExDqI,EAAoBzO,KAAKmL,GAG3B,OAAOsD,CACT,CAGA,SAASF,GAAoBrF,EAAOnG,EAAY9D,EAAIW,OAClD,GAAKmD,GAKL,GAAImG,GAAS,GAAKA,EAAQhK,EAAiBU,MAAMwB,OAAQ,CACvD,MAAM8J,EAAQhM,EAAiBU,MAAMsJ,GAEjC9J,EAAcQ,OAChBR,EAAcQ,MAAM2B,OAAO,MAG7B,MAAMwC,EAAW,sBACX2K,EAAa,IAAI1M,MAAMC,KAAKgC,KAAK,GAAG,IACpCC,EAAc,CAAEC,OAAQ,IAAInC,MAAMC,KAAKmC,MAAM,GAAG,KAChDC,EAAc,IAAIrC,MAAMC,KAAKqC,YAAYP,EAAS2K,EAAWxK,GAEnE9E,EAAcQ,MAAQ,IAAIoC,MAAMC,KAAKsC,OAAO,CAC1CC,SAAU,IAAIxC,MAAMC,KAAKK,OAAO4I,EAAMxH,IAAKwH,EAAMtH,KACjDe,MAAON,IAGTjF,EAAcQ,MAAM2B,OAAOwB,GAC3BA,EAAU4L,MAAM,IAAI3M,MAAMC,KAAKK,OAAO4I,EAAMxH,IAAKwH,EAAMtH,KACzD,OAvBE5C,QAAQwC,MAAM,0CAwBlB,CAGA,MAAMoL,IAAe5P,EAAAA,EAAAA,IAAI,IACnB6P,IAAe7P,EAAAA,EAAAA,IAAI,IACnB8P,IAAc9P,EAAAA,EAAAA,IAAI,IAClB+P,IAAoB/P,EAAAA,EAAAA,IAAI,GAGxBgQ,IAAcC,EAAAA,EAAAA,KAAS,IAAML,GAAahP,MAAMmP,GAAkBnP,SAGlEsP,GAAchG,IAClB6F,GAAkBnP,MAAQsJ,CAAK,EAK3BiG,GAAmBtM,MAAOc,EAAUE,KACxC,IACE,MAAMuL,EAAS,mCACTpM,QAAiBwC,EAAAA,EAAM6J,IAC3B,wDAAwD1L,SAAgBE,WAAmBuL,KAG7FpO,QAAQC,IAAI+B,EAAS0C,MAErB,MAAM4J,EAAe,CAAC,EACtBtM,EAAS0C,KAAK6J,KAAKlO,SAAQmO,IACzB,MAAMC,EAAOD,EAAKE,OAAOC,MAAM,KAAK,GAC/BL,EAAaG,KAAOH,EAAaG,GAAQ,IAC9CH,EAAaG,GAAMzP,KAAKwP,EAAK,IAG/B,MAAMI,EAAkB,GACxBC,OAAOC,KAAKR,GAAcjO,SAAQoO,IAChC,MAAM,YAAEM,EAAW,QAAEC,EAAO,QAAEC,GAAYC,GAAoBZ,EAAaG,IACrEU,EAAa,CACjBV,OACAM,cACAC,UACAC,aACGX,EAAaG,GAAM,IAExBG,EAAgB5P,KAAKmQ,EAAW,IAGlCvB,GAAahP,MAAQgQ,EAErB,MAAMQ,EAAwBxB,GAAahP,MAAMX,KAAIoR,GACnD7K,EAAAA,EAAM6J,IACJ,2CAA2C1L,SAAgBE,UAAkBwM,EAAIZ,sBAI/Ea,QAA6BC,QAAQC,IAAIJ,GAC/CvB,GAAajP,MAAQ0Q,EAAqBrR,KAAIwR,GAAUC,GAAWD,EAAO/K,KAAKiL,QAAQC,WACvF9B,GAAYlP,MAAQ0Q,EAAqBrR,KAAIwR,GAAUC,GAAWD,EAAO/K,KAAKiL,QAAQE,SAExF,CAAE,MAAOrN,GACPxC,QAAQwC,MAAM,+BAAgCA,EAChD,GAIIsN,GAAmBrB,IACvB,MAAMsB,EAAgB,IAAIC,KAAKvB,GAC/B,OAAOsB,EAAcE,mBAAmB,QAAS,CAAEC,QAAS,SAAU,EAIlEC,GAAc1B,IAClB,MAAMsB,EAAgB,IAAIC,KAAKvB,GAC/B,MAAO,GAAGsB,EAAcK,WAAW,EAI/BC,GAAmBC,IACvB,MAAMC,EAAe,CACnBC,MAAO,4EACPC,OAAQ,KACRC,KAAM,MACNC,KAAM,MACNC,IAAK,KACLC,aAAc,KACdC,QAAS,MACTC,KAAM,MACNC,OAAQ,IACR,aAAc,MACd,gBAAiB,UAEnB,OAAOT,EAAaD,IAAgB,KAAK,EAIrCW,GAA+BC,IACnC,MAAMC,EAAsB,CAC1B,IAAK,kBACL,IAAK,cACL,IAAK,eACL,IAAK,UACL,IAAK,OACL,IAAK,UACL,IAAK,YACL,IAAK,kBACL,IAAK,eACL,IAAK,mBACL,IAAK,UACL,IAAK,MACL,IAAK,SACL,IAAK,UACL,IAAK,MACL,IAAK,SACL,IAAK,WACL,IAAK,cACL,IAAK,MACL,IAAK,OACL,IAAK,OACL,IAAK,OACL,IAAK,UACL,IAAK,QACL,IAAK,KACL,IAAK,WACL,IAAK,QACL,IAAK,WACL,IAAK,aACL,IAAK,QACL,IAAK,IACL,IAAK,OACL,IAAK,OACL,IAAK,WACL,IAAK,UACL,IAAK,OACL,IAAK,WACL,IAAK,QACL,IAAK,WACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,QACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,MACL,IAAK,KACL,IAAK,OACL,IAAK,kBACL,IAAK,eACL,IAAK,gBACL,IAAK,eACL,IAAK,iBACL,IAAK,OACL,IAAK,KACL,IAAK,OACL,IAAK,KACL,IAAK,KACL,IAAK,OACL,IAAK,KACL,IAAK,YACL,IAAK,QACL,IAAK,UACL,IAAK,WACL,IAAK,SACL,IAAK,OACL,IAAK,eACL,IAAK,KACL,IAAK,SACL,IAAK,KACL,IAAK,QACL,IAAK,QAEP,OAAOA,EAAoBD,IAAc,WAAW,EAGhDhC,GAAuBkC,IAC3B,MAAMC,EAAQD,EAAQnT,KAAIuQ,GAAQA,EAAK8C,KAAKC,OACtCxC,EAAcqC,EAAQ,GAAGE,KAAKC,KAC9BvC,EAAUvG,KAAK+I,OAAOH,GACtBpC,EAAUxG,KAAKgJ,OAAOJ,GAC5B,MAAO,CAAEtC,cAAaC,UAASC,UAAS,EAIpCS,GAAcgC,IAClB,MAAMjD,EAAO,IAAIuB,KAAK0B,GACtB,OAAOjD,EAAKkD,mBAAmB,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,SAAU,cAAe,EAgBzG,SAASC,KACPlS,OAAOmS,SAASC,KAAO,mBACzB,CAEA,SAASC,KACPnU,EAASa,OAAQ,CACnB,EAlBAuT,EAAAA,EAAAA,KAAU,KACR,MAAMC,EAAevU,EAAMqB,MAAMmT,SAAW,UAC5C9T,GAAQK,MAAQwT,EAClBvT,KACAsP,GAAiB,kBAAmB,oBACjCmE,MAAK,KACF3S,IAAiB,IAEnB4E,IAAe,IAYnB,MAAMgO,IAAkBvU,EAAAA,EAAAA,KAAI,GAEtBwU,GAAoBA,KACxBD,GAAgB3T,OAAS2T,GAAgB3T,MAGpC2T,GAAgB3T,OACnB6T,YAAW,KACTrM,GAAmBlI,EAAiBU,MAAM,GACzC,EACL,EAGI8T,IAAa1U,EAAAA,EAAAA,KAAI,GAEjB2U,GAAiBA,KACrBD,GAAW9T,OAAS8T,GAAW9T,MAE/B,MAAMgU,EAAe/R,SAASgS,cAAc,kBACxCH,GAAW9T,MACbgU,EAAaE,UAAUC,IAAI,QAE3BH,EAAaE,UAAUE,OAAO,OAChC,E,o7NCnnCJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O,qCCNAvH,EAAAA,GAAMwH,YAAYC,EAAAA,IAGlB,KAAezH,EAAK,E","sources":["webpack://frontend/./src/views/MobileMountainDetailView.vue","webpack://frontend/./src/views/MobileMountainDetailView.vue?66af","webpack://frontend/./node_modules/chart.js/auto/auto.js"],"sourcesContent":["<template>\r\n\r\n  <div id=\"infomain\">\r\n    <div class=\"row\" style=\"margin: 0px; padding: 0px;\">   \r\n      <!-- 검색창과 버튼 -->\r\n      <div class=\"review-search\" style=\"top: 30px;\">\r\n        <div class=\"search-container\">\r\n          <input type=\"text\" placeholder=\"검색\" v-model=\"searchQuery\" />\r\n          <button class=\"search-button\">\r\n            <img src=\"/images/돋보기white.png\" alt=\"Search\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <!-- zoom -->\r\n      <button id=\"zoom-button\" @click=\"Zoom\">\r\n      <img src=\"/images/내위치2.png\" alt=\"Zoom\">\r\n     </button>\r\n      \r\n      <!-- 버튼 그룹 : 시작 -->\r\n      <div class=\"btn-group\" role=\"group\" aria-label=\"Basic radio toggle button group\" style=\"position: fixed; top: 30px;  z-index: 21; justify-content: center;\">\r\n        <button class=\"button-item\" @click=\"gotomobilecourse()\" style=\"border-radius: 50%; height: 40px; width: 40px;margin-right: 16em;\"><img src=\"/images/뒤로가기.png\"  alt=\"돋보기 아이콘\" width=\"24\" height=\"24\"></button>\r\n  \r\n  \r\n        <div class=\"dropdown\" style=\"z-index: 100;\">\r\n          <a role=\"button\" @click=\"toggleDropdown\" aria-expanded=\"false\">\r\n            <img src=\"/images/hamburgerIcon.png\" id=\"hambugermenu\" alt=\"햄버거 아이콘\" width=\"40\" height=\"40\">\r\n          </a>\r\n          <div class=\"dropdown-menu\">\r\n            <button class=\"dropdown-item delay-1\" @click=\"goToCourseInfoViewPage(courseData)\">정보</button>\r\n            <button class=\"dropdown-item delay-2\" @click=\"goToCoursePreviewPage()\">영상</button>\r\n            <button class=\"dropdown-item delay-3\" @click=\"goToCourse3DPage()\">3D</button>\r\n            <button class=\"dropdown-item delay-3\" @click=\"goToBalancePage()\">비교</button>\r\n            <button class=\"dropdown-item delay-3\" @click=\"goToAccidentHeatmap()\">사고</button>\r\n            <button class=\"dropdown-item delay-3\" @click=\"goToRealtimeHeatmap()\">실시간</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 실족, 조난, 질환 버튼 -->\r\n      <div class=\"toggle-switch-container2\" style=\"z-index: 10;\"> <!-- 기존 z-index를 낮춰 설정 -->\r\n        <div class=\"toggle-switch2\" @click=\"toggleMap('default')\" :class=\"{ active: showMap === 'default' }\">\r\n          <img src=\"/images/기본.png\" alt=\"\" style=\"width: 16px; height: auto; margin-right: 5px;\"> 기본\r\n        </div>\r\n        <div class=\"toggle-switch2\" @click=\"toggleMap('photo')\" :class=\"{ active: showMap === 'photo' }\">\r\n          <img src=\"/images/사진.png\" alt=\"\" style=\"width: 16px; height: auto; margin-right: 5px;\"> 사진\r\n        </div>\r\n        <div class=\"toggle-switch2\" @click=\"applyFilter('실족')\" :class=\"{ active: selectedFilter === '실족' }\">\r\n          <img src=\"/images/strumble.png\" alt=\"\" style=\"width: 16px; height: auto; margin-right: 5px;\"> 실족\r\n        </div>\r\n        <div class=\"toggle-switch2\" @click=\"applyFilter('조난')\" :class=\"{ active: selectedFilter === '조난' }\">\r\n          <img src=\"/images/distress.png\" alt=\"\" style=\"width: 16px; height: auto; margin-right: 5px;\"> 조난\r\n        </div>\r\n        <div class=\"toggle-switch2\" @click=\"applyFilter('질환')\" :class=\"{ active: selectedFilter === '질환' }\">\r\n          <img src=\"/images/disease.png\" alt=\"\" style=\"width: 16px; height: auto; margin-right: 5px;\"> 질환\r\n        </div>\r\n      </div>\r\n          \r\n      <div v-if=\"showMap === 'default'\" id=\"map\" style=\"width: 100%; height: 700px; margin: 0px;\">\r\n        \r\n        <!-- 메인 페이지 내용 -->\r\n      <button id=\"showHelpButton\" @click=\"showHelp = true\">?</button>\r\n        <div class=\"map-legend ms-4\">\r\n          \r\n          <div class=\"legend-item\">\r\n            <div class=\"legend-icon\" style=\"background-color:#FF4500;\"></div>\r\n            <span>오르막</span>\r\n          </div>\r\n          \r\n          <div class=\"legend-item\">\r\n            <div class=\"legend-icon\" style=\"background-color:#32CD32;\"></div>\r\n            <span>평지</span>\r\n          </div>\r\n          \r\n          <div class=\"legend-item\">\r\n            <div class=\"legend-icon\" style=\"background-color:#1E90FF;\"></div>\r\n            <span>내리막</span>\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n      <div v-else-if=\"showMap === 'photo'\" id=\"photoMap\" style=\"width: 100%; height: 750px; margin: 0px;\"></div>\r\n      \r\n      <!-- 버튼 그룹 -->\r\n    </div>\r\n  </div>\r\n  \r\n  <!-- 드래그 패널 영역 -->\r\n  <div\r\n  class=\"drag-panel\"\r\n  :style=\"{ top: panelTop + 'px' }\"\r\n  @mouseenter=\"disableScroll\"\r\n  @mouseleave=\"enableScroll\">\r\n  \r\n  <div class=\"drag-handle\"></div>\r\n  <div class=\"content\">\r\n    \r\n      <!-- 슬라이드 토글 버튼 추가 -->\r\n      <div class=\"toggle-switch\" @click=\"toggleTestContent\">\r\n        <div :class=\"['toggle-thumb', { active: showTestContent }]\"></div>\r\n      </div>\r\n  \r\n      \r\n      <!-- <h4 >{{ friend.name }}</h4>\r\n      <p>{{ friend.location }}</p>\r\n      <p>{{ friend.distance }} km</p> \r\n      {{ averageDifficultyText }} 난이도 변수-->\r\n  \r\n      <div v-if=\"!showTestContent\" class=\"row\">\r\n  \r\n        <div  id=\"courseinfo\">\r\n          <p class=\"image-course-name\" id=\"courseName\">{{ courseData?.courseName }} 코스</p>\r\n          <div class=\"difficulty-text\" id=\"courseAverage\" style=\"margin-bottom: 5px;\">\r\n            난이도: {{ averageDifficultyText }} · \r\n            <i class=\"bi bi-star-fill image-rating-star\" style=\"color: #ffd400;\"></i> \r\n            3.5\r\n          </div>\r\n        </div>\r\n  \r\n        <canvas id=\"elevationChart\"></canvas>\r\n  \r\n      </div>\r\n        <!-- 메인 페이지 내용 -->\r\n      <button id=\"showHelpButton\" @click=\"showHelp = true\">?</button>      \r\n      <!-- 조건부 렌더링으로 콘텐츠 표시 -->\r\n  \r\n    <div class=\"row\" style=\"margin: 0px; padding: 0px;\" v-if=\"showTestContent\">\r\n      \r\n               <!-- 날씨 : 시작 -->   \r\n      <div class=\"weather-forecast\" v-if=\"dailyWeather.length > 0\">\r\n  \r\n        <div class=\"date-selector\">\r\n  \r\n          <div v-for=\"(day, index) in dailyWeather.slice(0, 6)\" :key=\"index\" class=\"date-button-wrapper\">\r\n  \r\n            <div class=\"day-label\">{{ formatDayOfWeek(day.date) }}</div> <!-- 요일 표시 -->\r\n  \r\n            <button\r\n              :class=\"['date-button', { active: selectedDateIndex === index }]\"\r\n              @click=\"selectDate(index)\"\r\n            >\r\n              {{ formatDate(day.date) }}\r\n            </button>\r\n  \r\n          </div>\r\n        </div>\r\n\r\n  <div class=\"forecast-details\" v-if=\"selectedDay\">\r\n    <div class=\"d-flex\">\r\n  \r\n      <div class=\"row\">\r\n        \r\n        <div class=\"d-flex\" style=\"margin-top: -1rem; margin-left: 0.4rem;\">\r\n          <p class=\"current-temperature\">{{ Math.round(selectedDay.currentTemp - 273.15) }}°</p>\r\n          <p class=\"weather-icon\" v-html=\"getWeatherEmoji(selectedDay.weather[0].main)\"></p>\r\n        </div>\r\n        \r\n        \r\n        <div class=\"row\">\r\n  \r\n          <p class=\"description\" >{{ translateWeatherDescription(selectedDay.weather[0].id) }}</p>\r\n  \r\n          <div class=\"temperature-range d-flex\">\r\n            <p class=\"min-temp\">최저: {{ Math.round(selectedDay.minTemp - 273.15) }}°</p>\r\n            <p class=\"max-temp\">최고: {{ Math.round(selectedDay.maxTemp - 273.15) }}°</p>\r\n          </div>\r\n          \r\n          <p class=\"forecast-date\">오늘은 {{ formatDayOfWeek(selectedDay.date) }}요일 입니다 </p>\r\n          \r\n        </div>\r\n        \r\n      </div>\r\n      \r\n      <div class=\"row\" style=\"margin-left: -14rem; margin-top: 3rem; max-height: 110px;\">               \r\n        <div class=\"rain-info d-flex\">\r\n          <div class=\"rain-icon\" :style=\"{ '--rain-level': selectedDay.pop * 100 + '%' }\"></div>\r\n          <p class=\"rain-chance\" style=\"margin-top: 1rem; margin-left: 1.5rem;\">{{ Math.round(selectedDay.pop * 100) }}%</p>\r\n        </div>\r\n        \r\n        <div class=\"sun-info\" >\r\n          <p id=\"sunrise\"><img src=\"/images/sunrise.png\" alt=\"sunrise\" class=\"icon-small\" >일출: {{ sunriseTimes[selectedDateIndex] }}</p>\r\n          <p id=\"sunset\"><img src=\"/images/sunset.png\" alt=\"sunset\" class=\"icon-small\" >일몰: {{ sunsetTimes[selectedDateIndex] }}</p>\r\n        </div>      \r\n        \r\n      </div>\r\n  \r\n    </div>\r\n  </div>\r\n  </div>\r\n  </div>\r\n  </div>\r\n      \r\n  \r\n      <!-- 팝업 오버레이 -->\r\n      <div v-if=\"showHelp\" class=\"overlay\" @click.self=\"closeHelp\" >\r\n        <div class=\"popup-content\">\r\n          <p id=\"popupTitle\">고도 확인</p>\r\n          <div class=\"popup-text\">\r\n  \r\n            <div class=\"d-flex text\">\r\n              <img src=\"/images/로딩.gif\" style=\"width: 80px; height: 80px;\">\r\n              <span>경사도에 손가락을 올려보세요.</span>\r\n            </div>\r\n  \r\n            <div class=\"d-flex text\">\r\n              <img src=\"/images/로딩.gif\" style=\"width: 80px; height: 80px;\">\r\n              <span>탭에서 정보를 확인해보세요. </span>\r\n            </div>\r\n  \r\n            <div class=\"d-flex text\">\r\n              <img src=\"/images/로딩.gif\" style=\"width: 80px; height: 80px;\">\r\n              <span>영상을 확인해보세요. </span>\r\n            </div>\r\n  \r\n          </div>\r\n            <img src=\"/images/ModalX.png\" style=\"width: 20px; height: 20px;\" @click=\"closeHelp\" id=\"closepopup\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n    \r\n      \r\n    </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import Chart from 'chart.js/auto';\r\n  import axios from \"axios\";\r\n  import { defineProps } from 'vue';\r\n  import { useRouter, useRoute } from 'vue-router';\r\n\r\n  const router = useRouter(); // 라우터 객체\r\n  const route = useRoute(); // 현재 경로 정보\r\n  \r\n  const showHelp = ref(false);  // 팝업 표시 여부\r\n  \r\n  /* global kakao */\r\n  const map = ref(null);\r\n  const routeCoordinates = ref([]);\r\n  let chartInstance = null;\r\n  const currentMarker = ref(null);\r\n  \r\n  const modalPolyline = ref(null);  // 모달 지도 경로\r\n  \r\n  \r\n  const selectedDayIndex = ref(null);\r\n  \r\n  const showMap = ref('default');  // 기본 지도를 기본값으로 설정\r\n  let photoMap = ref(null);\r\n  \r\n  const selectedFilter = ref('전체');\r\n\r\n\r\n  // 지도 토글 함수\r\n  const toggleMap = (type) => {\r\n    showMap.value = type;\r\n    initializeMap();\r\n\r\n    if (type === 'default') {\r\n    applyFilter('전체'); \r\n  }\r\n  };\r\n  \r\n  function goToCoursePreviewPage() {\r\n    router.push({ name: 'mobileCoursePreview', query: { course: JSON.stringify(courseData.value) } });\r\n  }\r\n  \r\n  function goToCourse3DPage() {\r\n    router.push({ name: 'mobileCourse3d', query: { course: JSON.stringify(courseData.value) }});\r\n  }\r\n\r\n  function goToBalancePage() {\r\n    router.push({ name: 'balance', query: { course: JSON.stringify(courseData.value) }});\r\n  }\r\n\r\n  function goToRealtimeHeatmap() {\r\n    router.push({ name: 'mobilerealtimeheatmap'});\r\n  }\r\n\r\n  function goToAccidentHeatmap() {\r\n    router.push({ name: 'mobileaccident'});\r\n  }\r\n  \r\n  // 요일 선택 관련 데이터\r\n  // 요일 데이터 설정 함수\r\n  \r\n  \r\n  // 현재 날짜를 기준으로 자동 선택\r\n  function autoSelectToday() {\r\n    selectedDayIndex.value = 0; // 오늘 날짜에 맞춰 첫 번째 버튼 선택\r\n  }\r\n  \r\n  \r\n  // 상태 정의\r\n  const panelTop = ref(window.innerHeight - 270); // 드래그 패널 위치 (기본적으로 하단)\r\n  \r\n  \r\n  const goToCourseInfoViewPage = (course) => {\r\n    console.log(\"Navigating with course data:\", course); \r\n    router.push({\r\n      name: 'mobilecourseinfoview',\r\n      query: {\r\n        course: JSON.stringify(course),\r\n      },\r\n    });\r\n  };\r\n  \r\n  // 버튼 클릭\r\n  function applyFilter(filter) {\r\n    selectedFilter.value = filter;\r\n    \r\n    // 기존 마커 지우기\r\n    if (mapMarkers.length) {\r\n      mapMarkers.forEach(marker => marker.setMap(null));\r\n      mapMarkers = [];\r\n    }\r\n    \r\n    // 전체버튼 클릭시 마커 띄우기\r\n    if (selectedFilter.value === '전체') {\r\n      loadMarkers(\"/data/헬기장spot.geojson\", '/images/helipad.png');\r\n      loadMarkers(\"/data/화장실.geojson\", '/images/toilets.png');\r\n      loadMarkers(\"/data/2023산악사고_인왕산2.geojson\", '/images/danger.png');\r\n    } else {\r\n      // Otherwise, load only markers for the selected filter\r\n      loadMarkers(\"/data/2023산악사고_인왕산2.geojson\", '/images/danger.png');\r\n    }\r\n  }\r\n\r\n  const props = defineProps({\r\n  course: {\r\n    type: String,\r\n    required: true\r\n  }\r\n  \r\n  });\r\n  \r\n  // props로 전달된 mountain 데이터를 JSON으로 파싱\r\n  const courseData = ref(JSON.parse(props.course));\r\n  \r\n  // 지도 초기화\r\n  function initializeMap() {\r\n    if (showMap.value === 'default') {\r\n        const script = document.createElement('script');\r\n        script.onload = () => kakao.maps.load(() => {\r\n          map.value = new kakao.maps.Map(document.getElementById('map'), {\r\n            center: new kakao.maps.LatLng(37.66433293993584, 127.01160029114365),\r\n            level: 5,\r\n          });\r\n          if (map.value) {\r\n            loadGeoJSONFromServer('/data/인왕산ele copy.geojson');\r\n            loadMarkers(\"/data/헬기장spot.geojson\", '/images/helipad.png');\r\n            loadMarkers(\"/data/화장실.geojson\", '/images/toilets.png');\r\n            loadMarkers(\"/data/2023산악사고_인왕산2.geojson\", '/images/danger.png');\r\n          }\r\n        });\r\n        script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=333bda7da18df138fb4d9b3e5cf351c4&autoload=false';\r\n        document.head.appendChild(script);\r\n    } else if (showMap.value === 'photo') { // 여기에\r\n        const script = document.createElement('script');\r\n        script.onload = () => kakao.maps.load(() => {\r\n          photoMap.value = new kakao.maps.Map(document.getElementById('photoMap'), {\r\n          center: new kakao.maps.LatLng(37.66433293993584, 127.01160029114365),\r\n          level: 5,\r\n          });\r\n          if (photoMap.value) {\r\n            loadGeoJSONFromServer('/data/인왕산ele copy.geojson', photoMap.value);\r\n            loadMarkersToPhotoMap();\r\n          }\r\n        });\r\n        script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=333bda7da18df138fb4d9b3e5cf351c4&autoload=false';\r\n        document.head.appendChild(script);\r\n      }\r\n  }\r\n  \r\n  // GeoJSON 데이터 로드 함수\r\n  async function loadGeoJSONFromServer(url, targetMap = map.value) {\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n      \r\n      const geojsonData = await response.json();\r\n      console.log('GeoJSON data loaded:', geojsonData);  // GeoJSON 데이터를 콘솔에 출력해 확인\r\n      processGeoJSON(geojsonData, targetMap);  // GeoJSON 데이터를 처리하여 경로를 그리는 함수 호출\r\n    } catch (error) {\r\n      console.error('GeoJSON 파일 로드 중 에러 발생:', error);\r\n    }\r\n  }\r\n  \r\n  // 마커를 photoMap에 추가하는 함수\r\n  function loadMarkersToPhotoMap() {\r\n    if (!photoMap.value) {\r\n      console.error(\"photoMap이 초기화되지 않았습니다.\");\r\n      return;\r\n    }\r\n  \r\n    // comCourse 데이터에서 좌표 정보를 가져와 마커를 생성\r\n    comCourse.value.forEach(course => {\r\n      const lat = course.latitude;\r\n      const lng = course.longitude;\r\n  \r\n      // 마커의 위치 설정\r\n      const markerPosition = new kakao.maps.LatLng(lat, lng);\r\n\r\n      const imageSrc = '/images/danger-icon.png';\r\n      const imageSize = new kakao.maps.Size(35, 45);\r\n      const imageOption = { offset: new kakao.maps.Point(12, 35) };\r\n      const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);\r\n  \r\n      // 마커 생성\r\n      const marker = new kakao.maps.Marker({\r\n        position: markerPosition,\r\n        map: photoMap.value,\r\n        title: course.courseName, // 마커에 코스 이름 표시\r\n        image: markerImage\r\n      });\r\n  \r\n      // 이미지가 포함된 InfoWindow 콘텐츠 설정\r\n      const infowindowPhotoMap = new kakao.maps.InfoWindow({\r\n          content: `\r\n    <div style=\"display: flex; flex-direction: column; align-items: center; width: 150px; height: auto; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); font-family: Arial, sans-serif; overflow: hidden; border: 1px solid #ddd; border-radius: 12px; z-index: 500;\">\r\n      <!-- 사진 영역 -->\r\n      <div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 150px; overflow: hidden; border-bottom: 2px solid #ced4da;\">\r\n        <img src=\"${course.communityUrl}\" alt=\"사진\" \r\n          style=\"\r\n            width: 130px; \r\n            height: 120px; \r\n            object-fit: cover; \r\n            border: 1px solid black; \r\n            border-radius: 10px;\r\n            box-sizing: border-box; /* 여백과 크기 조정 방지 */\r\n            position: relative;\r\n          \">\r\n      </div>\r\n      <!-- 텍스트 영역 -->\r\n      <div style=\"text-align: center; padding: 10px; margin-top: -10px;\">\r\n        <p style=\"font-size: 14px; font-weight: bold; margin: 0; color: #333;\">\r\n          <img src=\"/images/window산.png\" style=\"width: 16px; height: 16px;\"/> ${course.communityTitle}\r\n        </p>\r\n        <p style=\"font-size: 12px; color: #666; margin: 5px 0 0;\">- ${course.courseName} -</p>\r\n      </div>\r\n    </div>\r\n  `,\r\n          disableAutoPan: true, // 인포윈도우 표시로 인해 지도가 이동하지 않도록 설정\r\n        });\r\n  \r\n      // 마커 클릭으로 infowindow 토글 방식\r\n      kakao.maps.event.addListener(marker, 'click', () => {\r\n      if (infowindowPhotoMap.getMap()) {\r\n        // infowindow가 현재 열려 있는 경우 닫기\r\n        infowindowPhotoMap.close();\r\n      } else {\r\n        // infowindow가 닫혀 있는 경우 열기\r\n        infowindowPhotoMap.open(photoMap.value, marker);\r\n      }\r\n    });\r\n    });\r\n  }\r\n\r\n  // 커뮤니티 코스 불러오기\r\n  let comCourse = ref([]);\r\n\r\nconst requestCourse = async () => {\r\n  try{\r\n    const response = await axios.post('/api/comCourse',{\r\n      courseName: courseData.value.courseName\r\n    });\r\n    comCourse.value = response.data;\r\n  }catch(error){\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n  \r\n  let mapMarkers = []\r\n  \r\n  // 마커 추가\r\n  async function loadMarkers(url, imageSrc) {\r\n  try {\r\n    // GeoJSON 데이터 로드\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    const markerData = await response.json();\r\n\r\n    // 필터링된 마커 데이터 가져오기\r\n    const filteredMarkers = markerData.features.filter((feature) => {\r\n      const markerType = feature.properties.type;\r\n      const courseName = feature.properties.MNTN_NM2;\r\n      return (\r\n        courseName === courseData.value.courseName &&\r\n        (selectedFilter.value === '전체' || markerType === selectedFilter.value || !markerType)\r\n      );\r\n    });\r\n\r\n    // 필터링된 마커를 지도에 추가\r\n    filteredMarkers.forEach((spot) => {\r\n      const lat = spot.geometry.coordinates[1];\r\n      const lng = spot.geometry.coordinates[0];\r\n      const markerPosition = new kakao.maps.LatLng(lat, lng);\r\n\r\n      // 마커 이미지 설정\r\n      let finalImageSrc = imageSrc;\r\n      switch (spot.properties.type) {\r\n        case '실족':\r\n          finalImageSrc = '/images/strumble.png';\r\n          break;\r\n        case '조난':\r\n          finalImageSrc = '/images/distress.png';\r\n          break;\r\n        case '질환':\r\n          finalImageSrc = '/images/disease.png';\r\n          break;\r\n      }\r\n\r\n      // 마커 생성\r\n      const imageSize = new kakao.maps.Size(35, 45);\r\n      const imageOption = { offset: new kakao.maps.Point(12, 35) };\r\n      const markerImage = new kakao.maps.MarkerImage(finalImageSrc, imageSize, imageOption);\r\n\r\n      const marker = new kakao.maps.Marker({\r\n        position: markerPosition,\r\n        map: map.value,\r\n        title: spot.properties.MNTN_NM,\r\n        image: markerImage,\r\n      });\r\n\r\n      mapMarkers.push(marker); // 새 마커 배열에 추가\r\n\r\n      // 인포윈도우 설정\r\n      const infowindow = new kakao.maps.InfoWindow({\r\n        content: `\r\n          <div style=\"display: flex; flex-direction: column; align-items: center; width: 150px; height: auto; \r\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); font-family: Arial, sans-serif; overflow: hidden; \r\n          border: 1px solid #ddd; border-radius: 12px; z-index: 500;\">\r\n            <!-- 사진 영역 -->\r\n            <div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 150px; \r\n            overflow: hidden; border-bottom: 2px solid #ced4da;\">\r\n              <img src=\"/images/${spot.properties.image}\" alt=\"사진\" \r\n              style=\"width: 130px; height: 120px; object-fit: cover; border: 1px solid black; border-radius: 10px;\" />\r\n            </div>\r\n            <!-- 텍스트 영역 -->\r\n            <div style=\"text-align: center; padding: 10px;\">\r\n              <p style=\"font-size: 14px; font-weight: bold; margin: 0; color: #333;\">\r\n                <img src=\"/images/window산.png\" style=\"width: 16px; height: 16px;\" /> ${spot.properties.MNTN_NM}\r\n              </p>\r\n              <p style=\"font-size: 12px; color: #666; margin: 5px 0;\">- ${spot.properties.SAFE_SPOT2} -</p>\r\n            </div>\r\n          </div>\r\n        `,\r\n        disableAutoPan: true, // 인포윈도우 표시로 인해 지도가 이동하지 않도록 설정\r\n      });\r\n\r\n      // 마커 클릭 이벤트\r\n      kakao.maps.event.addListener(marker, 'click', () => {\r\n        if (infowindow.getMap()) {\r\n          infowindow.close();\r\n        } else {\r\n          infowindow.open(map.value, marker);\r\n        }\r\n      });\r\n    });\r\n  } catch (error) {\r\n    console.error(`${url} 파일 로드 중 에러 발생:`, error);\r\n  }\r\n}\r\n  \r\n  \r\n  function processGeoJSON(geojsonData, targetMap) {\r\n    let allCoordinates = [];\r\n  \r\n    geojsonData.features.forEach((feature) => {\r\n      if (feature.properties.PMNTN_NM && feature.properties.PMNTN_NM.includes(courseData.value.courseName)) {\r\n        let coordinates = [];\r\n  \r\n        // MultiLineString을 처리하기 위해 중첩 배열을 펼침\r\n        if (feature.geometry.type === 'MultiLineString') {\r\n          feature.geometry.coordinates.forEach(line => {\r\n            coordinates = coordinates.concat(line.map((coord) => ({\r\n              lng: coord[0],\r\n              lat: coord[1],\r\n              elevation: feature.properties.DN || 0\r\n            })));\r\n          });\r\n        } else if (feature.geometry.type === 'LineString') {\r\n          coordinates = feature.geometry.coordinates.map((coord) => ({\r\n            lng: coord[0],\r\n            lat: coord[1],\r\n            elevation: feature.properties.DN || 0\r\n          }));\r\n        }\r\n  \r\n        routeCoordinates.value = allCoordinates;  // 경로 좌표를 할당\r\n        allCoordinates = allCoordinates.concat(coordinates);\r\n      }\r\n    });\r\n  \r\n    if (allCoordinates.length > 0) {\r\n      const groupedCoordinates = groupCoordinates(allCoordinates, 12); // 5개씩 그룹화\r\n      addRouteLayer(groupedCoordinates, targetMap);\r\n      drawElevationChart(allCoordinates);\r\n    } else {\r\n      console.log('유효한 구간 데이터가 없습니다.');\r\n    }\r\n  }\r\n  \r\n  // 좌표 그룹화 함수\r\n  function groupCoordinates(coordinates, groupSize) {\r\n    const groups = [];\r\n    for (let i = 0; i < coordinates.length; i += groupSize) {\r\n      groups.push(coordinates.slice(i, i + groupSize));\r\n    }\r\n    return groups;\r\n  }\r\n  \r\n  // 경로 레이어 추가 함수\r\n  function addRouteLayer(groupedCoordinates, targetMap) {\r\n    if (!targetMap) {\r\n      console.error(\"targetMap이 초기화되지 않았습니다.\");\r\n      return;\r\n    }\r\n  \r\n    // 중첩 배열을 평평하게 만든 flatCoordinates 생성\r\n    const flatCoordinates = groupedCoordinates.flat();\r\n  \r\n    // 지도에 그릴 경로 생성\r\n    const linePath = flatCoordinates.map((coord) => new kakao.maps.LatLng(coord.lat, coord.lng));\r\n  \r\n    // map.value에 경로를 그리는 경우\r\n    if (targetMap === map.value) {\r\n      drawBaseRoute(flatCoordinates); // 기본 경로 그리기\r\n  \r\n      groupedCoordinates.forEach((group) => {\r\n        if (group.length > 1) {\r\n          const startPoint = group[0];\r\n          const endPoint = group[group.length - 1];\r\n          const slope = calculateSlope(startPoint, endPoint);\r\n          const color = getColorBySlope(slope);\r\n  \r\n          // 각 그룹에 대한 경로 생성\r\n          const groupLinePath = group.map(coord => new kakao.maps.LatLng(coord.lat, coord.lng));\r\n  \r\n          const polyline = new kakao.maps.Polyline({\r\n            path: groupLinePath,\r\n            strokeWeight: 5,\r\n            strokeColor: color,\r\n            strokeOpacity: 0.8,\r\n            strokeStyle: 'solid'\r\n          });\r\n  \r\n          polyline.setMap(map.value); // 경로를 map에 그리기\r\n        }\r\n      });\r\n  \r\n    // modalMap.value에 경로를 그리는 경우\r\n    } else if (targetMap === photoMap.value) {\r\n      console.log('groupedCoordinates:', groupedCoordinates);\r\n  \r\n      modalPolyline.value = new kakao.maps.Polyline({\r\n        path: linePath, // 평평하게 만든 경로 사용\r\n        strokeWeight: 5,\r\n        strokeColor: '#00FF00',\r\n        strokeOpacity: 0.8,\r\n        strokeStyle: 'solid',\r\n      });\r\n  \r\n      modalPolyline.value.setMap(photoMap.value); // 모달 지도에 경로 설정\r\n    }\r\n  \r\n    // 지도 경계를 경로에 맞게 설정\r\n    const bounds = new kakao.maps.LatLngBounds();\r\n    flatCoordinates.forEach(coord => bounds.extend(new kakao.maps.LatLng(coord.lat, coord.lng)));\r\n    targetMap.setBounds(bounds); // 타겟 맵에 맞게 경계 조정\r\n  }\r\n  \r\n  \r\n  // 새로운 함수: 기본 녹색 경로를 그리는 함수\r\n  function drawBaseRoute(coordinates) {\r\n    const linePath = coordinates.map(coord => new kakao.maps.LatLng(coord.lat, coord.lng));\r\n  \r\n    const basePolyline = new kakao.maps.Polyline({\r\n      path: linePath,\r\n      strokeWeight: 5,\r\n      strokeColor: '#32CD32', // 기본 경로 색상 (녹색)\r\n      strokeOpacity: 1, // 기본 경로는 약간 투명하게 설정\r\n      strokeStyle: 'solid'\r\n    });\r\n  \r\n    basePolyline.setMap(map.value);\r\n  }\r\n  \r\n  function calculateDistance(index, coord, coordinates) {\r\n    if (index === 0) return 0; // 첫 번째 좌표의 거리는 0\r\n  \r\n    const prevCoord = coordinates[index - 1];\r\n  \r\n    const R = 6371; // 지구 반지름 (km)\r\n    const dLat = deg2rad(coord[1] - prevCoord[1]);\r\n    const dLng = deg2rad(coord[0] - prevCoord[0]);\r\n  \r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(deg2rad(prevCoord[1])) * Math.cos(deg2rad(coord[1])) *\r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n  \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // 거리 반환\r\n  }\r\n  \r\n  function calculateHaversineDistance(coord1, coord2) {\r\n    const R = 6371e3; // 지구 반지름 (미터 단위)\r\n    const lat1 = deg2rad(coord1.lat);\r\n    const lat2 = deg2rad(coord2.lat);\r\n    const deltaLat = deg2rad(coord2.lat - coord1.lat);\r\n    const deltaLon = deg2rad(coord2.lng - coord1.lng);\r\n  \r\n    const a =\r\n      Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n      Math.cos(lat1) * Math.cos(lat2) *\r\n      Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  \r\n    // 두 지점 간의 거리 반환 (미터 단위)\r\n    return R * c;\r\n  }\r\n  \r\n  function calculateSlope(start, end) {\r\n    // 하버사인 공식을 사용하여 두 지점 간의 수평 거리 (지구 곡률 반영)\r\n    const horizontalDistance = calculateHaversineDistance(\r\n      { lat: start.lat, lng: start.lng },\r\n      { lat: end.lat, lng: end.lng }\r\n    );\r\n  \r\n    // 고도 차이 계산\r\n    const elevationChange = end.elevation - start.elevation;\r\n  \r\n    // 피타고라스 정리를 사용해 두 지점 간의 대각선 거리 계산\r\n    const diagonalDistance = Math.sqrt(\r\n      Math.pow(horizontalDistance, 2) + Math.pow(elevationChange, 2)\r\n    );\r\n  \r\n    // 수평 거리가 너무 짧으면 경사도 계산을 무시하고 기본 경사도 0으로 설정\r\n    if (horizontalDistance < 1) { // 예시: 수평 거리가 10m 미만일 경우\r\n      return 0; // 경사도 0으로 간주\r\n    }\r\n  \r\n    // 경사도 = 고도 차이 / 대각선 거리 * 100\r\n    return (elevationChange / diagonalDistance) * 100;\r\n  }\r\n  \r\n  function deg2rad(deg) {\r\n  return deg * (Math.PI / 180);\r\n  }\r\n  \r\n  // 경사도에 따른 색상 결정 함수\r\n  function getColorBySlope(slope) {\r\n    if (slope > 30) return '#FF4500'; // 급경사 (빨강)\r\n    if (slope < -15) return '#1E90FF'; // 급한 내리막 (파랑)\r\n    return '#32CD32'; // 평지에 가까움 (초록)\r\n  }\r\n  \r\n  \r\n  function drawElevationChart(data) {\r\n    const ctx = document.getElementById('elevationChart').getContext('2d');\r\n  \r\n    // 누적 거리 계산 (기존의 총 거리를 계산)\r\n    const distances = calculateCumulativeDistances(data.map(point => [point.lng, point.lat]));\r\n    const totalDistance = distances[distances.length - 1]; // 총 거리\r\n    const scaleFactor = 645 / totalDistance; // 645m에 맞추기 위한 스케일링 비율\r\n  \r\n    // 각 누적 거리를 스케일링\r\n    const scaledDistances = distances.map(distance => distance * scaleFactor);\r\n    const elevations = data.map(point => point.elevation); // y축: 고도\r\n  \r\n  // 배경 이미지를 넣기 위한 커스텀 플러그인 정의\r\n  const backgroundImagePlugin = {\r\n      id: 'backgroundImagePlugin',\r\n      beforeDraw: (chart) => {\r\n        if (chart.config.options.backgroundImage) {\r\n          const ctx = chart.ctx;\r\n          const chartArea = chart.chartArea;\r\n          const backgroundImage = new Image();\r\n          backgroundImage.src = chart.config.options.backgroundImage;\r\n  \r\n          // 이미지가 로드된 후 캔버스에 그리기\r\n          backgroundImage.onload = function () {\r\n            ctx.save();\r\n            ctx.globalAlpha = 0.4; // 불투명도 설정 (0.0: 완전히 투명, 1.0: 완전히 불투명)\r\n            ctx.drawImage(backgroundImage, chartArea.left, chartArea.top, chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\r\n            ctx.restore();\r\n          };\r\n        }\r\n      },\r\n    };\r\n  \r\n    if (chartInstance) {\r\n      chartInstance.destroy(); // 기존 차트 제거\r\n      chartInstance = null;\r\n    }\r\n  \r\n    chartInstance = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: scaledDistances, // x축: 스케일링된 누적 거리\r\n        datasets: [\r\n          {\r\n            label: '고도 (m)',\r\n            data: elevations,  // y축: 고도\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 2,\r\n            fill: false,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        backgroundImage: '/images/mountainbackground.png',\r\n        scales: {\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: '거리 (m)', // x축 제목 (미터 단위로 표시)\r\n            },\r\n            grid: {\r\n              display : false,\r\n            },\r\n            ticks: {\r\n              autoSkip: true, // 자동으로 레이블을 생략함\r\n              maxTicksLimit: 10, // 최대 레이블 개수를 10개로 제한\r\n              maxRotation: 0, // 레이블을 비스듬히 하지 않음\r\n              minRotation: 0, // 레이블을 수평으로 유지\r\n              callback: function(value) {\r\n                return value.toFixed(2) + ' m'; // 원하는 형식으로 레이블 포맷\r\n              }\r\n            }\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: '고도 (m)', // y축 제목\r\n            },\r\n            grid: {\r\n              display : false,\r\n            }\r\n          },\r\n        },\r\n        interaction: {\r\n          mode: 'index',\r\n          intersect: false,\r\n        },\r\n        plugins: {\r\n          tooltip: {\r\n            enabled:false,\r\n          },\r\n          legend: {\r\n            display: false,\r\n          }\r\n        },\r\n        onClick: (event, elements) => {\r\n          if (elements.length > 0) {\r\n            const index = elements[0].index;\r\n            highlightRouteOnMap(index); // 클릭 시 지도에서 경로 강조\r\n          }\r\n        },\r\n        onHover: (event, elements) => {\r\n          if (elements.length > 0) {\r\n            const index = elements[0].index;\r\n            highlightRouteOnMap(index); // 마우스 오버 시 경로 강조\r\n          }\r\n        },\r\n      },\r\n      plugins: [backgroundImagePlugin],\r\n    });\r\n  }\r\n  \r\n  function calculateCumulativeDistances(coordinates) {\r\n    let cumulativeDistances = [];\r\n    let totalDistance = 0;\r\n  \r\n    for (let i = 0; i < coordinates.length; i++) {\r\n      if (i > 0) {\r\n        totalDistance += calculateDistance(i, coordinates[i], coordinates);\r\n      }\r\n      cumulativeDistances.push(totalDistance);\r\n    }\r\n  \r\n    return cumulativeDistances;\r\n  }\r\n  \r\n  // 경로 상의 마커 강조 함수\r\n  function highlightRouteOnMap(index, targetMap = map.value) {\r\n    if (!targetMap) {\r\n      console.error(\"지도 객체가 초기화되지 않았습니다. targetMap이 null입니다.\");\r\n      return;  // targetMap이 null이면 함수 실행 중지\r\n    }\r\n  \r\n    if (index >= 0 && index < routeCoordinates.value.length) {\r\n      const point = routeCoordinates.value[index];\r\n  \r\n      if (currentMarker.value) {\r\n        currentMarker.value.setMap(null);\r\n      }\r\n  \r\n      const imageSrc = '/images/running.png';\r\n      const imagesSize = new kakao.maps.Size(35,45);\r\n      const imageOption = { offset: new kakao.maps.Point(17,45) };\r\n      const markerImage = new kakao.maps.MarkerImage(imageSrc,imagesSize,imageOption);\r\n  \r\n      currentMarker.value = new kakao.maps.Marker({\r\n        position: new kakao.maps.LatLng(point.lat, point.lng),\r\n        image: markerImage,\r\n      });\r\n  \r\n      currentMarker.value.setMap(targetMap);\r\n      targetMap.panTo(new kakao.maps.LatLng(point.lat, point.lng));  // targetMap이 null이 아닐 때만 panTo 호출\r\n    }\r\n  }\r\n  \r\n  // 날씨\r\n  const dailyWeather = ref([]);\r\n  const sunriseTimes = ref([]);\r\n  const sunsetTimes = ref([]);\r\n  const selectedDateIndex = ref(0); // 선택된 날짜 인덱스\r\n  \r\n  // 선택된 날짜의 날씨 데이터\r\n  const selectedDay = computed(() => dailyWeather.value[selectedDateIndex.value]);\r\n  \r\n  // 날짜 선택 함수\r\n  const selectDate = (index) => {\r\n    selectedDateIndex.value = index;\r\n  };\r\n  \r\n  \r\n  // 날씨 정보 조회\r\n  const fetchWeatherData = async (latitude, longitude) => {\r\n    try {\r\n      const apiKey = \"5c48577c775896e979e7bcc3b225b730\";\r\n      const response = await axios.get(\r\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${apiKey}`\r\n      );\r\n  \r\n      console.log(response.data); // 응답 확인용 콘솔 로그\r\n  \r\n      const groupedByDay = {};\r\n      response.data.list.forEach(item => {\r\n        const date = item.dt_txt.split(\" \")[0];\r\n        if (!groupedByDay[date]) groupedByDay[date] = [];\r\n        groupedByDay[date].push(item);\r\n      });\r\n  \r\n      const selectedWeather = [];\r\n      Object.keys(groupedByDay).forEach(date => {\r\n        const { currentTemp, minTemp, maxTemp } = calculateMinMaxTemp(groupedByDay[date]);\r\n        const daySummary = {\r\n          date,\r\n          currentTemp,\r\n          minTemp,\r\n          maxTemp,\r\n          ...groupedByDay[date][0],\r\n        };\r\n        selectedWeather.push(daySummary);\r\n      });\r\n  \r\n      dailyWeather.value = selectedWeather;\r\n  \r\n      const sunriseSunsetPromises = dailyWeather.value.map(day =>\r\n        axios.get(\r\n          `https://api.sunrise-sunset.org/json?lat=${latitude}&lng=${longitude}&date=${day.date}&formatted=0`\r\n        )\r\n      );\r\n  \r\n      const sunriseSunsetResults = await Promise.all(sunriseSunsetPromises);\r\n      sunriseTimes.value = sunriseSunsetResults.map(result => formatTime(result.data.results.sunrise));\r\n      sunsetTimes.value = sunriseSunsetResults.map(result => formatTime(result.data.results.sunset));\r\n  \r\n    } catch (error) {\r\n      console.error(\"Error fetching weather data:\", error);\r\n    }\r\n  };\r\n  \r\n  // 요일 변환 함수\r\n  const formatDayOfWeek = (date) => {\r\n    const formattedDate = new Date(date);\r\n    return formattedDate.toLocaleDateString(\"ko-KR\", { weekday: \"short\" });\r\n  };\r\n  \r\n  // 날짜 포맷 변환 함수\r\n  const formatDate = (date) => {\r\n    const formattedDate = new Date(date);\r\n    return `${formattedDate.getDate()}`;\r\n  };\r\n  \r\n  // 날씨 이모티콘 반환 함수\r\n  const getWeatherEmoji = (weatherMain) => {\r\n    const weatherIcons = {\r\n      Clear: '<img src=\"/images/로딩.gif\" alt=\"Clear\" style=\"width: 80px; height: 80px;\">',\r\n      Clouds: \"☁️\",\r\n      Rain: \"🌧️\",\r\n      Snow: \"🌨️\",\r\n      Fog: \"🌁\",\r\n      Thunderstorm: \"⛈️\",\r\n      Drizzle: \"🌦️\",\r\n      Mist: \"🌫️\",\r\n      breeze: \"༄\",\r\n      \"Few Clouds\": \"🌥️\",\r\n      \"freezing rain\": \"🌧️➜❄️\",\r\n    };\r\n    return weatherIcons[weatherMain] || \"🌥️\";\r\n  };\r\n  \r\n  // 날씨 ID를 한국어 설명으로 변환하는 함수\r\n  const translateWeatherDescription = (weatherId) => {\r\n    const weatherDescriptions = {\r\n      200: \"가벼운 비를 동반한 천둥구름\",\r\n      201: \"비를 동반한 천둥구름\",\r\n      202: \"폭우를 동반한 천둥구름\",\r\n      210: \"약한 천둥구름\",\r\n      211: \"천둥구름\",\r\n      212: \"강한 천둥구름\",\r\n      221: \"불규칙적 천둥구름\",\r\n      230: \"약한 연무를 동반한 천둥구름\",\r\n      231: \"연무를 동반한 천둥구름\",\r\n      232: \"강한 안개비를 동반한 천둥구름\",\r\n      300: \"가벼운 안개비\",\r\n      301: \"안개비\",\r\n      302: \"강한 안개비\",\r\n      310: \"가벼운 적은비\",\r\n      311: \"적은비\",\r\n      312: \"강한 적은비\",\r\n      313: \"소나기와 안개비\",\r\n      314: \"강한 소나기와 안개비\",\r\n      321: \"소나기\",\r\n      500: \"약한 비\",\r\n      501: \"중간 비\",\r\n      502: \"강한 비\",\r\n      503: \"매우 강한 비\",\r\n      504: \"극심한 비\",\r\n      511: \"우박\",\r\n      520: \"약한 소나기 비\",\r\n      521: \"소나기 비\",\r\n      522: \"강한 소나기 비\",\r\n      531: \"불규칙적 소나기 비\",\r\n      600: \"가벼운 눈\",\r\n      601: \"눈\",\r\n      602: \"강한 눈\",\r\n      611: \"진눈깨비\",\r\n      612: \"소나기 진눈깨비\",\r\n      615: \"약한 비와 눈\",\r\n      616: \"비와 눈\",\r\n      620: \"약한 소나기 눈\",\r\n      621: \"소나기 눈\",\r\n      622: \"강한 소나기 눈\",\r\n      701: \"박무\",\r\n      711: \"연기\",\r\n      721: \"연무\",\r\n      731: \"모래 먼지\",\r\n      741: \"안개\",\r\n      751: \"모래\",\r\n      761: \"먼지\",\r\n      762: \"화산재\",\r\n      771: \"돌풍\",\r\n      781: \"토네이도\",\r\n      800: \"구름 한 점 없는 맑은 하늘\",\r\n      801: \"약간의 구름이 낀 하늘\",\r\n      802: \"드문드문 구름이 낀 하늘\",\r\n      803: \"구름이 거의 없는 하늘\",\r\n      804: \"구름으로 뒤덮인 흐린 하늘\",\r\n      900: \"토네이도\",\r\n      901: \"태풍\",\r\n      902: \"허리케인\",\r\n      903: \"한랭\",\r\n      904: \"고온\",\r\n      905: \"바람부는\",\r\n      906: \"우박\",\r\n      951: \"바람이 거의 없는\",\r\n      952: \"약한 바람\",\r\n      953: \"부드러운 바람\",\r\n      954: \"중간 세기 바람\",\r\n      955: \"신선한 바람\",\r\n      956: \"센 바람\",\r\n      957: \"돌풍에 가까운 센 바람\",\r\n      958: \"돌풍\",\r\n      959: \"심각한 돌풍\",\r\n      960: \"폭풍\",\r\n      961: \"강한 폭풍\",\r\n      962: \"허리케인\"\r\n    };\r\n    return weatherDescriptions[weatherId] || \"알 수 없는 날씨\";\r\n  };\r\n  \r\n  const calculateMinMaxTemp = (dayData) => {\r\n    const temps = dayData.map(item => item.main.temp);\r\n    const currentTemp = dayData[0].main.temp;\r\n    const minTemp = Math.min(...temps);\r\n    const maxTemp = Math.max(...temps);\r\n    return { currentTemp, minTemp, maxTemp };\r\n  };\r\n  \r\n  // 시간 포맷 변환 함수\r\n  const formatTime = (time) => {\r\n    const date = new Date(time);\r\n    return date.toLocaleTimeString(\"ko-KR\", { hour: \"2-digit\", minute: \"2-digit\", timeZone: \"Asia/Seoul\" });\r\n  };\r\n  \r\n  // 컴포넌트 마운트될 때 초기화 작업\r\n  onMounted(() => {\r\n    const queryMapType = route.query.mapType || 'default'; // 기본값은 'default'\r\n    showMap.value = queryMapType\r\n  initializeMap();\r\n  fetchWeatherData(37.66433293993584, 127.01160029114365)\r\n    .then(() => {\r\n        autoSelectToday(); // 날씨 데이터를 불러온 후 자동으로 오늘 날짜 선택\r\n      });\r\n      requestCourse();\r\n  });\r\n  \r\n  \r\n  function gotomobilecourse(){\r\n    window.location.href = '/mobilecourseview'\r\n  }\r\n  \r\n  function closeHelp() {\r\n    showHelp.value = false;  // 팝업 닫기\r\n  }\r\n  \r\n  const showTestContent = ref(false); // 초기 상태를 false로 설정하여 canvas를 표시\r\n  \r\n  const toggleTestContent = () => {\r\n    showTestContent.value = !showTestContent.value;\r\n  \r\n    // showTestContent가 false일 때 차트를 다시 그립니다.\r\n    if (!showTestContent.value) {\r\n      setTimeout(() => {\r\n        drawElevationChart(routeCoordinates.value);\r\n      }, 0); // DOM이 업데이트된 후 차트를 그리기 위해 약간의 딜레이 추가\r\n    }\r\n  };\r\n\r\n  const isMenuOpen = ref(false);\r\n\r\n  const toggleDropdown = () => {\r\n    isMenuOpen.value = !isMenuOpen.value;\r\n\r\n    const dropdownMenu = document.querySelector('.dropdown-menu');\r\n    if (isMenuOpen.value) {\r\n      dropdownMenu.classList.add('show');\r\n    } else {\r\n      dropdownMenu.classList.remove('show');\r\n    }\r\n  };\r\n\r\n  \r\n  </script>\r\n  \r\n  \r\n  \r\n  \r\n  <style scoped>\r\n  @font-face {\r\n    font-family: 'TheJamsil5Bold';\r\n    src: url('https://fastly.jsdelivr.net/gh/projectnoonnu/noonfonts_2302_01@1.0/TheJamsil5Bold.woff2') format('woff2');\r\n    font-weight: 700;\r\n    font-style: normal;\r\n  }\r\n  \r\n  .toggle-switch {\r\n    width: 50px;\r\n    height: 24px;\r\n    background-color: #ccc;\r\n    border-radius: 12px;\r\n    cursor: pointer;\r\n    position: relative;\r\n    transition: background-color 0.3s;\r\n    margin-left: 17.8rem;\r\n  }\r\n  \r\n  .toggle-switch .toggle-thumb {\r\n    width: 22px;\r\n    height: 22px;\r\n    background-color: #fff;\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    top: 1px;\r\n    left: 1px;\r\n    transition: transform 0.3s;\r\n  }\r\n  \r\n  .toggle-switch .toggle-thumb.active {\r\n    transform: translateX(26px);\r\n  }\r\n  \r\n  .toggle-switch.active {\r\n    background-color: #4caf50;\r\n  }\r\n  \r\n  .toggle-switch-container2 {\r\n    position: fixed;\r\n    z-index: 21;\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    margin-top: 2.4rem;\r\n    width: 100%;\r\n    top: 40px;\r\n  }\r\n  \r\n  .toggle-switch2 {\r\n    width: 70px;\r\n    height: 25px;\r\n    background-color: #ffffff;\r\n    border-radius: 15px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n    font-family: 'TheJamsil4Bold';\r\n    font-weight: 400;\r\n    font-size: 13px;\r\n    color: #000;\r\n    transition: background-color 0.3s, color 0.3s;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\r\n    z-index: 15;\r\n    border: solid 1px #868e96;\r\n  }\r\n  \r\n  .toggle-switch2.active {\r\n    background-color: #327C2B; /* 활성화된 상태의 색상 */\r\n    color: #fff; /* 활성화된 상태의 글자 색상 */\r\n  }\r\n  \r\n  \r\n  .ModalTitle{\r\n    font-family: 'HakgyoansimBadasseugiTTF-L';\r\n    font-weight: bold;\r\n    font-style: normal;\r\n    font-size: 30px;\r\n  }\r\n  \r\n  #ModalContent{\r\n    font-family: 'HakgyoansimBadasseugiTTF-L';\r\n    font-weight: bolder;\r\n    font-style: normal;\r\n    font-size: 18px;\r\n    margin-bottom: 1em;\r\n  }\r\n  \r\n  .container {\r\n  position: relative;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  }\r\n  \r\n  /* 버튼 그룹 스타일 */\r\n  .button-group {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 2;\r\n  }\r\n  \r\n  .btn-group-vertical {\r\n    position: absolute;\r\n    font-size: 0.5rem !important;\r\n    top: 100px;\r\n    right: 0;\r\n    z-index: 2;\r\n    width: 85px;\r\n  }\r\n  \r\n  .button-item {\r\n  width: 45px;\r\n  height: 45px;\r\n  background-color: #ffffff;\r\n  color: #000000;\r\n  border: none;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\r\n  border-radius: 0; /* 기본 라운드 제거 */\r\n  }\r\n  \r\n  /* 첫 번째 버튼에 위쪽만 라운드 적용 */\r\n  .first-button {\r\n  border-top-left-radius: 30px;\r\n  border-top-right-radius: 30px;\r\n  }\r\n  \r\n  /* 중간 버튼 경계선 스타일 적용 */\r\n  .middle-button {\r\n  border-top: 1px solid #d3d3d3; /* 위쪽 경계선만 살짝 회색 */\r\n  }\r\n  \r\n  /* 마지막 버튼에 아래쪽만 라운드 적용 */\r\n  .last-button {\r\n  border-bottom-left-radius: 30px;\r\n  border-bottom-right-radius: 30px;\r\n  }\r\n  \r\n  .drag-panel {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  /* height: calc(150vh - 300px); */\r\n  background-color: #ffffff;\r\n  border-top-left-radius: 20px;\r\n  border-top-right-radius: 20px;\r\n  transition: top 0.3s ease-in-out;\r\n  cursor: grab;\r\n  overflow: hidden;\r\n  z-index: 30; /* 드래그 패널을 지도 위에 오도록 설정 */\r\n  box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.3);\r\n  margin-top: 0.1rem;\r\n  }\r\n  \r\n  .drag-handle {\r\n  width: 20px;\r\n  height: 2px;\r\n  background-color: #ccc;\r\n  margin: 10px auto;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  }\r\n  \r\n  .content {\r\n  padding: 5px;\r\n  \r\n  /* height: calc(100vh - 100px); */\r\n  }\r\n  \r\n  .card-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  }\r\n  \r\n  .mobileInfor{\r\n  display: row;\r\n  align-items: center;\r\n  background-color: #f9f9f9;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .mobileInfor:hover {\r\n    transform: scale(1);\r\n    cursor:pointer;\r\n  }\r\n  \r\n  .card-image {\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n  }\r\n  \r\n  .card-content {\r\n  text-align: left;\r\n  }\r\n  \r\n  #map {\r\n  height: 600px;\r\n  width: 100%;\r\n  position: relative;\r\n  }\r\n  \r\n  #courseinfo{\r\n    margin-left: 1.6rem;\r\n    margin-top: -1.8rem;\r\n  }\r\n  \r\n  #courseName{\r\n    font-family: 'TheJamsil5Bold';\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n  }\r\n  \r\n  #courseAverage{\r\n    font-family: 'TheJamsil3Bold';\r\n    font-weight: 300;\r\n    font-size: 12px;\r\n    margin-top: -1rem;\r\n  }\r\n  \r\n  canvas {\r\n  height: 150px;\r\n  width: 100%;\r\n\r\n  }\r\n  \r\n  #sideInformationBar {\r\n  background-color: #f9f9f9;\r\n  }\r\n  \r\n  .day-buttons {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 15px;\r\n  }\r\n  \r\n  /* 날씨 예보 관련 스타일 */\r\n  .weather-forecast {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  max-width: 100%;\r\n  margin-top: 1rem\r\n  }\r\n  \r\n  .forecast-header {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  }\r\n  \r\n  .forecast-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(6, 1fr); /* 5일 날씨에 맞게 5개의 칸으로 */\r\n  gap: 5px;\r\n  width: 100%; /* 부모 요소의 너비를 꽉 채움 */\r\n  }\r\n  \r\n  .forecast-item {\r\n  text-align: center;\r\n  padding: 5px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  width: 300px;\r\n  background-color: #f7f7f7; /* 배경 색상 추가로 가독성 향상 */\r\n  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1); /* 가벼운 그림자 추가 */\r\n  }\r\n  \r\n  .forecast-date {\r\n  font-weight: bold;\r\n  margin-bottom: 10px; /* 날짜와 온도 사이 간격 추가 */\r\n  }\r\n  \r\n  .forecast-info {\r\n  margin-top: 10px;\r\n  }\r\n  \r\n  .current-temperature {\r\n  font-family: 'TheJamsil5Bold';\r\n  font-weight: 700;\r\n  font-size: 16px;\r\n  color: #333; /* 텍스트 색상을 진하게 */\r\n  }\r\n  \r\n  .weather-icon {\r\n  font-size: 30px; /* 날씨 이모티콘 크기를 키움 */\r\n  margin-top: 10px;\r\n  margin-left: 0.4rem;\r\n  }\r\n  \r\n  .description {\r\n  margin-top: -1.5rem;\r\n  margin-left: 0.45rem;\r\n  font-family: 'TheJamsil4Bold';\r\n  font-weight: 300;\r\n  font-size: 14px;\r\n  color: #333; /* 텍스트 색상을 진하게 */\r\n  }\r\n  \r\n  .temperature-range {\r\n  margin-top: -0.7rem;\r\n  margin-left: 0.45rem;\r\n  }\r\n  \r\n  .sun-info {\r\n  margin-top: 3.6rem;\r\n  margin-left: 2.2rem;\r\n  width: 90%;\r\n  }\r\n  \r\n  #sunrise{\r\n    margin-top: -2.5rem;\r\n    margin-bottom: -0.1rem;\r\n    margin-left: 2.2rem;\r\n    font-family: 'TheJamsil4Bold';\r\n    font-weight: 300;\r\n    font-size: 13px;\r\n  }\r\n  \r\n  #sunset{\r\n    margin-left: 2.2rem;\r\n    margin-top: -3rem;\r\n    margin-bottom: -0.5rem;\r\n    font-family: 'TheJamsil4Bold';\r\n    font-weight: 300;\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .icon-small {\r\n  width: 15px;\r\n  height: 15px;\r\n  vertical-align: middle;\r\n  margin-right: 5px; /* 아이콘과 텍스트 간의 간격 추가 */\r\n  opacity: 0.7;\r\n  margin-top: -0.3rem;\r\n  }\r\n  \r\n  .rain-info {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 10px;\r\n  margin-left: 7.5rem;\r\n  margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .rain-icon {\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: rgba(173, 216, 230, 0.5);\r\n  border-radius: 50%;\r\n  position: relative;\r\n  overflow: hidden;\r\n  }\r\n  \r\n  .rain-icon::before {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: var(--rain-level, 0);\r\n  background-color: rgb(78, 130, 182);\r\n  }\r\n  \r\n  .rain-chance {\r\n    font-family: 'TheJamsil5Bold';\r\n    font-weight: 400;\r\n    font-size: 14px;\r\n  }\r\n  \r\n  /* 범례 스타일 */\r\n  .map-legend {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      margin-top: 23em;\r\n      margin-right: 255px;\r\n      background-color: rgba(255, 255, 255, 0.8); /* 반투명 배경 */\r\n      padding: 5px;\r\n      border-radius: 10px;\r\n      font-size: 12px;\r\n      z-index: 10; /* 지도 위에 표시되도록 설정 */\r\n      font-family: 'TheJamsil4Bold';\r\n      font-weight: 400;\r\n      font-size: 16px;\r\n      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\r\n      \r\n    }\r\n  \r\n    .legend-item {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 3px;\r\n      margin-top: 2px;\r\n      margin-right: 0.5rem;\r\n      font-family: 'TheJamsil4Bold';\r\n      font-weight: 400;\r\n      font-size: 14px;\r\n    }\r\n  \r\n    .legend-icon {\r\n      width: 10px;\r\n      height: 10px;\r\n      margin-right: 5px;\r\n      margin-left: 5px;\r\n      border-radius: 10px;\r\n    }\r\n  \r\n    .map-check1{\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 60px;\r\n      height: 30px;\r\n      margin-top: 2.5em;\r\n      margin-left: 7em;\r\n      border: none;\r\n      background-color: white;\r\n      font-family: 'TheJamsil4Bold';\r\n      font-weight: 400;\r\n      font-size: 16px;\r\n      color: #000;\r\n    }\r\n  \r\n  \r\n    .map-check2{\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 60px;\r\n      height: 30px;\r\n      margin-top: 2.5em;\r\n      margin-left: 12em;\r\n      border:none;\r\n      background-color: white;\r\n      font-family: 'TheJamsil4Bold';\r\n      font-weight: 400;\r\n      font-size: 16px;\r\n      color: #000;\r\n    }\r\n  \r\n  \r\n    /* 드롭다운 애니메이션 스타일 */\r\n  \r\n  #hambugermenu{\r\n    background-color: white;\r\n    border-radius: 50%; /* 왼쪽 위 */\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\r\n    margin-left: 4em;\r\n    border: solid 0.5px #868e96;\r\n  }\r\n  \r\n  /* 드롭다운 메뉴 스타일 */\r\n.dropdown-menu {\r\n  display: flex; /* 버튼들을 가로로 정렬 */\r\n  flex-direction: column; /* 세로로 정렬 */\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 5px; /* 버튼 간격 추가 */\r\n  min-width: unset;\r\n  width: auto; /* 메뉴 크기는 버튼 크기에 맞춤 */\r\n  height: auto;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;\r\n  border: none;\r\n  margin-left: 60px;\r\n  background-color: transparent;\r\n  z-index: 50;\r\n}\r\n\r\n/* 드롭다운 메뉴 활성화 상태 */\r\n.dropdown-menu.show {\r\n  opacity: 1;\r\n  visibility: visible;\r\n  transform: translateY(0);\r\n  z-index: 30;\r\n}\r\n\r\n/* 드롭다운 아이템 버튼 스타일 */\r\n.dropdown-item {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 45px; /* 버튼 크기 */\r\n  height: 45px;\r\n  background-color: #ffffff; /* 버튼 배경색 */\r\n  border-radius: 50%; /* 버튼을 원형으로 설정 */\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 버튼 그림자 */\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: transform 0.3s, opacity 0.3s;\r\n  font-size: 14px;\r\n  font-family: 'TheJamsil4Bold';\r\n  color: black;\r\n  opacity: 0; /* 초기 상태를 투명하게 설정 */\r\n  z-index: 30;\r\n  border: solid 1px #327C2B;\r\n}\r\n\r\n/* 드롭다운 아이템 호버 상태 */\r\n.dropdown-item:hover {\r\n  transform: scale(1.1); /* 호버 시 버튼 확대 */\r\n  background-color: #327C2B; /* 버튼 배경색 변경 */\r\n  color: white; /* 글자 색 변경 */\r\n  z-index: 30;\r\n}\r\n\r\n/* 버튼 등장 애니메이션 */\r\n.dropdown-item {\r\n  opacity: 0;\r\n  transform: translateY(-10px);\r\n  animation: dropdownFadeIn 0.4s forwards ease;\r\n  z-index: 30;\r\n}\r\n\r\n/* 각 항목별 딜레이 */\r\n.delay-1 {\r\n  animation-delay: 0.1s;\r\n}\r\n.delay-2 {\r\n  animation-delay: 0.4s;\r\n}\r\n.delay-3 {\r\n  animation-delay: 0.5s;\r\n}\r\n\r\n/* 드롭다운 페이드인 애니메이션 */\r\n@keyframes dropdownFadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n  \r\n  /* 전체 오버레이 */\r\n  .overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    z-index: 9999; /* z-index를 가장 높게 설정 */\r\n    opacity: 0;\r\n    animation: fadeIn 0.8s forwards; /* 천천히 나타나는 애니메이션 */\r\n  }\r\n  \r\n  /* 팝업 콘텐츠 */\r\n  .popup-content {\r\n    background-color: #fff;\r\n    padding: 2em;\r\n    border-radius: 20px;\r\n    max-width: 500px;\r\n    max-height: 1000px;\r\n    overflow-y: auto;\r\n    width: 90%;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n    transform: scale(0.8);\r\n    animation: scaleIn 0.8s forwards; /* 팝업 확대 애니메이션 */\r\n  }\r\n  \r\n  #popupTitle{\r\n    margin-top:2em;\r\n    margin-bottom: 2.5em;\r\n    text-align: center;\r\n    font-family: 'TheJamsil4Bold';\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n  }\r\n  \r\n  #showHelpButton{\r\n    position: fixed; \r\n    top: 169px;\r\n    margin-top: 25.2em;\r\n    margin-left: 18.8em;\r\n    z-index: 15;\r\n    border: none;\r\n    border-radius: 50%;\r\n    background-color:#415d37;;\r\n    color: white;\r\n    font-family: 'TheJamsil5Bold';\r\n    font-weight: 500;\r\n    font-size: 13px;\r\n    width: 28px;\r\n    height: 28px;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\r\n  }\r\n  \r\n  \r\n  #closepopup{\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    margin: 2em;\r\n  }\r\n  \r\n  .text{\r\n    align-items: center;\r\n    margin-bottom: 2.5em;\r\n  }\r\n  \r\n  /* 오버레이 페이드 인 애니메이션 */\r\n  @keyframes fadeIn {\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  \r\n  /* 팝업 확대 애니메이션 */\r\n  @keyframes scaleIn {\r\n    to {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n  \r\n  .date-selector {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .date-button {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 50%; /* 버튼을 원형으로 만듦 */\r\n    background-color: #ffffff; /* 기본 색상 */\r\n    border: none;\r\n    font-size: 14px;\r\n    font-family: 'TheJamsil4Bold';\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  .date-button.active {\r\n    background-color: #415d37; /* 선택된 버튼의 색상 */\r\n    color: #fff; /* 선택된 버튼의 글자 색상 */\r\n  }\r\n  \r\n  .forecast-date {\r\n    font-family: 'TheJamsil4Bold';\r\n    font-weight: 500;\r\n    font-size: 17px;\r\n  }\r\n  \r\n  .current-temperature {\r\n    font-family: 'TheJamsil4Bold';\r\n    font-weight: 500;\r\n    font-size: 70px;\r\n    font-weight: bold;\r\n    color: #333; /* 텍스트 색상을 진하게 */\r\n  }\r\n  \r\n  .weather-icon {\r\n    font-size: 50px; /* 날씨 이모티콘 크기를 키움 */\r\n    margin-top: 1rem;\r\n  }\r\n  \r\n  \r\n  .min-temp, .max-temp {\r\n    font-family: 'TheJamsil4Bold';\r\n    font-weight: 300;\r\n    font-size: 13px;\r\n    color:rgb(80, 80, 80);\r\n    margin-top: 0.1rem;\r\n  }\r\n  \r\n  .sun-info{\r\n    font-family: 'TheJamsil3Bold';\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    color:rgb(130, 130, 130);\r\n  }\r\n  \r\n  .date-button-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  \r\n  .day-label {\r\n    font-family: 'TheJamsil4Bold';\r\n    font-size: 12px;\r\n    color: #333;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  #zoom-button {\r\n  position: fixed;\r\n  bottom: 300px;\r\n  right: 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: rgba(255, 255, 255, 0.9); \r\n  width: 40px; \r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%; \r\n  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.3);\r\n  transition: transform 0.2s ease, background-color 0.2s ease;\r\n  z-index: 21;\r\n}\r\n \r\n/* 실험 */\r\n/* 태그 버튼 설정 */\r\n.tag-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n  padding:5px;\r\n  justify-content: center;\r\n  background-color: #ffffff;\r\n}\r\n\r\n/* 버튼 스타일 */\r\n.btn-custom {\r\n  background-color: #ffffff;\r\n  border-radius: 10px;\r\n  border-color: transparent;\r\n\r\n  color: black;\r\n  font-size: 14px; /* 글자 크기 */\r\n  padding: 1px 8px; /* 높이와 좌우 여백 조정 */\r\n}\r\n\r\n.btn-custom:hover {\r\n  transform: scale(1.05);\r\n  background-color: #84da77;\r\n  cursor: pointer;\r\n}\r\n\r\n/* 검색창 스타일 */\r\n.review-search input {\r\n  width: 20px;\r\n  padding: 5px;\r\n  border-top-left-radius: 5px;\r\n  border-bottom-left-radius: 5px;  \r\n  border: 1px solid #ddd;\r\n}\r\n\r\n/* 검색창 스타일 */\r\n.search-container {\r\n  display: flex;\r\n  align-items: center;\r\n  border: none; /* 테두리 제거 */\r\n  background-color: transparent; /* 배경색 제거 */\r\n  width: 100%; /* 부모 요소 기준으로 전체 너비 */\r\n  height: 40px;\r\n  justify-content: center; /* 검색창 내부 아이템 중앙 정렬 */\r\n}\r\n\r\n/* 검색창 스타일 */\r\n.search-container input {\r\n  flex: 1;\r\n  max-width: 190px; /* 검색창의 최대 너비 */\r\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.08);\r\n  padding: 0 10px;\r\n  font-size: 16px;\r\n  color: #333;\r\n  outline: none; /* 포커스 시 테두리 제거 */\r\n  height: 40px;\r\n  border: solid 1px #868e96;\r\n}\r\n\r\n/* 검색 버튼 */\r\n.search-button {\r\n  width: 45px;\r\n  height: 40px;\r\n  background-color: #327C2B; /* 버튼 배경색 */\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  border-top-right-radius: 5px;\r\n  border-bottom-right-radius: 5px;  \r\n}\r\n\r\n/* 검색 버튼 아이콘 */\r\n.search-button img {\r\n  width: 30px;\r\n  height: 30px;\r\n  filter: brightness(0) invert(1);\r\n}\r\n\r\n/* 검색창 placeholder 스타일 */\r\n.search-container input::placeholder {\r\n  color: #aaa;\r\n  font-size: 16px;\r\n}\r\n\r\n/* 검색창을 화면 중앙에 정렬 */\r\n.review-search {\r\n  display: flex;\r\n  justify-content: center; /* 수평 가운데 정렬 */\r\n  align-items: center; /* 수직 가운데 정렬 */\r\n  width: 100%; /* 부모 요소 기준 너비 설정 */\r\n  position: fixed; /* 화면 고정 */\r\n  top: 20px; /* 화면 위쪽에서 20px 아래로 배치 */\r\n  z-index: 20; /* 검색창이 위에 보이도록 설정 */\r\n}\r\n\r\n#elevationChart {\r\n  width: auto;\r\n  height: auto;\r\n}\r\n  </style>\r\n  \r\n  \r\n  ","import script from \"./MobileMountainDetailView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MobileMountainDetailView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./MobileMountainDetailView.vue?vue&type=style&index=0&id=07238100&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-07238100\"]])\n\nexport default __exports__","import {Chart, registerables} from '../dist/chart.js';\n\nChart.register(...registerables);\n\nexport * from '../dist/chart.js';\nexport default Chart;\n"],"names":["router","useRouter","route","useRoute","showHelp","ref","map","routeCoordinates","chartInstance","currentMarker","modalPolyline","selectedDayIndex","showMap","photoMap","selectedFilter","toggleMap","type","value","initializeMap","applyFilter","goToCoursePreviewPage","push","name","query","course","JSON","stringify","courseData","goToCourse3DPage","goToBalancePage","goToRealtimeHeatmap","goToAccidentHeatmap","autoSelectToday","panelTop","window","innerHeight","goToCourseInfoViewPage","console","log","filter","mapMarkers","length","forEach","marker","setMap","loadMarkers","props","__props","parse","script","document","createElement","onload","kakao","maps","load","Map","getElementById","center","LatLng","level","loadGeoJSONFromServer","src","head","appendChild","loadMarkersToPhotoMap","async","url","targetMap","response","fetch","ok","Error","status","geojsonData","json","processGeoJSON","error","comCourse","lat","latitude","lng","longitude","markerPosition","imageSrc","imageSize","Size","imageOption","offset","Point","markerImage","MarkerImage","Marker","position","title","courseName","image","infowindowPhotoMap","InfoWindow","content","communityUrl","communityTitle","disableAutoPan","event","addListener","getMap","close","open","requestCourse","axios","post","data","markerData","filteredMarkers","features","feature","markerType","properties","MNTN_NM2","spot","geometry","coordinates","finalImageSrc","MNTN_NM","infowindow","SAFE_SPOT2","allCoordinates","PMNTN_NM","includes","line","concat","coord","elevation","DN","groupedCoordinates","groupCoordinates","addRouteLayer","drawElevationChart","groupSize","groups","i","slice","flatCoordinates","flat","linePath","drawBaseRoute","group","startPoint","endPoint","slope","calculateSlope","color","getColorBySlope","groupLinePath","polyline","Polyline","path","strokeWeight","strokeColor","strokeOpacity","strokeStyle","bounds","LatLngBounds","extend","setBounds","basePolyline","calculateDistance","index","prevCoord","R","dLat","deg2rad","dLng","a","Math","sin","cos","c","atan2","sqrt","calculateHaversineDistance","coord1","coord2","lat1","lat2","deltaLat","deltaLon","start","end","horizontalDistance","elevationChange","diagonalDistance","pow","deg","PI","ctx","getContext","distances","calculateCumulativeDistances","point","totalDistance","scaleFactor","scaledDistances","distance","elevations","backgroundImagePlugin","id","beforeDraw","chart","config","options","backgroundImage","chartArea","Image","save","globalAlpha","drawImage","left","top","right","bottom","restore","destroy","Chart","labels","datasets","label","borderColor","borderWidth","fill","scales","x","display","text","grid","ticks","autoSkip","maxTicksLimit","maxRotation","minRotation","callback","toFixed","y","interaction","mode","intersect","plugins","tooltip","enabled","legend","onClick","elements","highlightRouteOnMap","onHover","cumulativeDistances","imagesSize","panTo","dailyWeather","sunriseTimes","sunsetTimes","selectedDateIndex","selectedDay","computed","selectDate","fetchWeatherData","apiKey","get","groupedByDay","list","item","date","dt_txt","split","selectedWeather","Object","keys","currentTemp","minTemp","maxTemp","calculateMinMaxTemp","daySummary","sunriseSunsetPromises","day","sunriseSunsetResults","Promise","all","result","formatTime","results","sunrise","sunset","formatDayOfWeek","formattedDate","Date","toLocaleDateString","weekday","formatDate","getDate","getWeatherEmoji","weatherMain","weatherIcons","Clear","Clouds","Rain","Snow","Fog","Thunderstorm","Drizzle","Mist","breeze","translateWeatherDescription","weatherId","weatherDescriptions","dayData","temps","main","temp","min","max","time","toLocaleTimeString","hour","minute","timeZone","gotomobilecourse","location","href","closeHelp","onMounted","queryMapType","mapType","then","showTestContent","toggleTestContent","setTimeout","isMenuOpen","toggleDropdown","dropdownMenu","querySelector","classList","add","remove","__exports__","register","registerables"],"sourceRoot":""}