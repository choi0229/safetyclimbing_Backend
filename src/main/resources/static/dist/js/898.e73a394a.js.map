{"version":3,"file":"js/898.e73a394a.js","mappings":"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","sources":["webpack://frontend/./src/views/RealTimePeopleHeatmapView.vue","webpack://frontend/./src/views/RealTimePeopleHeatmapView.vue?174c"],"sourcesContent":["<template>\r\n  <HeaderView style=\"z-index: 4;width: 1920px;\"></HeaderView>\r\n\r\n  <div class=\"dashboard\">\r\n    <!-- 사이드바 -->\r\n    <aside class=\"sidebar\">\r\n      <div class=\"header\">\r\n        <p @click=\"toggleExtraSidebar\" class=\"header-title\">자세히 보기</p>\r\n      </div>\r\n\r\n      <div class=\"section\">\r\n        <h3 id=\"realTimeTraffic\">실시간 트래픽 비교</h3>\r\n        <canvas id=\"trafficChart\"></canvas>\r\n      </div>\r\n\r\n      <div class=\"content\">\r\n          <p id=\"contentTitle\">코스 이용현황</p>\r\n          <div class=\"stats-container\">\r\n            <div class=\"section\">\r\n              <h3 id=\"todayPeopleTOP5\">금일 유동인구  TOP 4</h3>\r\n              <ul class=\"station-list\">\r\n                <li>\r\n                  <div class=\"rank\">1</div>\r\n                  <div class=\"station\">마루</div>\r\n                  <div class=\"number\">47</div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"rank\">2</div>\r\n                  <div class=\"station\">무악</div>\r\n                  <div class=\"number\">24</div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"rank\">3</div>\r\n                  <div class=\"station\">홍제</div>\r\n                  <div class=\"number\">11</div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"rank\">4</div>\r\n                  <div class=\"station\">부암</div>\r\n                  <div class=\"number\">9</div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div class=\"section\">\r\n              <h3 id=\"CoursePeopleTOP5\">누적 코스별 유동인구 TOP 5</h3>\r\n              <ul class=\"station-list\">\r\n                <li>\r\n                  <div class=\"rank\">1</div>\r\n                  <div class=\"station\">무악</div>\r\n                  <div class=\"number\">67,969</div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"rank\">2</div>\r\n                  <div class=\"station\">마루</div>\r\n                  <div class=\"number\">52,164</div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"rank\">3</div>\r\n                  <div class=\"station\">홍제</div>\r\n                  <div class=\"number\">23,164</div>\r\n                </li>\r\n                <li>\r\n                  <div class=\"rank\">4</div>\r\n                  <div class=\"station\">부암</div>\r\n                  <div class=\"number\">7,164</div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </aside>\r\n\r\n    <!-- 지도 -->\r\n    <main class=\"main\">\r\n      <div id=\"map\" ref=\"mapContainer\" class=\"map-container\"></div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport HeaderView from '@/components/HeaderView.vue';\r\nimport { ref, onMounted } from 'vue';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'leaflet.heat';\r\nimport { Chart, BarController, BarElement, CategoryScale, LinearScale, Tooltip } from 'chart.js';\r\n\r\n// Register required components\r\nChart.register(BarController, BarElement, CategoryScale, LinearScale, Tooltip);\r\n\r\nconst mapContainer = ref(null);\r\nlet leafletMap = null;\r\nlet heatmapLayer = null; // 히트맵 레이어\r\n\r\nonMounted(async () => {\r\n  initializeMap();\r\n  const geojsonData = await loadGeoJSON();\r\n  const getjsonData2 = await loadGeoJSON2();\r\n  initializeHeatmap(geojsonData);\r\n  drawRoutesFromGeoJSON(getjsonData2); // 경로를 지도에 추가\r\n  simulateRealTimeHeatmap(geojsonData); // 실시간 히트맵 데이터 시뮬레이션 시작\r\n  initializeTrafficChart();\r\n});\r\n// 실시간 트래픽 데이터 (예제 데이터)\r\nconst realTimeTraffic = ref(0);\r\nconst averageTraffic = ref(100); // 평균값 초기화\r\n\r\n// 실시간 트래픽 차트 초기화\r\nfunction initializeTrafficChart() {\r\n  const ctx = document.getElementById(\"trafficChart\").getContext(\"2d\");\r\n  const trafficChart = new Chart(ctx, {\r\n    type: \"bar\",\r\n    data: {\r\n      labels: [\"현재 유동 인구\", \"평균 유동 인구\"],\r\n      datasets: [\r\n        {\r\n          label: \"유동 인구\",\r\n          data: [realTimeTraffic.value, averageTraffic.value],\r\n          backgroundColor: [\"#3498db\", \"#e74c3c\"],\r\n          borderColor: [\"#2980b9\", \"#c0392b\"],\r\n          borderWidth: 1,\r\n          borderRadius: 5,\r\n        },\r\n      ],\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          display: false,\r\n        },\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  // 실시간 업데이트\r\n  setInterval(() => {\r\n    realTimeTraffic.value = Math.floor(Math.random() * 200); // 현재 유동 인구 값 업데이트\r\n    trafficChart.data.datasets[0].data = [\r\n      realTimeTraffic.value,\r\n      averageTraffic.value,\r\n    ];\r\n    trafficChart.update();\r\n  }, 5000); // 5초마다 업데이트\r\n}\r\n\r\n\r\n// 지도 초기화\r\nfunction initializeMap() {\r\n  leafletMap = L.map(mapContainer.value, {\r\n    center: [37.634845475, 126.98081674],\r\n    zoom: 15,\r\n    zoomControl: true, // 줌 컨트롤 활성화\r\n    scrollWheelZoom: true, // 마우스 휠로 줌 활성화\r\n    worldCopyJump: true, // 세계 복사 점프 활성화\r\n    zoomAnimation: true, // 줌 애니메이션 활성화\r\n    easeLinearity: 0.25, // 지도 이동 시 부드럽게 움직이도록 설정\r\n    inertia: true, // 관성 이동 활성화\r\n    inertiaDeceleration: 3000, // 관성 감속 설정\r\n  });\r\n\r\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    maxZoom: 19,\r\n    attribution: '© OpenStreetMap contributors',\r\n  }).addTo(leafletMap);\r\n}\r\n\r\nasync function loadGeoJSON2() {\r\n  try {\r\n    const response = await fetch('/data/인왕산ele copy.geojson'); // GeoJSON 파일 경로\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GeoJSON 파일 로드 실패:', error);\r\n  }\r\n}\r\n\r\n// GeoJSON 데이터를 로드\r\nasync function loadGeoJSON() {\r\n  try {\r\n    const response = await fetch('/data/인왕산ele copy.geojson'); // GeoJSON 파일 경로\r\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('GeoJSON 파일 로드 실패:', error);\r\n  }\r\n}\r\n\r\n// 히트맵 초기화\r\nfunction initializeHeatmap(geojsonData) {\r\n  const heatmapData = extractHeatmapDataFromGeoJSON(geojsonData);\r\n  heatmapLayer = L.heatLayer(heatmapData, {\r\n    radius: 25,\r\n    blur: 15,\r\n    maxZoom: 17,\r\n  }).addTo(leafletMap);\r\n}\r\n\r\n// GeoJSON에서 히트맵 데이터를 추출\r\nfunction extractHeatmapDataFromGeoJSON(geojsonData) {\r\n  const heatmapData = [];\r\n  geojsonData.features.forEach((feature) => {\r\n    const { type, coordinates } = feature.geometry;\r\n    if (type === 'LineString') {\r\n      coordinates.forEach(([lng, lat]) => {\r\n        heatmapData.push([lat, lng, 0.5]); // 강도값 0.5\r\n      });\r\n    } else if (type === 'MultiLineString') {\r\n      coordinates.flat().forEach(([lng, lat]) => {\r\n        heatmapData.push([lat, lng, 0.5]);\r\n      });\r\n    }\r\n  });\r\n  return heatmapData;\r\n}\r\n\r\n// GeoJSON에서 경로를 지도에 그리기\r\nfunction drawRoutesFromGeoJSON(geojsonData) {\r\n  geojsonData.features.forEach((feature) => {\r\n    const { type, coordinates } = feature.geometry;\r\n\r\n    if (type === 'LineString') {\r\n      const latLngs = coordinates.map(([lng, lat]) => [lat, lng]);\r\n      L.polyline(latLngs, {\r\n        color: 'blue',\r\n        weight: 4,\r\n        opacity: 0.8,\r\n      }).addTo(leafletMap);\r\n    } else if (type === 'MultiLineString') {\r\n      coordinates.forEach((line) => {\r\n        const latLngs = line.map(([lng, lat]) => [lat, lng]);\r\n        L.polyline(latLngs, {\r\n          color: 'blue',\r\n          weight: 4,\r\n          opacity: 0.8,\r\n        }).addTo(leafletMap);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// 실시간 히트맵 데이터 시뮬레이션\r\nfunction simulateRealTimeHeatmap(geojsonData) {\r\n  const allCoordinates = extractHeatmapDataFromGeoJSON(geojsonData).map(([lat, lng]) => ({\r\n    lat,\r\n    lng,\r\n  }));\r\n\r\n  // 이동 객체 생성\r\n  const movingObjects = createMovingObjects(allCoordinates, 200); // 50명의 이동 객체\r\n\r\n  // 히트맵 데이터 업데이트 함수\r\n  function updateHeatmap() {\r\n    const heatmapData = movingObjects.map((obj) => {\r\n      obj.updatePosition();\r\n      return [obj.currentPosition.lat, obj.currentPosition.lng, 0.7]; // 강도값 0.7\r\n    });\r\n\r\n    if (heatmapLayer) {\r\n      heatmapLayer.setLatLngs(heatmapData);\r\n    }\r\n  }\r\n\r\n  // 1초마다 히트맵 갱신\r\n  setInterval(updateHeatmap, 100);\r\n}\r\n\r\n// 이동 객체 생성 함수\r\nfunction createMovingObjects(coordinates, count) {\r\n  return Array.from({ length: count }, () => {\r\n    const startIndex = Math.floor(Math.random() * coordinates.length);\r\n    const isReverse = Math.random() > 0.5;\r\n\r\n    return {\r\n      currentPosition: coordinates[startIndex],\r\n      currentIndex: startIndex,\r\n      isReverse,\r\n      updatePosition() {\r\n        this.currentIndex += this.isReverse ? -1 : 1;\r\n        if (this.currentIndex < 0) {\r\n          this.currentIndex = coordinates.length - 1;\r\n        } else if (this.currentIndex >= coordinates.length) {\r\n          this.currentIndex = 0;\r\n        }\r\n        this.currentPosition = coordinates[this.currentIndex];\r\n      },\r\n    };\r\n  });\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#trafficChart {\r\n  width: 100%;\r\n  height: 200px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.section {\r\n  background: #ffffff;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n}\r\n\r\n.section h3 {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n  color: #34495e;\r\n}\r\n\r\n.dashboard {\r\n  display: grid;\r\n  grid-template-columns: 400px 1fr;\r\n  height: 100vh;\r\n  background-color: #f4f5f7;\r\n}\r\n\r\n/* 사이드바 */\r\n.sidebar {\r\n  background: #ffffff;\r\n  border-right: 1px solid #e0e0e0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n}\r\n\r\n.sidebar .header {\r\n  padding: 10px 0;\r\n  margin-bottom: 15px;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.sidebar .content {\r\n  overflow-y: auto;\r\n  flex-grow: 1;\r\n}\r\n\r\n.stats-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.section {\r\n  background: #ffffff;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 15px;\r\n}\r\n\r\n.section h3 {\r\n  font-size: 22px;\r\n  font-weight: 1000;\r\n  margin-bottom: 10px;\r\n  color: #2c3e50;\r\n}\r\n\r\n.station-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.station-list li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 8px 0;\r\n  border-bottom: 1px solid #e6e6e6;\r\n}\r\n\r\n.station-list li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.station-list .rank {\r\n  font-weight: bold;\r\n  color: #3498db;\r\n}\r\n\r\n.station-list .station {\r\n  color: #2c3e50;\r\n  font-weight: 500;\r\n}\r\n\r\n.station-list .number {\r\n  font-weight: bold;\r\n  color: #e74c3c;\r\n}\r\n\r\n/* 지도 스타일 */\r\n.map-container {\r\n  height: 100%;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n</style>\r\n","import script from \"./RealTimePeopleHeatmapView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RealTimePeopleHeatmapView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./RealTimePeopleHeatmapView.vue?vue&type=style&index=0&id=7161c0e4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7161c0e4\"]])\n\nexport default __exports__"],"names":["Chart","register","BarController","BarElement","CategoryScale","LinearScale","Tooltip","mapContainer","ref","leafletMap","heatmapLayer","onMounted","async","initializeMap","geojsonData","loadGeoJSON","getjsonData2","loadGeoJSON2","initializeHeatmap","drawRoutesFromGeoJSON","simulateRealTimeHeatmap","initializeTrafficChart","realTimeTraffic","averageTraffic","ctx","document","getElementById","getContext","trafficChart","type","data","labels","datasets","label","value","backgroundColor","borderColor","borderWidth","borderRadius","options","responsive","plugins","legend","display","scales","y","beginAtZero","setInterval","Math","floor","random","update","L","center","zoom","zoomControl","scrollWheelZoom","worldCopyJump","zoomAnimation","easeLinearity","inertia","inertiaDeceleration","maxZoom","attribution","addTo","response","fetch","ok","Error","status","json","error","console","heatmapData","extractHeatmapDataFromGeoJSON","radius","blur","features","forEach","feature","coordinates","geometry","lng","lat","push","flat","latLngs","map","color","weight","opacity","line","allCoordinates","movingObjects","createMovingObjects","updateHeatmap","obj","updatePosition","currentPosition","setLatLngs","count","Array","from","length","startIndex","isReverse","currentIndex","this","__exports__"],"sourceRoot":""}